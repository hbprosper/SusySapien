<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TrackProbabilityTagInfo.xml
  Created:  Thu Jan 14 22:45:45 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/TrackProbabilityTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/BTauReco/interface/TrackProbabilityTagInfo.h">

    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/JTATagInfo.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetTracksAssociation.h&quot;"/>

    <namespace name="reco">

        <class name="TrackProbabilityTagInfo"
               fullname="reco::TrackProbabilityTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public JTATagInfo"/>

            <section name="public">
                <constructor name="TrackProbabilityTagInfo"
                             return=""
                             args="['std::vector&lt;double&gt;','std::vector&lt;double&gt;','std::vector&lt;int&gt;','std::vector&lt;int&gt;','const JetTracksAssociationRef&amp;']"
                             vars="['probability2d','probability3d','trackOrder2d','trackOrder3d','jtaRef']"
                             qual="">
TrackProbabilityTagInfo(    std::vector&lt;double&gt; probability2d, std::vector&lt;double&gt; probability3d, std::vector&lt;int&gt; trackOrder2d, std::vector&lt;int&gt; trackOrder3d, const JetTracksAssociationRef&amp; jtaRef);
                </constructor>

                <constructor name="TrackProbabilityTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrackProbabilityTagInfo();
                </constructor>

                <destructor name="~TrackProbabilityTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TrackProbabilityTagInfo();
                </destructor>

                <method1 name="factorial"
                         return="int"
                         args="['int']"
                         vars="['n']"
                         qual="const">
int factorial(int n) const;
                </method1>

                <method1 name="probability"
                         return="virtual float"
                         args="['size_t','int']"
                         vars="['n','ip']"
                         qual="const">
virtual float probability(size_t n, int ip) const;
                </method1>

                <method1 name="jetProbability"
                         return="virtual float"
                         args="['int','float']"
                         vars="['ip','minTrackProb']"
                         qual="const">
virtual float jetProbability(int ip, float minTrackProb) const;
                </method1>

                <method1 name="discriminator"
                         return="virtual float"
                         args="['int','float']"
                         vars="['ipType','minProb']"
                         qual="const">
virtual float discriminator(int ipType, float minProb) const;
                    <comment>
  Recompute discriminator
  ipType = 0 means 3d impact parameter
  ipType = 1 means transverse impact parameter

  minProb is the minimum probability allowed  for a single track. Tracks with lower probability
  are considered with a probability = minProb.
                    </comment>
                </method1>

                <method1 name="selectedTracks"
                         return="virtual int"
                         args="['int']"
                         vars="['ipType']"
                         qual="const">
virtual int selectedTracks(int ipType) const;
                </method1>

                <method1 name="trackIndex"
                         return="virtual int"
                         args="['size_t','int']"
                         vars="['n','ip']"
                         qual="const">
virtual int trackIndex(size_t n, int ip) const;
                </method1>

                <method1 name="track"
                         return="virtual const Track&amp;"
                         args="['size_t','int']"
                         vars="['n','ipType']"
                         qual="const">
virtual const Track&amp; track(size_t n, int ipType) const;
                </method1>

                <method1 name="clone"
                         return="virtual TrackProbabilityTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TrackProbabilityTagInfo* clone() const;
                </method1>

            </section>

        </class>
        <typedef name="TrackProbabilityTagInfoCollection"
                 value="std::vector&lt;TrackProbabilityTagInfo &gt;">
typedef std::vector&lt;TrackProbabilityTagInfo &gt; TrackProbabilityTagInfoCollection;
            <comment>
  typedef edm::ExtCollection&lt; TrackProbabilityTagInfo,JetTagCollection&gt; TrackProbabilityExtCollection;
  typedef edm::OneToOneAssociation&lt;JetTagCollection, TrackProbabilityTagInfo&gt; TrackProbabilityExtCollection;
            </comment>
        </typedef>

        <typedef name="TrackProbabilityTagInfoRef"
                 value="edm::Ref&lt;TrackProbabilityTagInfoCollection&gt;">
typedef edm::Ref&lt;TrackProbabilityTagInfoCollection&gt; TrackProbabilityTagInfoRef;
        </typedef>

        <typedef name="TrackProbabilityTagInfoRefProd"
                 value="edm::RefProd&lt;TrackProbabilityTagInfoCollection&gt;">
typedef edm::RefProd&lt;TrackProbabilityTagInfoCollection&gt; TrackProbabilityTagInfoRefProd;
        </typedef>

        <typedef name="TrackProbabilityTagInfoRefVector"
                 value="edm::RefVector&lt;TrackProbabilityTagInfoCollection&gt;">
typedef edm::RefVector&lt;TrackProbabilityTagInfoCollection&gt; TrackProbabilityTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="JTATagInfo"/>
    <type name="TrackProbabilityTagInfo*"/>
    <type name="const JetTracksAssociationRef&amp;"/>
    <type name="const Track&amp;"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::TrackProbabilityTagInfo"/>
    <type name="size_t"/>
    <type name="std::vector&lt;double&gt;"/>
    <type name="std::vector&lt;int&gt;"/>
    <type name="void"/>
</header>
