<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TrackIPTagInfo.xml
  Created:  Fri Jan 15 20:45:17 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/TrackIPTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/BTauReco/interface/TrackIPTagInfo.h">

    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/GeometryCommonDetAlgo/interface/Measurement1D.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/VertexReco/interface/VertexFwd.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetTracksAssociation.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/JTATagInfo.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalVector.h&quot;"/>

    <namespace name="reco">

        <class name="TrackIPTagInfo"
               fullname="reco::TrackIPTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public JTATagInfo"/>

            <section name="public">

                <class name="TrackIPData"
                       fullname="reco::TrackIPTagInfo::TrackIPData"
                       module="DataFormats.BTauReco"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
GlobalPoint closestToJetAxis;
                        </member>

                        <member>
GlobalPoint closestToGhostTrack;
                        </member>

                        <member>
Measurement1D ip2d;
                        </member>

                        <member>
Measurement1D ip3d;
                        </member>

                        <member>
Measurement1D distanceToJetAxis;
                        </member>

                        <member>
Measurement1D distanceToGhostTrack;
                        </member>

                        <member>
float ghostTrackWeight;
                        </member>

                    </section>

                    <typemap name="TrackIPData"
                             value="reco::TrackIPTagInfo::TrackIPData"
                             type="class"/>
                    <typemap name="closestToGhostTrack"
                             value="reco::TrackIPTagInfo::TrackIPData::closestToGhostTrack"
                             type="member"/>
                    <typemap name="closestToJetAxis"
                             value="reco::TrackIPTagInfo::TrackIPData::closestToJetAxis"
                             type="member"/>
                    <typemap name="distanceToGhostTrack"
                             value="reco::TrackIPTagInfo::TrackIPData::distanceToGhostTrack"
                             type="member"/>
                    <typemap name="distanceToJetAxis"
                             value="reco::TrackIPTagInfo::TrackIPData::distanceToJetAxis"
                             type="member"/>
                    <typemap name="ghostTrackWeight"
                             value="reco::TrackIPTagInfo::TrackIPData::ghostTrackWeight"
                             type="member"/>
                    <typemap name="ip2d"
                             value="reco::TrackIPTagInfo::TrackIPData::ip2d"
                             type="member"/>
                    <typemap name="ip3d"
                             value="reco::TrackIPTagInfo::TrackIPData::ip3d"
                             type="member"/>

                </class>
                <constructor name="TrackIPTagInfo"
                             return=""
                             args="['const std::vector&lt;TrackIPData&gt;&amp;','const std::vector&lt;float&gt;&amp;','const std::vector&lt;float&gt;&amp;','const edm::RefVector&lt;TrackCollection&gt;&amp;','const JetTracksAssociationRef&amp;','const edm::Ref&lt;VertexCollection&gt;&amp;','const GlobalVector&amp;','const TrackRef&amp;']"
                             vars="['ipData','prob2d','prob3d','selectedTracks','jtaRef','pv','axis','ghostTrack']"
                             qual="">
TrackIPTagInfo(     const std::vector&lt;TrackIPData&gt;&amp; ipData, const std::vector&lt;float&gt;&amp; prob2d, const std::vector&lt;float&gt;&amp; prob3d, const edm::RefVector&lt;TrackCollection&gt;&amp; selectedTracks, const JetTracksAssociationRef&amp; jtaRef, const edm::Ref&lt;VertexCollection&gt;&amp; pv, const GlobalVector&amp; axis, const TrackRef&amp; ghostTrack);
                </constructor>

                <constructor name="TrackIPTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrackIPTagInfo();
                </constructor>

                <destructor name="~TrackIPTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TrackIPTagInfo();
                </destructor>

                <method1 name="clone"
                         return="virtual TrackIPTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TrackIPTagInfo* clone(void) const;
                    <comment>
      clone
                    </comment>
                </method1>

                <method1 name="hasProbabilities"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool hasProbabilities() const;
                    <comment>
   Check if probability information is globally available
   impact parameters in the collection

   Even if true for some tracks it is possible that a -1 probability is returned
   if some problem occured
                    </comment>
                </method1>

                <method2 name="impactParameterData"
                         return="const std::vector&lt;TrackIPData&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;TrackIPData&gt;&amp; impactParameterData() const;
                    <comment>
   Vectors of TrackIPData orderd as the selectedTracks()
                    </comment>
                </method2>

                <method2 name="selectedTracks"
                         return="const edm::RefVector&lt;TrackCollection&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const edm::RefVector&lt;TrackCollection&gt;&amp; selectedTracks() const;
                    <comment>
   Return the vector of tracks for which the IP information is available
   Quality cuts are applied to reject fake tracks
                    </comment>
                </method2>

                <method2 name="probabilities"
                         return="const std::vector&lt;float&gt;&amp;"
                         args="['int']"
                         vars="['ip']"
                         qual="const">
const std::vector&lt;float&gt;&amp; probabilities(int ip) const;
                </method2>

                <enum name="SortCriteria">
enum SortCriteria {
 IP3DSig=0, Prob3D, IP2DSig, Prob2D, 
                      IP3DValue, IP2DValue };
                    <field name="IP3DSig" value="0"/>
                    <field name="Prob3D" value=""/>
                    <field name="IP2DSig" value=""/>
                    <field name="Prob2D" value=""/>
                    <field name="IP3DValue" value=""/>
                    <field name="IP2DValue" value=""/>
                </enum>

                <method2 name="sortedIndexesWithCut"
                         return="std::vector&lt;size_t&gt;"
                         args="['float','SortCriteria=IP3DSig']"
                         vars="['cut','mode']"
                         qual="const">
std::vector&lt;size_t&gt; sortedIndexesWithCut(float cut, SortCriteria mode=IP3DSig) const;
                    <comment>
   Return the list of track index sorted by mode
   A cut can is specified to select only tracks with
   IP value or significance &gt; cut
   or
   probability &lt; cut
   (according to the specified mode)
                    </comment>
                </method2>

                <method2 name="sortedIndexes"
                         return="std::vector&lt;size_t&gt;"
                         args="['SortCriteria=IP3DSig']"
                         vars="['mode']"
                         qual="const">
std::vector&lt;size_t&gt; sortedIndexes(SortCriteria mode=IP3DSig) const;
                    <comment>
   Return the list of track index sorted by mode
                    </comment>
                </method2>

                <method2 name="sortedTracks"
                         return="reco::TrackRefVector"
                         args="['std::vector&lt;size_t&gt;']"
                         vars="['indexes']"
                         qual="const">
reco::TrackRefVector sortedTracks(std::vector&lt;size_t&gt; indexes) const;
                </method2>

                <method1 name="taggingVariables"
                         return="virtual TaggingVariableList"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TaggingVariableList taggingVariables(void) const;
                </method1>

                <method2 name="primaryVertex"
                         return="const edm::Ref&lt;VertexCollection&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const edm::Ref&lt;VertexCollection&gt;&amp; primaryVertex() const;
                </method2>

                <method1 name="axis"
                         return="const GlobalVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const GlobalVector&amp; axis() const;
                </method1>

                <method1 name="ghostTrack"
                         return="const TrackRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRef&amp; ghostTrack() const;
                </method1>

            </section>

            <typemap name="IP2DSig"
                     value="reco::TrackIPTagInfo::IP2DSig"
                     type="enum"/>
            <typemap name="IP2DValue"
                     value="reco::TrackIPTagInfo::IP2DValue"
                     type="enum"/>
            <typemap name="IP3DSig "
                     value="reco::TrackIPTagInfo::IP3DSig "
                     type="enum"/>
            <typemap name="IP3DValue"
                     value="reco::TrackIPTagInfo::IP3DValue"
                     type="enum"/>
            <typemap name="Prob2D"
                     value="reco::TrackIPTagInfo::Prob2D"
                     type="enum"/>
            <typemap name="Prob3D"
                     value="reco::TrackIPTagInfo::Prob3D"
                     type="enum"/>
            <typemap name="SortCriteria"
                     value="reco::TrackIPTagInfo::SortCriteria"
                     type="enum"/>

        </class>
        <typedef name="TrackIPTagInfoCollection"
                 value="std::vector&lt;TrackIPTagInfo &gt;">
typedef std::vector&lt;TrackIPTagInfo &gt; TrackIPTagInfoCollection;
            <comment>
  typedef edm::ExtCollection&lt; TrackIPTagInfo,JetTagCollection&gt; TrackCountingExtCollection;
  typedef edm::OneToOneAssociation&lt;JetTagCollection, TrackIPTagInfo&gt; TrackCountingExtCollection;
            </comment>
        </typedef>

        <typedef name="TrackIPTagInfoRef"
                 value="edm::Ref&lt;TrackIPTagInfoCollection&gt;">
typedef edm::Ref&lt;TrackIPTagInfoCollection&gt; TrackIPTagInfoRef;
        </typedef>

        <typedef name="TrackIPTagInfoRefProd"
                 value="edm::RefProd&lt;TrackIPTagInfoCollection&gt;">
typedef edm::RefProd&lt;TrackIPTagInfoCollection&gt; TrackIPTagInfoRefProd;
        </typedef>

        <typedef name="TrackIPTagInfoRefVector"
                 value="edm::RefVector&lt;TrackIPTagInfoCollection&gt;">
typedef edm::RefVector&lt;TrackIPTagInfoCollection&gt; TrackIPTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="GlobalPoint"/>
    <type name="JTATagInfo"/>
    <type name="Measurement1D"/>
    <type name="SortCriteria"/>
    <type name="TaggingVariableList"/>
    <type name="TrackIPTagInfo*"/>
    <type name="bool"/>
    <type name="const GlobalVector&amp;"/>
    <type name="const JetTracksAssociationRef&amp;"/>
    <type name="const TrackRef&amp;"/>
    <type name="const edm::Ref&lt;VertexCollection&gt;&amp;"/>
    <type name="const edm::RefVector&lt;TrackCollection&gt;&amp;"/>
    <type name="const std::vector&lt;TrackIPData&gt;&amp;"/>
    <type name="const std::vector&lt;float&gt;&amp;"/>
    <type name="enum SortCriteria"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::TrackIPTagInfo"/>
    <type name="reco::TrackIPTagInfo::TrackIPData"/>
    <type name="reco::TrackRefVector"/>
    <type name="std::vector&lt;size_t&gt;"/>
    <type name="void"/>
</header>
