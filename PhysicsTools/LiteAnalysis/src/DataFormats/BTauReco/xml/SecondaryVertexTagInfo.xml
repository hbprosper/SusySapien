<?xml version="1.0"?>
<!--
==============================================================================
  XML File: SecondaryVertexTagInfo.xml
  Created:  Thu Jan 14 22:45:41 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/SecondaryVertexTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/BTauReco/interface/SecondaryVertexTagInfo.h">

    <include name="&lt;utility&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/GeometryCommonDetAlgo/interface/Measurement1D.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/VertexReco/interface/Vertex.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalVector.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetTracksAssociation.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/JTATagInfo.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/TrackIPTagInfo.h&quot;"/>

    <namespace name="reco">

        <class name="SecondaryVertexTagInfo"
               fullname="reco::SecondaryVertexTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public BaseTagInfo"/>

            <section name="public">

                <class name="TrackData"
                       fullname="reco::SecondaryVertexTagInfo::TrackData"
                       module="DataFormats.BTauReco"
                       project=""
                       type="regular struct">

                    <section>
                        <enum name="Status">
enum Status {

   trackSelected=0, 
   trackUsedForVertexFit, 
   trackAssociatedToVertex
  };
                            <field name="trackSelected" value="0"/>
                            <field name="trackUsedForVertexFit" value=""/>
                            <field name="trackAssociatedToVertex" value=""/>
                        </enum>

                        <method1 name="usedForVertexFit"
                                 return="inline bool"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
inline bool usedForVertexFit() const;
                        </method1>

                        <method1 name="associatedToVertex"
                                 return="inline bool"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
inline bool associatedToVertex() const;
                        </method1>

                        <method1 name="associatedToVertex"
                                 return="inline bool"
                                 args="['unsigned int']"
                                 vars="['index']"
                                 qual="const">
inline bool associatedToVertex(unsigned int index) const;
                        </method1>

                        <member>
Status svStatus;
                        </member>

                    </section>

                    <typemap name="Status"
                             value="reco::SecondaryVertexTagInfo::TrackData::Status"
                             type="enum"/>
                    <typemap name="TrackData"
                             value="reco::SecondaryVertexTagInfo::TrackData"
                             type="class"/>
                    <typemap name="svStatus"
                             value="reco::SecondaryVertexTagInfo::TrackData::svStatus"
                             type="member"/>
                    <typemap name="trackAssociatedToVertex"
                             value="reco::SecondaryVertexTagInfo::TrackData::trackAssociatedToVertex"
                             type="enum"/>
                    <typemap name="trackSelected "
                             value="reco::SecondaryVertexTagInfo::TrackData::trackSelected "
                             type="enum"/>
                    <typemap name="trackUsedForVertexFit"
                             value="reco::SecondaryVertexTagInfo::TrackData::trackUsedForVertexFit"
                             type="enum"/>

                </class>

                <class name="VertexData"
                       fullname="reco::SecondaryVertexTagInfo::VertexData"
                       module="DataFormats.BTauReco"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
Vertex vertex;
                        </member>

                        <member>
Measurement1D dist2d, dist3d;
                        </member>

                        <member>
GlobalVector direction;
                        </member>

                    </section>

                    <typemap name="VertexData"
                             value="reco::SecondaryVertexTagInfo::VertexData"
                             type="class"/>
                    <typemap name="direction"
                             value="reco::SecondaryVertexTagInfo::VertexData::direction"
                             type="member"/>
                    <typemap name="dist3d"
                             value="reco::SecondaryVertexTagInfo::VertexData::dist3d"
                             type="member"/>
                    <typemap name="vertex"
                             value="reco::SecondaryVertexTagInfo::VertexData::vertex"
                             type="member"/>

                </class>
                <typedef name="IndexedTrackData"
                         value="std::pair&lt;unsigned int, TrackData&gt;">
typedef std::pair&lt;unsigned int, TrackData&gt; IndexedTrackData;
                </typedef>

                <constructor name="SecondaryVertexTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
SecondaryVertexTagInfo();
                </constructor>

                <destructor name="~SecondaryVertexTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~SecondaryVertexTagInfo();
                </destructor>

                <constructor name="SecondaryVertexTagInfo"
                             return=""
                             args="['const std::vector&lt;IndexedTrackData&gt;&amp;','const std::vector&lt;VertexData&gt;&amp;','unsigned int','const TrackIPTagInfoRef&amp;']"
                             vars="['trackData','svData','vertexCandidates','trackIPTagInfoRef']"
                             qual="">
SecondaryVertexTagInfo(                  const std::vector&lt;IndexedTrackData&gt;&amp; trackData, const std::vector&lt;VertexData&gt;&amp; svData, unsigned int vertexCandidates, const TrackIPTagInfoRef&amp; trackIPTagInfoRef);
                </constructor>

                <method1 name="clone"
                         return="virtual SecondaryVertexTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual SecondaryVertexTagInfo* clone(void) const;
                    <comment>
            clone
                    </comment>
                </method1>

                <method1 name="trackIPTagInfoRef"
                         return="const TrackIPTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackIPTagInfoRef&amp; trackIPTagInfoRef() const;
                </method1>

                <method2 name="jet"
                         return="virtual edm::RefToBase&lt;Jet&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual edm::RefToBase&lt;Jet&gt; jet(void) const;
                </method2>

                <method1 name="tracks"
                         return="virtual TrackRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TrackRefVector tracks(void) const;
                </method1>

                <method1 name="jtaRef"
                         return="const JetTracksAssociationRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const JetTracksAssociationRef&amp; jtaRef(void) const;
                </method1>

                <method1 name="secondaryVertex"
                         return="const Vertex&amp;"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
const Vertex&amp; secondaryVertex(unsigned int index) const;
                </method1>

                <method1 name="nSelectedTracks"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nSelectedTracks() const;
                </method1>

                <method1 name="nVertexTracks"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nVertexTracks() const;
                </method1>

                <method1 name="nVertexTracks"
                         return="unsigned int"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
unsigned int nVertexTracks(unsigned int index) const;
                </method1>

                <method1 name="nVertices"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nVertices() const;
                </method1>

                <method1 name="nVertexCandidates"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nVertexCandidates() const;
                </method1>

                <method1 name="selectedTracks"
                         return="TrackRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackRefVector selectedTracks() const;
                </method1>

                <method1 name="vertexTracks"
                         return="TrackRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackRefVector vertexTracks() const;
                </method1>

                <method1 name="vertexTracks"
                         return="TrackRefVector"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
TrackRefVector vertexTracks(unsigned int index) const;
                </method1>

                <method1 name="track"
                         return="TrackRef"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
TrackRef track(unsigned int index) const;
                </method1>

                <method1 name="findTrack"
                         return="unsigned int"
                         args="['const TrackRef&amp;']"
                         vars="['track']"
                         qual="const">
unsigned int findTrack(const TrackRef&amp; track) const;
                </method1>

                <method1 name="trackData"
                         return="const TrackData&amp;"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
const TrackData&amp; trackData(unsigned int index) const;
                </method1>

                <method1 name="trackData"
                         return="const TrackData&amp;"
                         args="['const TrackRef&amp;']"
                         vars="['track']"
                         qual="const">
const TrackData&amp; trackData(const TrackRef&amp; track) const;
                </method1>

                <method1 name="trackIPData"
                         return="const TrackIPTagInfo::TrackIPData&amp;"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
const TrackIPTagInfo::TrackIPData&amp; trackIPData(unsigned int index) const;
                </method1>

                <method1 name="trackIPData"
                         return="const TrackIPTagInfo::TrackIPData&amp;"
                         args="['const TrackRef&amp;']"
                         vars="['track']"
                         qual="const">
const TrackIPTagInfo::TrackIPData&amp; trackIPData(const TrackRef&amp; track) const;
                </method1>

                <method1 name="trackWeight"
                         return="float"
                         args="['unsigned int','unsigned int']"
                         vars="['svIndex','trackindex']"
                         qual="const">
float trackWeight(unsigned int svIndex, unsigned int trackindex) const;
                </method1>

                <method1 name="trackWeight"
                         return="float"
                         args="['unsigned int','const TrackRef&amp;']"
                         vars="['svIndex','track']"
                         qual="const">
float trackWeight(unsigned int svIndex, const TrackRef&amp; track) const;
                </method1>

                <method1 name="flightDistance"
                         return="Measurement1D"
                         args="['unsigned int','bool=false']"
                         vars="['index','in2d']"
                         qual="const">
Measurement1D  flightDistance(unsigned int index, bool in2d=false) const;
                </method1>

                <method1 name="flightDirection"
                         return="const GlobalVector&amp;"
                         args="['unsigned int']"
                         vars="['index']"
                         qual="const">
const GlobalVector&amp; flightDirection(unsigned int index) const;
                </method1>

                <method1 name="taggingVariables"
                         return="virtual TaggingVariableList"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TaggingVariableList taggingVariables() const;
                </method1>

            </section>

            <typemap name="IndexedTrackData"
                     value="std::pair&lt;unsigned int, TrackData&gt;"
                     type="typedef"/>

        </class>
        <typedef name="SecondaryVertexTagInfoCollection"
                 value="std::vector&lt;SecondaryVertexTagInfo &gt;">
typedef std::vector&lt;SecondaryVertexTagInfo &gt; SecondaryVertexTagInfoCollection;
        </typedef>

        <typedef name="SecondaryVertexTagInfoRef"
                 value="edm::Ref&lt;SecondaryVertexTagInfoCollection&gt;">
typedef edm::Ref&lt;SecondaryVertexTagInfoCollection&gt; SecondaryVertexTagInfoRef;
        </typedef>

        <typedef name="SecondaryVertexTagInfoRefProd"
                 value="edm::RefProd&lt;SecondaryVertexTagInfoCollection&gt;">
typedef edm::RefProd&lt;SecondaryVertexTagInfoCollection&gt; SecondaryVertexTagInfoRefProd;
        </typedef>

        <typedef name="SecondaryVertexTagInfoRefVector"
                 value="edm::RefVector&lt;SecondaryVertexTagInfoCollection&gt;">
typedef edm::RefVector&lt;SecondaryVertexTagInfoCollection&gt; SecondaryVertexTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="BaseTagInfo"/>
    <type name="GlobalVector"/>
    <type name="Measurement1D"/>
    <type name="Measurement1D dist2d,"/>
    <type name="SecondaryVertexTagInfo*"/>
    <type name="Status"/>
    <type name="TaggingVariableList"/>
    <type name="TrackRef"/>
    <type name="TrackRefVector"/>
    <type name="Vertex"/>
    <type name="bool"/>
    <type name="const GlobalVector&amp;"/>
    <type name="const JetTracksAssociationRef&amp;"/>
    <type name="const TrackData&amp;"/>
    <type name="const TrackIPTagInfo::TrackIPData&amp;"/>
    <type name="const TrackIPTagInfoRef&amp;"/>
    <type name="const TrackRef&amp;"/>
    <type name="const Vertex&amp;"/>
    <type name="const std::vector&lt;IndexedTrackData&gt;&amp;"/>
    <type name="const std::vector&lt;VertexData&gt;&amp;"/>
    <type name="edm::RefToBase&lt;Jet&gt;"/>
    <type name="enum Status"/>
    <type name="float"/>
    <type name="reco::SecondaryVertexTagInfo"/>
    <type name="reco::SecondaryVertexTagInfo::TrackData"/>
    <type name="reco::SecondaryVertexTagInfo::VertexData"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
