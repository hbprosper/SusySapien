<?xml version="1.0"?>
<!--
==============================================================================
  XML File: IsolatedTauTagInfo.xml
  Created:  Fri Jan 15 20:45:10 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/IsolatedTauTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/BTauReco/interface/IsolatedTauTagInfo.h">

    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/JTATagInfo.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetTracksAssociation.h&quot;"/>

    <namespace name="reco">

        <class name="IsolatedTauTagInfo"
               fullname="reco::IsolatedTauTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public JTATagInfo"/>

            <section name="public">
                <constructor name="IsolatedTauTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
IsolatedTauTagInfo(void);
                    <comment>
      default constructor
                    </comment>
                </constructor>

                <constructor name="IsolatedTauTagInfo"
                             return=""
                             args="['const TrackRefVector&amp;','const JetTracksAssociationRef&amp;']"
                             vars="['tracks','jtaRef']"
                             qual="">
IsolatedTauTagInfo(const TrackRefVector&amp; tracks, const JetTracksAssociationRef&amp; jtaRef);
                </constructor>

                <destructor name="~IsolatedTauTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~IsolatedTauTagInfo();
                    <comment>
      destructor
                    </comment>
                </destructor>

                <method1 name="allTracks"
                         return="const TrackRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector allTracks() const;
                    <comment>
      get the tracks from the jetTag
                    </comment>
                </method1>

                <method1 name="selectedTracks"
                         return="const TrackRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector selectedTracks() const;
                    <comment>
      get the selected tracks used to computed the isolation
                    </comment>
                </method1>

                <method1 name="clone"
                         return="virtual IsolatedTauTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual IsolatedTauTagInfo* clone() const;
                </method1>

                <method1 name="discriminator"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float discriminator() const;
                    <comment>
       default discriminator: returns the value of the discriminator of the jet tag, i.e. the one computed with the parameters taken from the cfg file
                    </comment>
                </method1>

                <method1 name="setDiscriminator"
                         return="void"
                         args="['double']"
                         vars="['discriminator']"
                         qual="">
void setDiscriminator(double discriminator);
                    <comment>
      set discriminator value
                    </comment>
                </method1>

                <method1 name="discriminator"
                         return="float"
                         args="['float','float','float','float','float','int=0']"
                         vars="['m_cone','sig_cone','iso_con','pt_min_lt','pt_min_tk','nTracksIsoRing']"
                         qual="const">
float discriminator(float m_cone, float sig_cone, float iso_con, float pt_min_lt, float pt_min_tk, int nTracksIsoRing=0) const;
                    <comment>
       methods to be used to recomputed the isolation with a new set of parameters
                    </comment>
                </method1>

                <method1 name="discriminator"
                         return="float"
                         args="['math::XYZVector','float','float','float','float','float','int']"
                         vars="['myVector','m_cone','sig_cone','iso_con','pt_min_lt','pt_min_tk','nTracksIsoRing']"
                         qual="const">
float discriminator(math::XYZVector myVector, float m_cone, float sig_cone, float iso_con, float pt_min_lt, float pt_min_tk, int nTracksIsoRing) const;
                </method1>

                <method1 name="discriminator"
                         return="float"
                         args="['float','float','float','float','float','int','float']"
                         vars="['m_cone','sig_cone','iso_con','pt_min_lt','pt_min_tk','nTracksIsoRing','dz_lt']"
                         qual="const">
float discriminator(float m_cone, float sig_cone, float iso_con, float pt_min_lt, float pt_min_tk, int nTracksIsoRing, float dz_lt) const;
                    <comment>
       Used in case the PV is not considered
                    </comment>
                </method1>

                <method1 name="discriminator"
                         return="float"
                         args="['math::XYZVector','float','float','float','float','float','int','float']"
                         vars="['myVector','m_cone','sig_cone','iso_con','pt_min_lt','pt_min_tk','nTracksIsoRing','dz_lt']"
                         qual="const">
float discriminator(math::XYZVector myVector, float m_cone, float sig_cone, float iso_con, float pt_min_lt, float pt_min_tk, int nTracksIsoRing, float dz_lt) const;
                </method1>

                <method1 name="tracksInCone"
                         return="const TrackRefVector"
                         args="['const math::XYZVector','const float','const float']"
                         vars="['myVector','size','pt_min']"
                         qual="const">
const TrackRefVector tracksInCone(const math::XYZVector myVector, const float size, const float pt_min) const;
                    <comment>
       return all tracks in a cone of size &quot;size&quot; around a direction &quot;direction&quot;
                    </comment>
                </method1>

                <method1 name="tracksInCone"
                         return="const TrackRefVector"
                         args="['const math::XYZVector','const float','const float','const float','const float']"
                         vars="['myVector','size','pt_min','z_pv','dz_lt']"
                         qual="const">
const TrackRefVector tracksInCone(const math::XYZVector myVector, const float size, const float pt_min, const float z_pv, const float dz_lt) const;
                </method1>

                <method1 name="setLeadingTrack"
                         return="void"
                         args="['const TrackRef']"
                         vars="['']"
                         qual="">
void setLeadingTrack(const TrackRef);
                    <comment>
       return the leading track in a given cone around the jet axis or a given direction
                    </comment>
                </method1>

                <method1 name="leadingSignalTrack"
                         return="const TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRef leadingSignalTrack() const;
                </method1>

                <method1 name="leadingSignalTrack"
                         return="const TrackRef"
                         args="['const float','const float']"
                         vars="['rm_cone','pt_min']"
                         qual="const">
const TrackRef leadingSignalTrack(const float rm_cone, const float pt_min) const;
                </method1>

                <method1 name="leadingSignalTrack"
                         return="const TrackRef"
                         args="['math::XYZVector','const float','const float']"
                         vars="['myVector','rm_cone','pt_min']"
                         qual="const">
const TrackRef leadingSignalTrack(math::XYZVector myVector, const float rm_cone, const float pt_min) const;
                </method1>

            </section>

        </class>
        <typedef name="IsolatedTauTagInfoCollection"
                 value="std::vector&lt;IsolatedTauTagInfo &gt;">
typedef std::vector&lt;IsolatedTauTagInfo &gt; IsolatedTauTagInfoCollection;
        </typedef>

        <typedef name="IsolatedTauTagInfoRef"
                 value="edm::Ref&lt;IsolatedTauTagInfoCollection&gt;">
typedef edm::Ref&lt;IsolatedTauTagInfoCollection&gt; IsolatedTauTagInfoRef;
        </typedef>

        <typedef name="IsolatedTauTagInfoRefProd"
                 value="edm::RefProd&lt;IsolatedTauTagInfoCollection&gt;">
typedef edm::RefProd&lt;IsolatedTauTagInfoCollection&gt; IsolatedTauTagInfoRefProd;
        </typedef>

        <typedef name="IsolatedTauTagInfoRefVector"
                 value="edm::RefVector&lt;IsolatedTauTagInfoCollection&gt;">
typedef edm::RefVector&lt;IsolatedTauTagInfoCollection&gt; IsolatedTauTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="IsolatedTauTagInfo*"/>
    <type name="JTATagInfo"/>
    <type name="const JetTracksAssociationRef&amp;"/>
    <type name="const TrackRef"/>
    <type name="const TrackRefVector"/>
    <type name="const TrackRefVector&amp;"/>
    <type name="const float"/>
    <type name="const math::XYZVector"/>
    <type name="double"/>
    <type name="float"/>
    <type name="int"/>
    <type name="math::XYZVector"/>
    <type name="reco::IsolatedTauTagInfo"/>
    <type name="void"/>
</header>
