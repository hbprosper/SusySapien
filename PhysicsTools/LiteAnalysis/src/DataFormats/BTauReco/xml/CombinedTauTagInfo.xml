<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CombinedTauTagInfo.xml
  Created:  Fri Jan 15 20:45:09 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/CombinedTauTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/BTauReco/interface/CombinedTauTagInfo.h">

    <include name="&lt;limits&gt;"/>
    <include name="&lt;math.h&gt;"/>
    <include name="&quot;CLHEP/Vector/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/Jet.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/Track.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetTracksAssociation.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/JTATagInfo.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/IsolatedTauTagInfo.h&quot;"/>

    <namespace name="reco">

        <class name="CombinedTauTagInfo"
               fullname="reco::CombinedTauTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public JTATagInfo"/>

            <section name="public">
                <constructor name="CombinedTauTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CombinedTauTagInfo();
                </constructor>

                <constructor name="CombinedTauTagInfo"
                             return=""
                             args="['const JetTracksAssociationRef&amp;']"
                             vars="['jtaRef']"
                             qual="">
CombinedTauTagInfo(const JetTracksAssociationRef&amp; jtaRef);
                </constructor>

                <destructor name="~CombinedTauTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CombinedTauTagInfo();
                </destructor>

                <method1 name="isolatedtautaginfoRef"
                         return="const IsolatedTauTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsolatedTauTagInfoRef&amp; isolatedtautaginfoRef() const;
                    <comment>
      the reference to the IsolatedTauTagInfo
                    </comment>
                </method1>

                <method1 name="setisolatedtautaginfoRef"
                         return="void"
                         args="['const IsolatedTauTagInfoRef&amp;']"
                         vars="['x']"
                         qual="">
void setisolatedtautaginfoRef(const IsolatedTauTagInfoRef&amp; x);
                </method1>

                <method1 name="allTks"
                         return="const TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector&amp; allTks() const;
                    <comment>
      get the tracks from the JetTag
                    </comment>
                </method1>

                <method1 name="selectedTks"
                         return="const TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector&amp; selectedTks() const;
                    <comment>
      the tracks considered in the isolation strip and signal cone selections
                    </comment>
                </method1>

                <method1 name="setselectedTks"
                         return="void"
                         args="['const TrackRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setselectedTks(const TrackRefVector&amp; x);
                </method1>

                <method1 name="signalTks"
                         return="const TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector&amp; signalTks() const;
                    <comment>
      the tracks in the signal cone
                    </comment>
                </method1>

                <method1 name="setsignalTks"
                         return="void"
                         args="['const TrackRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setsignalTks(const TrackRefVector&amp; x);
                </method1>

                <method1 name="signalTks_qsum"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int signalTks_qsum() const;
                </method1>

                <method1 name="isolTks"
                         return="const TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackRefVector&amp; isolTks() const;
                    <comment>
      the tracks in the isolation band
                    </comment>
                </method1>

                <method1 name="setisolTks"
                         return="void"
                         args="['const TrackRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setisolTks(const TrackRefVector&amp; x);
                </method1>

                <method1 name="clone"
                         return="virtual CombinedTauTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CombinedTauTagInfo* clone() const;
                </method1>

                <method1 name="passed_trackerselection"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool passed_trackerselection() const;
                </method1>

                <method1 name="setpassed_trackerselection"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setpassed_trackerselection(bool x);
                </method1>

                <method1 name="is_GoodTauCandidate"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool is_GoodTauCandidate() const;
                </method1>

                <method1 name="setis_GoodTauCandidate"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setis_GoodTauCandidate(bool x);
                </method1>

                <method1 name="infact_GoodElectronCandidate"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool infact_GoodElectronCandidate() const;
                </method1>

                <method1 name="setinfact_GoodElectronCandidate"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setinfact_GoodElectronCandidate(bool x);
                </method1>

                <method1 name="infact_GoodMuonCandidate"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool infact_GoodMuonCandidate() const;
                </method1>

                <method1 name="setinfact_GoodMuonCandidate"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setinfact_GoodMuonCandidate(bool x);
                </method1>

                <method1 name="needs_LikelihoodRatio_discrimination"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool needs_LikelihoodRatio_discrimination() const;
                </method1>

                <method1 name="setneeds_LikelihoodRatio_discrimination"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setneeds_LikelihoodRatio_discrimination(bool x);
                </method1>

                <method1 name="leadTk_signedipt_significance"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double leadTk_signedipt_significance() const;
                </method1>

                <method1 name="setleadTk_signedipt_significance"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setleadTk_signedipt_significance(double x);
                </method1>

                <method1 name="leadTk_signedip3D_significance"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double leadTk_signedip3D_significance() const;
                </method1>

                <method1 name="setleadTk_signedip3D_significance"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setleadTk_signedip3D_significance(double x);
                </method1>

                <method1 name="signedflightpath_significance"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double signedflightpath_significance() const;
                </method1>

                <method1 name="setsignedflightpath_significance"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setsignedflightpath_significance(double x);
                </method1>

                <method1 name="TksEt_o_JetEt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double TksEt_o_JetEt() const;
                    <comment>
      Ettks/Etjet;
                    </comment>
                </method1>

                <method1 name="setTksEt_o_JetEt"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setTksEt_o_JetEt(double x);
                </method1>

                <method1 name="neutralE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double neutralE() const;
                    <comment>
      Eneutr.clus.;
                    </comment>
                </method1>

                <method1 name="setneutralE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setneutralE(double x);
                </method1>

                <method1 name="isolneutralE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double isolneutralE() const;
                    <comment>
      Eneutr.clus.,isol.band;
                    </comment>
                </method1>

                <method1 name="setisolneutralE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setisolneutralE(double x);
                </method1>

                <method1 name="isolneutralEtsum"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double isolneutralEtsum() const;
                    <comment>
      sum of Etneutr.clus.,isol.band;
                    </comment>
                </method1>

                <method1 name="setisolneutralEtsum"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setisolneutralEtsum(double x);
                </method1>

                <method1 name="neutralECALClus_number"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int neutralECALClus_number() const;
                </method1>

                <method1 name="setneutralECALClus_number"
                         return="void"
                         args="['int']"
                         vars="['x']"
                         qual="">
void setneutralECALClus_number(int x);
                </method1>

                <method1 name="neutralECALClus_radius"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double neutralECALClus_radius() const;
                    <comment>
     mean DRneutr.clus.-lead.tk
                    </comment>
                </method1>

                <method1 name="setneutralECALClus_radius"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setneutralECALClus_radius(double x);
                </method1>

                <method1 name="neutralE_o_TksEneutralE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double neutralE_o_TksEneutralE() const;
                    <comment>
      Eneutr.clus. / (Eneutr.clus. + Etks) , Etks built with tks impulsion and charged pi mass hypothesis;
                    </comment>
                </method1>

                <method1 name="setneutralE_o_TksEneutralE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setneutralE_o_TksEneutralE(double x);
                </method1>

                <method1 name="isolneutralE_o_TksEneutralE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double isolneutralE_o_TksEneutralE() const;
                    <comment>
      Eneutr.clus.,isol.band / (Eneutr.clus. + Etks);
                    </comment>
                </method1>

                <method1 name="setisolneutralE_o_TksEneutralE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setisolneutralE_o_TksEneutralE(double x);
                </method1>

                <method1 name="neutralE_ratio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double neutralE_ratio() const;
                    <comment>
      Eneutr.clus.,isol.band / Eneutr.clus.;
                    </comment>
                </method1>

                <method1 name="setneutralE_ratio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setneutralE_ratio(double x);
                </method1>

                <method1 name="alternatrecJet_HepLV"
                         return="CLHEP::HepLorentzVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
CLHEP::HepLorentzVector alternatrecJet_HepLV() const;
                </method1>

                <method1 name="setalternatrecJet_HepLV"
                         return="void"
                         args="['CLHEP::HepLorentzVector']"
                         vars="['x']"
                         qual="">
void setalternatrecJet_HepLV(CLHEP::HepLorentzVector x);
                </method1>

                <method1 name="ECALEt_o_leadTkPt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ECALEt_o_leadTkPt() const;
                    <comment>
      EtECALPtlead.tk        *using ECAL cell hits inside a DR cone around lead tk ECAL impact point direction;
                    </comment>
                </method1>

                <method1 name="setECALEt_o_leadTkPt"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setECALEt_o_leadTkPt(double x);
                </method1>

                <method1 name="HCALEt_o_leadTkPt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double HCALEt_o_leadTkPt() const;
                    <comment>
      EtHCAL*Ptlead.tk;      **using HCAL tower hits inside a DR cone around lead tk ECAL impact point direction;
                    </comment>
                </method1>

                <method1 name="setHCALEt_o_leadTkPt"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setHCALEt_o_leadTkPt(double x);
                </method1>

            </section>

        </class>
        <typedef name="CombinedTauTagInfoCollection"
                 value="std::vector&lt;CombinedTauTagInfo &gt;">
typedef std::vector&lt;CombinedTauTagInfo &gt; CombinedTauTagInfoCollection;
        </typedef>

        <typedef name="CombinedTauTagInfoRef"
                 value="edm::Ref&lt;CombinedTauTagInfoCollection&gt;">
typedef edm::Ref&lt;CombinedTauTagInfoCollection&gt; CombinedTauTagInfoRef;
        </typedef>

        <typedef name="CombinedTauTagInfoRefProd"
                 value="edm::RefProd&lt;CombinedTauTagInfoCollection&gt;">
typedef edm::RefProd&lt;CombinedTauTagInfoCollection&gt; CombinedTauTagInfoRefProd;
        </typedef>

        <typedef name="CombinedTauTagInfoRefVector"
                 value="edm::RefVector&lt;CombinedTauTagInfoCollection&gt;">
typedef edm::RefVector&lt;CombinedTauTagInfoCollection&gt; CombinedTauTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="CLHEP::HepLorentzVector"/>
    <type name="CombinedTauTagInfo*"/>
    <type name="JTATagInfo"/>
    <type name="bool"/>
    <type name="const IsolatedTauTagInfoRef&amp;"/>
    <type name="const JetTracksAssociationRef&amp;"/>
    <type name="const TrackRefVector&amp;"/>
    <type name="double"/>
    <type name="int"/>
    <type name="reco::CombinedTauTagInfo"/>
    <type name="void"/>
</header>
