<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TaggingVariable.xml
  Created:  Thu Jan 14 22:45:42 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/TaggingVariable.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/BTauReco/interface/TaggingVariable.h">

    <include name="&lt;utility&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;boost/static_assert.hpp&gt;"/>
    <include name="&lt;boost/pointee.hpp&gt;"/>
    <include name="&lt;boost/type_traits/is_convertible.hpp&gt;"/>
    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>

    <namespace name="reco">

        <namespace name="btau">
            <enum name="TaggingVariableName">
enum TaggingVariableName {

      jetEnergy=0, 
      jetPt, 
      jetEta, 
      jetPhi, 
      jetNTracks, 

      trackMomentum, 
      trackEta, 
      trackPhi, 

      trackPtRel, 
      trackPPar, 
      trackEtaRel, 
      trackDeltaR, 
      trackPtRatio, 
      trackPParRatio, 

      trackIp2dSig, 
      trackSip2dVal, 
      trackSip2dSig, 
      trackSip3dVal, 
      trackSip3dSig, 
      trackDecayLenVal, 
      trackDecayLenSig, 
      trackJetDist, 
      trackFirstTrackDist, 

      trackSumJetEtRatio, 
      trackSumJetDeltaR, 

      vertexCategory, 

      jetNSecondaryVertices, 

      vertexMass, 
      vertexNTracks, 

      vertexEnergyRatio, 
      vertexJetDeltaR, 

      flightDistance2dVal, 
      flightDistance2dSig, 
      flightDistance3dVal, 
      flightDistance3dSig, 

      trackSip2dValAboveCharm, 
      trackSip2dSigAboveCharm, 
      trackSip3dValAboveCharm, 
      trackSip3dSigAboveCharm, 

      neutralEnergy, 
      neutralEnergyOverCombinedEnergy, 
      neutralIsolEnergy, 
      neutralIsolEnergyOverCombinedEnergy, 
      neutralEnergyRatio, 
      neutralclusterNumber, 
      neutralclusterRadius, 

      leptonQuality, 
      trackP0Par, 
      trackP0ParRatio, 
      trackChi2, 
      trackNTotalHits, 
      trackNPixelHits, 

      algoDiscriminator, 

      lastTaggingVariable
    };
                <field name="jetEnergy" value="0"/>
                <field name="jetPt" value=""/>
                <field name="jetEta" value=""/>
                <field name="jetPhi" value=""/>
                <field name="jetNTracks" value=""/>
                <field name="trackMomentum" value=""/>
                <field name="trackEta" value=""/>
                <field name="trackPhi" value=""/>
                <field name="trackPtRel" value=""/>
                <field name="trackPPar" value=""/>
                <field name="trackEtaRel" value=""/>
                <field name="trackDeltaR" value=""/>
                <field name="trackPtRatio" value=""/>
                <field name="trackPParRatio" value=""/>
                <field name="trackIp2dSig" value=""/>
                <field name="trackSip2dVal" value=""/>
                <field name="trackSip2dSig" value=""/>
                <field name="trackSip3dVal" value=""/>
                <field name="trackSip3dSig" value=""/>
                <field name="trackDecayLenVal" value=""/>
                <field name="trackDecayLenSig" value=""/>
                <field name="trackJetDist" value=""/>
                <field name="trackFirstTrackDist" value=""/>
                <field name="trackSumJetEtRatio" value=""/>
                <field name="trackSumJetDeltaR" value=""/>
                <field name="vertexCategory" value=""/>
                <field name="jetNSecondaryVertices" value=""/>
                <field name="vertexMass" value=""/>
                <field name="vertexNTracks" value=""/>
                <field name="vertexEnergyRatio" value=""/>
                <field name="vertexJetDeltaR" value=""/>
                <field name="flightDistance2dVal" value=""/>
                <field name="flightDistance2dSig" value=""/>
                <field name="flightDistance3dVal" value=""/>
                <field name="flightDistance3dSig" value=""/>
                <field name="trackSip2dValAboveCharm" value=""/>
                <field name="trackSip2dSigAboveCharm" value=""/>
                <field name="trackSip3dValAboveCharm" value=""/>
                <field name="trackSip3dSigAboveCharm" value=""/>
                <field name="neutralEnergy" value=""/>
                <field name="neutralEnergyOverCombinedEnergy" value=""/>
                <field name="neutralIsolEnergy" value=""/>
                <field name="neutralIsolEnergyOverCombinedEnergy" value=""/>
                <field name="neutralEnergyRatio" value=""/>
                <field name="neutralclusterNumber" value=""/>
                <field name="neutralclusterRadius" value=""/>
                <field name="leptonQuality" value=""/>
                <field name="trackP0Par" value=""/>
                <field name="trackP0ParRatio" value=""/>
                <field name="trackChi2" value=""/>
                <field name="trackNTotalHits" value=""/>
                <field name="trackNPixelHits" value=""/>
                <field name="algoDiscriminator" value=""/>
                <field name="lastTaggingVariable" value=""/>
                <comment>
       define the enum in a namespace to avoid polluting reco with all the enum values
                </comment>
            </enum>

        </namespace>
        <function1 name="getTaggingVariableName"
                   return="TaggingVariableName"
                   args="['const std::string&amp;']"
                   vars="['name']"
                   qual="">
TaggingVariableName getTaggingVariableName (const std::string&amp; name);
        </function1>

        <typedef name="TaggingValue"
                 value="float">
typedef float TaggingValue;
        </typedef>

        <typedef name="TaggingVariable"
                 value="std::pair&lt;TaggingVariableName, TaggingValue &gt;">
typedef std::pair&lt;TaggingVariableName, TaggingValue &gt; TaggingVariable;
            <comment>
     cannot use a const member since the STL containers relie on the default assignment operator
     typedef std::pair&lt; const TaggingVariableName, TaggingValue &gt; TaggingVariable;
            </comment>
        </typedef>


        <class name="TaggingVariableCompare"
               fullname="reco::TaggingVariableCompare"
               module="DataFormats.BTauReco"
               project=""
               type="regular struct">

            <section>
                <operator name="operator()"
                          return="bool"
                          args="['const TaggingVariable&amp;','const TaggingVariable&amp;']"
                          vars="['i','j']"
                          qual="">
bool operatorPP (const TaggingVariable&amp; i, const TaggingVariable&amp; j);
                </operator>

                <operator name="operator()"
                          return="bool"
                          args="['const TaggingVariable&amp;','TaggingVariableName']"
                          vars="['i','tag']"
                          qual="">
bool operatorPP (const TaggingVariable&amp; i, TaggingVariableName tag);
                </operator>

                <operator name="operator()"
                          return="bool"
                          args="['TaggingVariableName','const TaggingVariable&amp;']"
                          vars="['tag','i']"
                          qual="">
bool operatorPP (TaggingVariableName tag, const TaggingVariable&amp; i);
                </operator>

            </section>

        </class>

        <class name="TaggingVariableList"
               fullname="reco::TaggingVariableList"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <comment>
     implementation via std::vector where
      - m_list is kept sorted via stable_sort after each insertion
      - extraction is done via binary search
            </comment>

            <section name="public">
                <constructor name="TaggingVariableList"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TaggingVariableList();
                </constructor>

                <copyconstructor name="TaggingVariableList"
                                 return=""
                                 args="['const TaggingVariableList&amp;']"
                                 vars="['list']"
                                 qual="">
TaggingVariableList(const TaggingVariableList&amp; list);
                </copyconstructor>

                <method2 name="TaggingVariableList"
                         return="template&lt;typename InputIterator&gt;"
                         args="['const InputIterator','const InputIterator']"
                         vars="['begin','end']"
                         qual="">
template&lt;typename InputIterator&gt;     TaggingVariableList(const InputIterator begin, const InputIterator end);
                    <comment>
       [begin, end) must identify a valid range of iterators to TaggingVariableList
                    </comment>
                </method2>

                <typedef name="const_iterator"
                         value="std::vector&lt;TaggingVariable &gt;::const_iterator">
typedef std::vector&lt;TaggingVariable &gt;::const_iterator const_iterator;
                    <comment>
        STL-like accessors
                    </comment>
                </typedef>

                <typedef name="range"
                         value="std::pair&lt;const_iterator, const_iterator &gt;">
typedef std::pair&lt;const_iterator, const_iterator &gt; range;
                </typedef>

                <method1 name="size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t size() const;
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="push_back"
                         return="void"
                         args="['const TaggingVariable&amp;']"
                         vars="['t']"
                         qual="">
void push_back (const TaggingVariable&amp; t);
                </method1>

                <destructor name="~TaggingVariableList"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~TaggingVariableList();
                </destructor>

            </section>
            <section name="public">
                <method1 name="checkTag"
                         return="bool"
                         args="['TaggingVariableName']"
                         vars="['tag']"
                         qual="const">
bool checkTag(TaggingVariableName tag) const;
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['const TaggingVariable&amp;','bool=false']"
                         vars="['variable','delayed']"
                         qual="">
void insert(const TaggingVariable&amp; variable, bool delayed=false);
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['const TaggingVariableList&amp;']"
                         vars="['list']"
                         qual="">
void insert(const TaggingVariableList&amp; list);
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['TaggingVariableName','TaggingValue','bool=false']"
                         vars="['tag','value','delayed']"
                         qual="">
void insert(TaggingVariableName tag, TaggingValue value, bool delayed=false);
                </method1>

                <method2 name="insert"
                         return="void"
                         args="['TaggingVariableName','const std::vector&lt;TaggingValue&gt;&amp;','bool=false']"
                         vars="['tag','values','delayed']"
                         qual="">
void insert(TaggingVariableName tag, const std::vector&lt;TaggingValue&gt;&amp; values, bool delayed=false);
                </method2>

                <method1 name="finalize"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void finalize(void);
                </method1>

                <method1 name="get"
                         return="TaggingValue"
                         args="['TaggingVariableName']"
                         vars="['tag']"
                         qual="const">
TaggingValue get(TaggingVariableName tag) const;
                </method1>

                <method1 name="get"
                         return="TaggingValue"
                         args="['TaggingVariableName','TaggingValue']"
                         vars="['tag','defaultValue']"
                         qual="const">
TaggingValue get(TaggingVariableName tag, TaggingValue defaultValue) const;
                </method1>

                <method2 name="getList"
                         return="std::vector&lt;TaggingValue&gt;"
                         args="['TaggingVariableName','bool=true']"
                         vars="['tag','throwOnEmptyList']"
                         qual="const">
std::vector&lt;TaggingValue&gt; getList(TaggingVariableName tag, bool throwOnEmptyList=true) const;
                </method2>

                <method1 name="getRange"
                         return="range"
                         args="['TaggingVariableName']"
                         vars="['tag']"
                         qual="const">
range getRange(TaggingVariableName tag) const;
                </method1>

                <operator name="operator[]"
                          return="TaggingValue"
                          args="['TaggingVariableName']"
                          vars="['tag']"
                          qual="const">
TaggingValue operator[](TaggingVariableName tag) const;
                </operator>

            </section>

            <typemap name="const_iterator"
                     value="std::vector&lt;TaggingVariable &gt;::const_iterator"
                     type="typedef"/>
            <typemap name="range"
                     value="std::pair&lt;std::vector&lt;TaggingVariable &gt;::const_iterator, std::vector&lt;TaggingVariable &gt;::const_iterator &gt;"
                     type="typedef"/>

        </class>
        <typedef name="TaggingVariableListCollection"
                 value="std::vector&lt;TaggingVariableList &gt;">
typedef std::vector&lt;TaggingVariableList &gt; TaggingVariableListCollection;
        </typedef>

        <typedef name="TaggingVariableListRef"
                 value="edm::Ref&lt;TaggingVariableListCollection&gt;">
typedef edm::Ref&lt;TaggingVariableListCollection&gt; TaggingVariableListRef;
        </typedef>

        <typedef name="TaggingVariableListRefProd"
                 value="edm::RefProd&lt;TaggingVariableListCollection&gt;">
typedef edm::RefProd&lt;TaggingVariableListCollection&gt; TaggingVariableListRefProd;
        </typedef>

        <typedef name="TaggingVariableListRefVector"
                 value="edm::RefVector&lt;TaggingVariableListCollection&gt;">
typedef edm::RefVector&lt;TaggingVariableListCollection&gt; TaggingVariableListRefVector;
        </typedef>

    </namespace>

    <type name="TaggingValue"/>
    <type name="TaggingVariableName"/>
    <type name="bool"/>
    <type name="const TaggingVariable&amp;"/>
    <type name="const TaggingVariableList&amp;"/>
    <type name="const std::vector&lt;TaggingValue&gt;&amp;"/>
    <type name="const_iterator"/>
    <type name="range"/>
    <type name="reco::TaggingVariableCompare"/>
    <type name="reco::TaggingVariableList"/>
    <type name="size_t"/>
    <type name="std::vector&lt;TaggingValue&gt;"/>
    <type name="template&lt;typename InputIterator&gt;"/>
    <type name="void"/>
</header>
