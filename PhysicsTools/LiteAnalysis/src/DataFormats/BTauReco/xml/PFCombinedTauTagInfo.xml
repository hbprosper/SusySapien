<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFCombinedTauTagInfo.xml
  Created:  Thu Jan 14 22:45:40 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BTauReco/interface/PFCombinedTauTagInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/BTauReco/interface/PFCombinedTauTagInfo.h">

    <include name="&lt;limits&gt;"/>
    <include name="&lt;math.h&gt;"/>
    <include name="&quot;DataFormats/BTauReco/interface/RefMacros.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/PFJetCollection.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/BaseTagInfo.h&quot;"/>
    <include name="&quot;DataFormats/BTauReco/interface/PFIsolatedTauTagInfo.h&quot;"/>

    <namespace name="reco">

        <class name="PFCombinedTauTagInfo"
               fullname="reco::PFCombinedTauTagInfo"
               module="DataFormats.BTauReco"
               project=""
               type="regular">
            <baseclass name="public BaseTagInfo"/>

            <section name="public">
                <constructor name="PFCombinedTauTagInfo"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PFCombinedTauTagInfo();
                </constructor>

                <destructor name="~PFCombinedTauTagInfo"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~PFCombinedTauTagInfo();
                </destructor>

                <method1 name="pfjetRef"
                         return="const PFJetRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFJetRef&amp; pfjetRef() const;
                    <comment>
      the reference to the PFJet;
                    </comment>
                </method1>

                <method1 name="setpfjetRef"
                         return="void"
                         args="['const PFJetRef']"
                         vars="['x']"
                         qual="">
void setpfjetRef(const PFJetRef x);
                </method1>

                <method1 name="isolatedtautaginfoRef"
                         return="const PFIsolatedTauTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFIsolatedTauTagInfoRef&amp; isolatedtautaginfoRef() const;
                    <comment>
      the reference to the PFIsolatedTauTagInfo;
                    </comment>
                </method1>

                <method1 name="setisolatedtautaginfoRef"
                         return="void"
                         args="['const PFIsolatedTauTagInfoRef']"
                         vars="['x']"
                         qual="">
void setisolatedtautaginfoRef(const PFIsolatedTauTagInfoRef x);
                </method1>

                <method1 name="PFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; PFChargedHadrCands() const;
                    <comment>
      the PF charged hadron candidates contained in the PF Jet;
                    </comment>
                </method1>

                <method1 name="setPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setPFChargedHadrCands(const PFCandidateRefVector&amp; x);
                </method1>

                <method1 name="selectedPFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; selectedPFChargedHadrCands() const;
                    <comment>
      the PF charged hadron candidates considered in the isolation strip and signal cone selections;
                    </comment>
                </method1>

                <method1 name="setselectedPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setselectedPFChargedHadrCands(const PFCandidateRefVector&amp; x);
                </method1>

                <method1 name="signalPFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; signalPFChargedHadrCands() const;
                    <comment>
      the PF charged hadron candidates inside signal cone;
                    </comment>
                </method1>

                <method1 name="setsignalPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setsignalPFChargedHadrCands(const PFCandidateRefVector&amp; x);
                </method1>

                <method1 name="isolPFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; isolPFChargedHadrCands() const;
                    <comment>
      the PF charged hadron candidates inside isolation band;
                    </comment>
                </method1>

                <method1 name="setisolPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['x']"
                         qual="">
void setisolPFChargedHadrCands(const PFCandidateRefVector&amp; x);
                </method1>

                <method1 name="clone"
                         return="virtual PFCombinedTauTagInfo*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual PFCombinedTauTagInfo* clone() const;
                </method1>

                <method1 name="selectedByPFChargedHadrCands"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool selectedByPFChargedHadrCands() const;
                    <comment>
       float JetTag::discriminator() returns 0.        if candidate did not pass PF charged hadron candidates selection,
                                             1.        if candidate passed PF charged hadron candidates selection and did not contain PF gamma candidate(s),
                                             0&lt;=  &lt;=1  if candidate passed PF charged hadron candidates selection, contained PF gamma candidate(s) and went through the likelihood ratio mechanism,
                                             NaN       the values of the likelihood functions PDFs are 0 (test the result of discriminator() with bool isnan(.));
      computed with the parameters taken from the RecoTauTag/PFCombinedTauTag/data/ .cfi files
                    </comment>
                </method1>

                <method1 name="setselectedByPFChargedHadrCands"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setselectedByPFChargedHadrCands(bool x);
                </method1>

                <method1 name="electronTagged"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool electronTagged() const;
                </method1>

                <method1 name="setelectronTagged"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setelectronTagged(bool x);
                </method1>

                <method1 name="muonTagged"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool muonTagged() const;
                </method1>

                <method1 name="setmuonTagged"
                         return="void"
                         args="['bool']"
                         vars="['x']"
                         qual="">
void setmuonTagged(bool x);
                </method1>

                <method1 name="leadPFChargedHadrCandsignedSipt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double leadPFChargedHadrCandsignedSipt() const;
                </method1>

                <method1 name="setleadPFChargedHadrCandsignedSipt"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setleadPFChargedHadrCandsignedSipt(double x);
                </method1>

                <method1 name="leadPFChargedHadrCandsignedSip3D"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double leadPFChargedHadrCandsignedSip3D() const;
                </method1>

                <method1 name="setleadPFChargedHadrCandsignedSip3D"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setleadPFChargedHadrCandsignedSip3D(double x);
                </method1>

                <method1 name="signedSflightpath"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double signedSflightpath() const;
                </method1>

                <method1 name="setsignedSflightpath"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setsignedSflightpath(double x);
                </method1>

                <method1 name="PFChargedHadrCandsEtJetEtRatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFChargedHadrCandsEtJetEtRatio() const;
                    <comment>
      Et_PFchargedhadrcands/Etjet;
                    </comment>
                </method1>

                <method1 name="setPFChargedHadrCandsEtJetEtRatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFChargedHadrCandsEtJetEtRatio(double x);
                </method1>

                <method1 name="PFNeutrHadrCandsE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFNeutrHadrCandsE() const;
                    <comment>
      PF neutral hadron candidates E sum;
                    </comment>
                </method1>

                <method1 name="setPFNeutrHadrCandsE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFNeutrHadrCandsE(double x);
                </method1>

                <method1 name="PFNeutrHadrCandsN"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int PFNeutrHadrCandsN() const;
                </method1>

                <method1 name="setPFNeutrHadrCandsN"
                         return="void"
                         args="['int']"
                         vars="['x']"
                         qual="">
void setPFNeutrHadrCandsN(int x);
                </method1>

                <method1 name="PFNeutrHadrCandsRadius"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFNeutrHadrCandsRadius() const;
                    <comment>
     mean DR_PFNeutrHadrcands-lead.PFcand.;
                    </comment>
                </method1>

                <method1 name="setPFNeutrHadrCandsRadius"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFNeutrHadrCandsRadius(double x);
                </method1>

                <method1 name="PFGammaCandsE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFGammaCandsE() const;
                    <comment>
      PF gamma candidates E sum;
                    </comment>
                </method1>

                <method1 name="setPFGammaCandsE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFGammaCandsE(double x);
                </method1>

                <method1 name="isolPFGammaCandsE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double isolPFGammaCandsE() const;
                    <comment>
      isol. band PF gamma candidates E sum;
                    </comment>
                </method1>

                <method1 name="setisolPFGammaCandsE"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setisolPFGammaCandsE(double x);
                </method1>

                <method1 name="PFGammaCandsN"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int PFGammaCandsN() const;
                </method1>

                <method1 name="setPFGammaCandsN"
                         return="void"
                         args="['int']"
                         vars="['x']"
                         qual="">
void setPFGammaCandsN(int x);
                </method1>

                <method1 name="PFGammaCandsRadius"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFGammaCandsRadius() const;
                    <comment>
     mean DR_PFgammacands-lead.PFcand.;
                    </comment>
                </method1>

                <method1 name="setPFGammaCandsRadius"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFGammaCandsRadius(double x);
                </method1>

                <method1 name="PFGammaCandsEJetalternatERatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFGammaCandsEJetalternatERatio() const;
                    <comment>
      E_PFgammacands / (E_PFgammacands + E_PFchargedhadrcands);
                    </comment>
                </method1>

                <method1 name="setPFGammaCandsEJetalternatERatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFGammaCandsEJetalternatERatio(double x);
                </method1>

                <method1 name="isolPFGammaCandsEJetalternatERatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double isolPFGammaCandsEJetalternatERatio() const;
                    <comment>
      E_PFgammacands,isol.band / (E_PFgammacands + E_PFchargedhadrcands);
                    </comment>
                </method1>

                <method1 name="setisolPFGammaCandsEJetalternatERatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setisolPFGammaCandsEJetalternatERatio(double x);
                </method1>

                <method1 name="PFGammaCandsERatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double PFGammaCandsERatio() const;
                    <comment>
      E_PFgammacands,isol.band / E_PFgammacands;
                    </comment>
                </method1>

                <method1 name="setPFGammaCandsERatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setPFGammaCandsERatio(double x);
                </method1>

                <method1 name="alternatLorentzVect"
                         return="math::XYZTLorentzVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZTLorentzVector alternatLorentzVect() const;
                </method1>

                <method1 name="setalternatLorentzVect"
                         return="void"
                         args="['math::XYZTLorentzVector']"
                         vars="['x']"
                         qual="">
void setalternatLorentzVect(math::XYZTLorentzVector x);
                </method1>

                <method1 name="ECALEtleadPFChargedHadrCandPtRatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ECALEtleadPFChargedHadrCandPtRatio() const;
                    <comment>
      EtECALPt_lead.PFcand.        *using ECAL cell hits inside a DR cone around lead. charged hadr. candidate ECAL impact point direction;
                    </comment>
                </method1>

                <method1 name="setECALEtleadPFChargedHadrCandPtRatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setECALEtleadPFChargedHadrCandPtRatio(double x);
                </method1>

                <method1 name="HCALEtleadPFChargedHadrCandPtRatio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double HCALEtleadPFChargedHadrCandPtRatio() const;
                    <comment>
      EtHCAL*Pt_lead.PFcand.;      **using HCAL tower hits inside a DR cone around lead. charged hadr. candidate ECAL impact point direction;
                    </comment>
                </method1>

                <method1 name="setHCALEtleadPFChargedHadrCandPtRatio"
                         return="void"
                         args="['double']"
                         vars="['x']"
                         qual="">
void setHCALEtleadPFChargedHadrCandPtRatio(double x);
                </method1>

            </section>

        </class>
        <typedef name="PFCombinedTauTagInfoCollection"
                 value="std::vector&lt;PFCombinedTauTagInfo &gt;">
typedef std::vector&lt;PFCombinedTauTagInfo &gt; PFCombinedTauTagInfoCollection;
        </typedef>

        <typedef name="PFCombinedTauTagInfoRef"
                 value="edm::Ref&lt;PFCombinedTauTagInfoCollection&gt;">
typedef edm::Ref&lt;PFCombinedTauTagInfoCollection&gt; PFCombinedTauTagInfoRef;
        </typedef>

        <typedef name="PFCombinedTauTagInfoRefProd"
                 value="edm::RefProd&lt;PFCombinedTauTagInfoCollection&gt;">
typedef edm::RefProd&lt;PFCombinedTauTagInfoCollection&gt; PFCombinedTauTagInfoRefProd;
        </typedef>

        <typedef name="PFCombinedTauTagInfoRefVector"
                 value="edm::RefVector&lt;PFCombinedTauTagInfoCollection&gt;">
typedef edm::RefVector&lt;PFCombinedTauTagInfoCollection&gt; PFCombinedTauTagInfoRefVector;
        </typedef>

    </namespace>

    <type name="BaseTagInfo"/>
    <type name="PFCombinedTauTagInfo*"/>
    <type name="bool"/>
    <type name="const PFCandidateRefVector&amp;"/>
    <type name="const PFIsolatedTauTagInfoRef"/>
    <type name="const PFIsolatedTauTagInfoRef&amp;"/>
    <type name="const PFJetRef"/>
    <type name="const PFJetRef&amp;"/>
    <type name="double"/>
    <type name="int"/>
    <type name="math::XYZTLorentzVector"/>
    <type name="reco::PFCombinedTauTagInfo"/>
    <type name="void"/>
</header>
