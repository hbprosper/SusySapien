<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HLTGlobalStatus.xml
  Created:  Thu Jan 14 22:46:03 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/HLTGlobalStatus.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/HLTGlobalStatus.h">

    <include name="&quot;DataFormats/Common/interface/HLTenums.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/HLTPathStatus.h&quot;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;ostream&gt;"/>

    <namespace name="edm">

        <class name="HLTGlobalStatus"
               fullname="edm::HLTGlobalStatus"
               module="DataFormats.Common"
               project=""
               type="regular">

            <section name="public">
                <constructor name="HLTGlobalStatus"
                             return=""
                             args="['const unsigned int=0']"
                             vars="['n']"
                             qual="">
HLTGlobalStatus(const unsigned int n=0);
                    <comment>
        Constructor - for n paths
                    </comment>
                </constructor>

                <method1 name="size"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int size() const;
                    <comment>
        Get number of paths stored
                    </comment>
                </method1>

                <method1 name="reset"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void reset();
                    <comment>
        Reset status for all paths
                    </comment>
                </method1>

                <method1 name="wasrun"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool wasrun() const;
                    <comment>
        Was at least one path run?
                    </comment>
                </method1>

                <method1 name="accept"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool accept() const;
                    <comment>
        Has at least one path accepted the event?
                    </comment>
                </method1>

                <method1 name="error"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool error() const;
                    <comment>
        Has any path encountered an error (exception)
                    </comment>
                </method1>

                <method1 name="at"
                         return="const HLTPathStatus&amp;"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
const HLTPathStatus&amp; at (const unsigned int i) const;
                    <comment>
       get hold of individual elements, using safe indexing with &quot;at&quot; which throws!
                    </comment>
                </method1>

                <method1 name="at"
                         return="HLTPathStatus&amp;"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="">
HLTPathStatus&amp; at (const unsigned int i);
                </method1>

                <operator name="operator[]"
                          return="const HLTPathStatus&amp;"
                          args="['const unsigned int']"
                          vars="['i']"
                          qual="const">
const HLTPathStatus&amp; operator[](const unsigned int i) const;
                </operator>

                <operator name="operator[]"
                          return="HLTPathStatus&amp;"
                          args="['const unsigned int']"
                          vars="['i']"
                          qual="">
HLTPathStatus&amp; operator[](const unsigned int i);
                </operator>

                <method1 name="wasrun"
                         return="bool"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
bool wasrun(const unsigned int i) const;
                    <comment>
        Was ith path run?
                    </comment>
                </method1>

                <method1 name="accept"
                         return="bool"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
bool accept(const unsigned int i) const;
                    <comment>
        Has ith path accepted the event?
                    </comment>
                </method1>

                <method1 name="error"
                         return="bool"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
bool error(const unsigned int i) const;
                    <comment>
        Has ith path encountered an error (exception)?
                    </comment>
                </method1>

                <method1 name="state"
                         return="hlt::HLTState"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
hlt::HLTState state(const unsigned int i) const;
                    <comment>
        Get status of ith path
                    </comment>
                </method1>

                <method1 name="index"
                         return="unsigned int"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="const">
unsigned int index(const unsigned int i) const;
                    <comment>
        Get index (slot position) of module giving the decision of the ith path
                    </comment>
                </method1>

                <method1 name="reset"
                         return="void"
                         args="['const unsigned int']"
                         vars="['i']"
                         qual="">
void reset(const unsigned int i);
                    <comment>
        Reset the ith path
                    </comment>
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['HLTGlobalStatus&amp;']"
                         vars="['other']"
                         qual="">
void swap(HLTGlobalStatus&amp; other);
                    <comment>
        swap function
                    </comment>
                </method1>

                <operator name="operator="
                          return="HLTGlobalStatus&amp;"
                          args="['HLTGlobalStatus const&amp;']"
                          vars="['rhs']"
                          qual="">
HLTGlobalStatus&amp; operator=(HLTGlobalStatus const&amp; rhs);
                    <comment>
        copy assignment implemented with swap()
                    </comment>
                </operator>

            </section>

        </class>
        <function1 name="swap"
                   return="inline void"
                   args="['HLTGlobalStatus&amp;','HLTGlobalStatus&amp;']"
                   vars="['lhs','rhs']"
                   qual="">
inline   void   swap(HLTGlobalStatus&amp; lhs, HLTGlobalStatus&amp; rhs);
            <comment>
      Free swap function
            </comment>
        </function1>

        <operator name="operator&lt;&lt;"
                  return="inline std::ostream&amp;"
                  args="['std::ostream&amp;','const HLTGlobalStatus&amp;']"
                  vars="['ost','hlt']"
                  qual="">
inline std::ostream&amp; operator&lt;&lt;(std::ostream&amp; ost, const HLTGlobalStatus&amp; hlt);
            <comment>
      Formatted printout of trigger tbale
            </comment>
        </operator>

    </namespace>

    <namespace name="std">
        <comment>
   The standard allows us to specialize std::swap for non-templates.
   This ensures that HLTGlobalStatus::swap() will be used in algorithms.
        </comment>
    </namespace>

    <type name="HLTGlobalStatus const&amp;"/>
    <type name="HLTGlobalStatus&amp;"/>
    <type name="HLTPathStatus&amp;"/>
    <type name="bool"/>
    <type name="const HLTPathStatus&amp;"/>
    <type name="const unsigned int"/>
    <type name="edm::HLTGlobalStatus"/>
    <type name="hlt::HLTState"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
