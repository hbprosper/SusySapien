<?xml version="1.0"?>
<!--
==============================================================================
  XML File: EventBase.xml
  Created:  Fri Jan 15 20:45:33 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/EventBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/EventBase.h">

    <include name="&lt;typeinfo&gt;"/>
    <include name="&quot;FWCore/Utilities/interface/InputTag.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/BasicHandle.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Handle.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ConvertHandle.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Wrapper.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/EventAuxiliary.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/EventID.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/Timestamp.h&quot;"/>

    <namespace name="edm">
        <comment>
   forward declarations
        </comment>

        <class name="EventBase"
               fullname="edm::EventBase"
               module="DataFormats.Common"
               project=""
               type="abstract regular">

            <section name="public">
                <constructor name="EventBase"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
EventBase();
                </constructor>

                <destructor name="~EventBase"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~EventBase();
                </destructor>

                <method2 name="getByLabel"
                         return="template&lt;class T&gt; bool"
                         args="['const InputTag&amp;','Handle&lt;T&gt;&amp;']"
                         vars="['','']"
                         qual="const">
template&lt;class T&gt;       bool getByLabel(const InputTag&amp;, Handle&lt;T&gt;&amp;) const;
                    <comment>
         ---------- const member functions ---------------------
                    </comment>
                </method2>

                <method1 name="id"
                         return="edm::EventID"
                         args="['void']"
                         vars="['']"
                         qual="const">
edm::EventID id() const;
                    <comment>
         AUX functions.
                    </comment>
                </method1>

                <method1 name="time"
                         return="edm::Timestamp"
                         args="['void']"
                         vars="['']"
                         qual="const">
edm::Timestamp time() const;
                </method1>

                <method1 name="luminosityBlock"
                         return="edm::LuminosityBlockNumber_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
edm::LuminosityBlockNumber_t       luminosityBlock() const;
                </method1>

                <method1 name="isRealData"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isRealData() const;
                </method1>

                <method1 name="bunchCrossing"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int bunchCrossing() const;
                </method1>

                <method1 name="orbitNumber"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int orbitNumber() const;
                </method1>

                <method1 name="eventAuxiliary"
                         return="virtual edm::EventAuxiliary const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const =0">
virtual edm::EventAuxiliary const&amp; eventAuxiliary() const=0;
                </method1>

            </section>

        </class>
    </namespace>

    <type name="Handle&lt;T&gt;&amp;"/>
    <type name="bool"/>
    <type name="const InputTag&amp;"/>
    <type name="edm::EventAuxiliary const&amp;"/>
    <type name="edm::EventBase"/>
    <type name="edm::EventID"/>
    <type name="edm::LuminosityBlockNumber_t"/>
    <type name="edm::Timestamp"/>
    <type name="int"/>
    <type name="template&lt;class T&gt; bool"/>
    <type name="void"/>
</header>
