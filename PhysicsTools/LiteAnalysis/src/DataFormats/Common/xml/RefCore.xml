<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefCore.xml
  Created:  Fri Jan 15 20:45:49 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefCore.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/RefCore.h">

    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/EDProductGetter.h&quot;"/>
    <include name="&lt;algorithm&gt;"/>

    <namespace name="edm">
        <forward name="EDProduct"/>

        <class name="RefCore"
               fullname="edm::RefCore"
               module="DataFormats.Common"
               project=""
               type="regular">

            <section name="public">
                <constructor name="RefCore"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RefCore();
                </constructor>

                <constructor name="RefCore"
                             return=""
                             args="['ProductID const&amp;','void const*','EDProductGetter const*','bool']"
                             vars="['theId','prodPtr','prodGetter','transient']"
                             qual="">
RefCore(ProductID const&amp; theId, void const* prodPtr, EDProductGetter const* prodGetter, bool transient);
                </constructor>

                <method1 name="id"
                         return="ProductID"
                         args="['void']"
                         vars="['']"
                         qual="const">
ProductID id() const;
                </method1>

                <method1 name="productPtr"
                         return="void const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
void const* productPtr() const;
                </method1>

                <method1 name="setProductPtr"
                         return="void"
                         args="['void const*']"
                         vars="['prodPtr']"
                         qual="const">
void setProductPtr(void const* prodPtr) const;
                </method1>

                <method1 name="isNull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNull() const;
                    <comment>
       Checks for null
                    </comment>
                </method1>

                <method1 name="isNonnull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNonnull() const;
                    <comment>
       Checks for non-null
                    </comment>
                </method1>

                <operator name="operator!"
                          return="bool"
                          args="['void']"
                          vars="['']"
                          qual="const">
bool operator!() const;
                    <comment>
       Checks for null
                    </comment>
                </operator>

                <method1 name="isAvailable"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isAvailable() const;
                    <comment>
       Checks if collection is in memory or available
       in the Event. No type checking is done.
                    </comment>
                </method1>

                <method1 name="productGetter"
                         return="EDProductGetter const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
EDProductGetter const* productGetter() const;
                </method1>

                <method1 name="setProductGetter"
                         return="void"
                         args="['EDProductGetter const*']"
                         vars="['prodGetter']"
                         qual="const">
void setProductGetter(EDProductGetter const* prodGetter) const;
                </method1>

                <method1 name="getProductPtr"
                         return="EDProduct const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
EDProduct const* getProductPtr() const;
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['RefCore&amp;']"
                         vars="['']"
                         qual="">
void swap(RefCore&amp;);
                </method1>

                <method1 name="isTransient"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isTransient() const;
                </method1>

                <method1 name="isTransientInt"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int isTransientInt() const;
                </method1>

                <method1 name="pushBackItem"
                         return="void"
                         args="['RefCore const&amp;','bool']"
                         vars="['productToBeInserted','checkPointer']"
                         qual="">
void pushBackItem(RefCore const&amp; productToBeInserted, bool checkPointer);
                </method1>


                <class name="RefCoreTransients"
                       fullname="edm::RefCore::RefCoreTransients"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">

                    <section>
                        <constructor name="RefCoreTransients"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
RefCoreTransients();
                        </constructor>

                        <constructor name="RefCoreTransients"
                                     return="explicit"
                                     args="['void const*','EDProductGetter const*','bool']"
                                     vars="['prodPtr','prodGetter','transient']"
                                     qual="">
explicit RefCoreTransients(void const* prodPtr, EDProductGetter const* prodGetter, bool transient);
                        </constructor>

                        <method1 name="isTransient"
                                 return="bool"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
bool isTransient() const;
                        </method1>

                        <method1 name="setProductGetter"
                                 return="void"
                                 args="['EDProductGetter const*']"
                                 vars="['prodGetter']"
                                 qual="const">
void setProductGetter(EDProductGetter const* prodGetter) const;
                        </method1>

                        <method1 name="setProductPtr"
                                 return="void"
                                 args="['void const*']"
                                 vars="['prodPtr']"
                                 qual="const">
void setProductPtr(void const* prodPtr) const;
                        </method1>

                        <member>
mutable void const* prodPtr_;
                        </member>

                        <member>
mutable EDProductGetter const* prodGetter_;
                        </member>

                        <member>
bool transient_;
                        </member>

                    </section>

                    <typemap name="RefCoreTransients"
                             value="edm::RefCore::RefCoreTransients"
                             type="class"/>
                    <typemap name="prodGetter_"
                             value="edm::RefCore::RefCoreTransients::prodGetter_"
                             type="member"/>
                    <typemap name="prodPtr_"
                             value="edm::RefCore::RefCoreTransients::prodPtr_"
                             type="member"/>
                    <typemap name="transient_"
                             value="edm::RefCore::RefCoreTransients::transient_"
                             type="member"/>

                </class>
            </section>

        </class>
        <operator name="operator=="
                  return="inline bool"
                  args="['RefCore const&amp;','RefCore const&amp;']"
                  vars="['lhs','rhs']"
                  qual="">
inline   bool   operator==(RefCore const&amp; lhs, RefCore const&amp; rhs);
        </operator>

        <operator name="operator!="
                  return="inline bool"
                  args="['RefCore const&amp;','RefCore const&amp;']"
                  vars="['lhs','rhs']"
                  qual="">
inline   bool   operator!=(RefCore const&amp; lhs, RefCore const&amp; rhs);
        </operator>

        <operator name="operator&lt;"
                  return="inline bool"
                  args="['RefCore const&amp;','RefCore const&amp;']"
                  vars="['lhs','rhs']"
                  qual="">
inline   bool   operator&lt;(RefCore const&amp; lhs, RefCore const&amp; rhs);
        </operator>

        <function1 name="swap"
                   return="inline void"
                   args="['edm::RefCore&amp;','edm::RefCore&amp;']"
                   vars="['lhs','rhs']"
                   qual="">
inline void swap(edm::RefCore&amp; lhs, edm::RefCore&amp; rhs);
        </function1>

    </namespace>

    <type name="EDProduct const*"/>
    <type name="EDProductGetter const*"/>
    <type name="ProductID"/>
    <type name="ProductID const&amp;"/>
    <type name="RefCore const&amp;"/>
    <type name="RefCore&amp;"/>
    <type name="bool"/>
    <type name="edm::RefCore"/>
    <type name="edm::RefCore::RefCoreTransients"/>
    <type name="int"/>
    <type name="mutable EDProductGetter const*"/>
    <type name="mutable void const*"/>
    <type name="void"/>
    <type name="void const*"/>
</header>
