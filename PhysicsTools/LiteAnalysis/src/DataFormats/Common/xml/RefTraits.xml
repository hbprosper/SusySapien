<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefTraits.xml
  Created:  Fri Jan 15 20:45:55 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefTraits.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/RefTraits.h">

    <include name="&lt;functional&gt;"/>
    <include name="&lt;algorithm&gt;"/>

    <namespace name="edm">
        <forward name="template&lt;typename C, typename T, typename F&gt; RefVector"/>
        <forward name="template&lt;typename T&gt; RefToBaseVector"/>

        <namespace name="refhelper">

            <class name="FindUsingAdvance"
                   fullname="edm::refhelper::FindUsingAdvance&lt;C, T&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename C, typename T&gt;">

                <section>
                    <typedef name="first_argument_type"
                             value="C const&amp;">
typedef C const&amp; first_argument_type;
                    </typedef>

                    <typedef name="second_argument_type"
                             value="unsigned int">
typedef unsigned int second_argument_type;
                    </typedef>

                    <typedef name="result_type"
                             value="T const*">
typedef T const* result_type;
                    </typedef>

                    <operator name="operator()"
                              return="result_type"
                              args="['first_argument_type','second_argument_type']"
                              vars="['iContainer','iIndex']"
                              qual="">
result_type operatorPP(first_argument_type iContainer, second_argument_type iIndex);
                    </operator>

                </section>

                <typemap name="first_argument_type"
                         value="C const&amp;"
                         type="typedef"/>
                <typemap name="result_type"
                         value="T const*"
                         type="typedef"/>
                <typemap name="second_argument_type"
                         value="unsigned int"
                         type="typedef"/>

            </class>

            <class name="FindRefVectorUsingAdvance"
                   fullname="edm::refhelper::FindRefVectorUsingAdvance&lt;REFV&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REFV&gt;">
                <baseclass name="public std::binary_function&lt;REFV const&amp;, 
           typename REFV::key_type, 
           typename REFV::member_type const*&gt;"/>

                <section>
                    <typedef name="self"
                             value="FindRefVectorUsingAdvance&lt;REFV&gt;">
typedef FindRefVectorUsingAdvance&lt;REFV&gt; self;
                    </typedef>

                    <operator name="operator()"
                              return="typename self::result_type"
                              args="['typename self::first_argument_type','typename self::second_argument_type']"
                              vars="['iContainer','iIndex']"
                              qual="">
typename self::result_type operatorPP(typename self::first_argument_type iContainer, typename self::second_argument_type iIndex);
                    </operator>

                </section>

                <typemap name="self"
                         value="FindRefVectorUsingAdvance&lt;REFV&gt;"
                         type="typedef"/>

            </class>

            <class name="FindTrait"
                   fullname="edm::refhelper::FindTrait&lt;C, T&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename C, typename T&gt;">
                <comment>
      Used in edm::Ref to set the default 'find' method to use based on the Container and 'contained' type
                </comment>

                <section>
                    <typedef name="value"
                             value="FindUsingAdvance&lt;C, T&gt;">
typedef FindUsingAdvance&lt;C, T&gt; value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="FindUsingAdvance&lt;C, T&gt;"
                         type="typedef"/>

            </class>

            <class name="FindTrait&lt;RefVector&lt;C, T, F&gt;, T&gt;"
                   fullname="edm::refhelper::FindTrait&lt;RefVector&lt;C, T, F&gt;, T&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename C, typename T, typename F&gt;">

                <section>
                    <typedef name="value"
                             value="FindRefVectorUsingAdvance&lt;RefVector&lt;C, T, F&gt; &gt;">
typedef FindRefVectorUsingAdvance&lt;RefVector&lt;C, T, F&gt; &gt; value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="FindRefVectorUsingAdvance&lt;RefVector&lt;C, T, F&gt; &gt;"
                         type="typedef"/>

            </class>

            <class name="FindTrait&lt;RefToBaseVector&lt;T&gt;, T&gt;"
                   fullname="edm::refhelper::FindTrait&lt;RefToBaseVector&lt;T&gt;, T&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <typedef name="value"
                             value="FindRefVectorUsingAdvance&lt;RefToBaseVector&lt;T&gt; &gt;">
typedef FindRefVectorUsingAdvance&lt;RefToBaseVector&lt;T&gt; &gt; value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="FindRefVectorUsingAdvance&lt;RefToBaseVector&lt;T&gt; &gt;"
                         type="typedef"/>

            </class>

            <class name="ValueTrait"
                   fullname="edm::refhelper::ValueTrait&lt;C&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename C&gt;">

                <section>
                    <typedef name="value"
                             value="typename C::value_type">
typedef typename C::value_type value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="typename C::value_type"
                         type="typedef"/>

            </class>

            <class name="ValueTrait&lt;RefVector&lt;C, T, F&gt; &gt;"
                   fullname="edm::refhelper::ValueTrait&lt;RefVector&lt;C, T, F&gt; &gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename C, typename T, typename F&gt;">

                <section>
                    <typedef name="value"
                             value="T">
typedef T value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="T"
                         type="typedef"/>

            </class>

            <class name="ValueTrait&lt;RefToBaseVector&lt;T&gt; &gt;"
                   fullname="edm::refhelper::ValueTrait&lt;RefToBaseVector&lt;T&gt; &gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <typedef name="value"
                             value="T">
typedef T value;
                    </typedef>

                </section>

                <typemap name="value"
                         value="T"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <type name="edm::refhelper::FindRefVectorUsingAdvance&lt;REFV&gt;"/>
    <type name="edm::refhelper::FindTrait&lt;C, T&gt;"/>
    <type name="edm::refhelper::FindTrait&lt;RefToBaseVector&lt;T&gt;, T&gt;"/>
    <type name="edm::refhelper::FindTrait&lt;RefVector&lt;C, T, F&gt;, T&gt;"/>
    <type name="edm::refhelper::FindUsingAdvance&lt;C, T&gt;"/>
    <type name="edm::refhelper::ValueTrait&lt;C&gt;"/>
    <type name="edm::refhelper::ValueTrait&lt;RefToBaseVector&lt;T&gt; &gt;"/>
    <type name="edm::refhelper::ValueTrait&lt;RefVector&lt;C, T, F&gt; &gt;"/>
    <type name="first_argument_type"/>
    <type name="result_type"/>
    <type name="second_argument_type"/>
    <type name="std::binary_function&lt;REFV const&amp;, typename REFV::key_type, typename REFV::member_type const*&gt;"/>
    <type name="typename self::first_argument_type"/>
    <type name="typename self::result_type"/>
    <type name="typename self::second_argument_type"/>
</header>
