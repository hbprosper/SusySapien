<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HolderToVectorTrait.xml
  Created:  Fri Jan 15 20:45:37 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/HolderToVectorTrait.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/HolderToVectorTrait.h">

    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>

    <namespace name="edm">
        <comment>
  #include &lt;boost/static_assert.hpp&gt;
        </comment>

        <namespace name="reftobase">
            <forward name="RefVectorHolderBase"/>
            <forward name="template&lt;typename T&gt; BaseVectorHolder"/>

            <class name="InvaidHolderToVector"
                   fullname="edm::reftobase::InvaidHolderToVector&lt;T, REF&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename T, typename REF&gt;">

                <section>
                    <method2 name="makeVectorHolder"
                             return="static std::auto_ptr&lt;BaseVectorHolder&lt;T&gt; &gt;"
                             args="['void']"
                             vars="['']"
                             qual="">
static std::auto_ptr&lt;BaseVectorHolder&lt;T&gt; &gt; makeVectorHolder();
                    </method2>

                    <method2 name="makeVectorBaseHolder"
                             return="static std::auto_ptr&lt;RefVectorHolderBase&gt;"
                             args="['void']"
                             vars="['']"
                             qual="">
static std::auto_ptr&lt;RefVectorHolderBase&gt; makeVectorBaseHolder();
                    </method2>

                </section>

            </class>

            <class name="HolderToVectorTrait"
                   fullname="edm::reftobase::HolderToVectorTrait&lt;T, REF&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename T, typename REF&gt;">

                <section>
                    <typedef name="type"
                             value="InvaidHolderToVector&lt;T, REF&gt;">
typedef InvaidHolderToVector&lt;T, REF&gt; type;
                        <comment>
              BOOST_STATIC_ASSERT(sizeof(REF) == 0);
                        </comment>
                    </typedef>

                </section>

                <typemap name="type"
                         value="InvaidHolderToVector&lt;T, REF&gt;"
                         type="typedef"/>

            </class>

            <class name="InvalidRefHolderToRefVector"
                   fullname="edm::reftobase::InvalidRefHolderToRefVector&lt;REF&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REF&gt;">

                <section>
                    <method2 name="makeVectorHolder"
                             return="static std::auto_ptr&lt;RefVectorHolderBase&gt;"
                             args="['void']"
                             vars="['']"
                             qual="">
static std::auto_ptr&lt;RefVectorHolderBase&gt; makeVectorHolder();
                    </method2>

                    <method2 name="makeVectorBaseHolder"
                             return="static std::auto_ptr&lt;RefVectorHolderBase&gt;"
                             args="['void']"
                             vars="['']"
                             qual="">
static std::auto_ptr&lt;RefVectorHolderBase&gt; makeVectorBaseHolder();
                    </method2>

                </section>

            </class>

            <class name="RefHolderToRefVectorTrait"
                   fullname="edm::reftobase::RefHolderToRefVectorTrait&lt;REF&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REF&gt;">

                <section>
                    <typedef name="type"
                             value="InvalidRefHolderToRefVector&lt;REF&gt;">
typedef InvalidRefHolderToRefVector&lt;REF&gt; type;
                        <comment>
              BOOST_STATIC_ASSERT(sizeof(REF) == 0);
                        </comment>
                    </typedef>

                </section>

                <typemap name="type"
                         value="InvalidRefHolderToRefVector&lt;REF&gt;"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <type name="edm::reftobase::HolderToVectorTrait&lt;T, REF&gt;"/>
    <type name="edm::reftobase::InvaidHolderToVector&lt;T, REF&gt;"/>
    <type name="edm::reftobase::InvalidRefHolderToRefVector&lt;REF&gt;"/>
    <type name="edm::reftobase::RefHolderToRefVectorTrait&lt;REF&gt;"/>
    <type name="std::auto_ptr&lt;BaseVectorHolder&lt;T&gt; &gt;"/>
    <type name="std::auto_ptr&lt;RefVectorHolderBase&gt;"/>
    <type name="void"/>
</header>
