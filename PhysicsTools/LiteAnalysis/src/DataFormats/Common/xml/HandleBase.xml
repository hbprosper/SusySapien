<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HandleBase.xml
  Created:  Fri Jan 15 20:45:36 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/HandleBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/HandleBase.h">

    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProvenanceFwd.h&quot;"/>
    <include name="&lt;boost/shared_ptr.hpp&gt;"/>

    <namespace name="cms">
        <forward name="Exception"/>
    </namespace>

    <namespace name="edm">

        <class name="HandleBase"
               fullname="edm::HandleBase"
               module="DataFormats.Common"
               project=""
               type="regular">

            <section name="public">
                <constructor name="HandleBase"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
HandleBase();
                </constructor>

                <constructor name="HandleBase"
                             return=""
                             args="['void const*','Provenance const*']"
                             vars="['prod','prov']"
                             qual="">
HandleBase(void const* prod, Provenance const* prov);
                </constructor>

                <constructor name="HandleBase"
                             return=""
                             args="['boost::shared_ptr&lt;cms::Exception&gt; const&amp;']"
                             vars="['iWhyFailed']"
                             qual="">
HandleBase(boost::shared_ptr&lt;cms::Exception&gt; const&amp; iWhyFailed);
                    <comment>
       Used when the attempt to get the data failed
                    </comment>
                </constructor>

                <destructor name="~HandleBase"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~HandleBase();
                </destructor>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['HandleBase&amp;']"
                         vars="['other']"
                         qual="">
void swap(HandleBase&amp; other);
                </method1>

                <operator name="operator="
                          return="HandleBase&amp;"
                          args="['HandleBase const&amp;']"
                          vars="['rhs']"
                          qual="">
HandleBase&amp; operator=(HandleBase const&amp; rhs);
                </operator>

                <method1 name="isValid"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isValid() const;
                </method1>

                <method1 name="failedToGet"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool failedToGet() const;
                </method1>

                <method1 name="provenance"
                         return="Provenance const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
Provenance const* provenance() const;
                </method1>

                <method1 name="id"
                         return="ProductID"
                         args="['void']"
                         vars="['']"
                         qual="const">
ProductID id() const;
                </method1>

                <method2 name="whyFailed"
                         return="boost::shared_ptr&lt;cms::Exception&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
boost::shared_ptr&lt;cms::Exception&gt; whyFailed() const;
                </method2>

            </section>

        </class>
        <function1 name="swap"
                   return="inline void"
                   args="['HandleBase&amp;','HandleBase&amp;']"
                   vars="['a','b']"
                   qual="">
inline   void   swap(HandleBase&amp; a, HandleBase&amp; b);
            <comment>
     Free swap function
            </comment>
        </function1>

    </namespace>

    <type name="HandleBase const&amp;"/>
    <type name="HandleBase&amp;"/>
    <type name="ProductID"/>
    <type name="Provenance const*"/>
    <type name="bool"/>
    <type name="boost::shared_ptr&lt;cms::Exception&gt;"/>
    <type name="boost::shared_ptr&lt;cms::Exception&gt; const&amp;"/>
    <type name="edm::HandleBase"/>
    <type name="void"/>
    <type name="void const*"/>
</header>
