<?xml version="1.0"?>
<!--
==============================================================================
  XML File: VectorHolder.xml
  Created:  Fri Jan 15 20:46:01 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/VectorHolder.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/VectorHolder.h">

    <include name="&quot;DataFormats/Common/interface/BaseVectorHolder.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Holder.h&quot;"/>

    <namespace name="edm">

        <namespace name="reftobase">
            <forward name="RefVectorHolderBase"/>

            <class name="VectorHolder"
                   fullname="edm::reftobase::VectorHolder&lt;T, REFV&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template"
                   template="template&lt;class T, class REFV&gt;">
                <baseclass name="public BaseVectorHolder&lt;T&gt;"/>

                <section name="public">
                    <typedef name="base_type"
                             value="BaseVectorHolder&lt;T&gt;">
typedef BaseVectorHolder&lt;T&gt; base_type;
                    </typedef>

                    <typedef name="size_type"
                             value="typename base_type::size_type">
typedef typename base_type::size_type size_type;
                    </typedef>

                    <typedef name="element_type"
                             value="typename base_type::element_type">
typedef typename base_type::element_type element_type;
                    </typedef>

                    <typedef name="base_ref_type"
                             value="typename base_type::base_ref_type">
typedef typename base_type::base_ref_type base_ref_type;
                    </typedef>

                    <typedef name="const_iterator"
                             value="typename base_type::const_iterator">
typedef typename base_type::const_iterator const_iterator;
                    </typedef>

                    <typedef name="ref_vector_type"
                             value="REFV">
typedef REFV ref_vector_type;
                    </typedef>

                    <constructor name="VectorHolder"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
VectorHolder();
                    </constructor>

                    <constructor name="VectorHolder"
                                 return="explicit"
                                 args="['const ref_vector_type&amp;']"
                                 vars="['iRefVector']"
                                 qual="">
explicit VectorHolder(const ref_vector_type&amp; iRefVector);
                    </constructor>

                    <constructor name="VectorHolder"
                                 return="explicit"
                                 args="['const ProductID&amp;']"
                                 vars="['id']"
                                 qual="">
explicit VectorHolder(const ProductID&amp; id);
                    </constructor>

                    <destructor name="~VectorHolder"
                                return="virtual"
                                args="['void']"
                                vars="['']"
                                qual="">
virtual ~VectorHolder();
                    </destructor>

                    <method1 name="clone"
                             return="virtual base_type*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual base_type* clone() const;
                    </method1>

                    <method1 name="cloneEmpty"
                             return="virtual base_type*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual base_type* cloneEmpty() const;
                    </method1>

                    <method1 name="at"
                             return="base_ref_type const"
                             args="['size_type']"
                             vars="['idx']"
                             qual="const">
base_ref_type const at(size_type idx) const;
                    </method1>

                    <method1 name="empty"
                             return="bool"
                             args="['void']"
                             vars="['']"
                             qual="const">
bool empty() const;
                    </method1>

                    <method1 name="size"
                             return="size_type"
                             args="['void']"
                             vars="['']"
                             qual="const">
size_type size() const;
                    </method1>

                    <method1 name="clear"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void clear();
                        <comment>
        size_type capacity() const { return refVector_.capacity(); }
        void reserve(size_type n) { refVector_.reserve(n); }
                        </comment>
                    </method1>

                    <method1 name="id"
                             return="ProductID"
                             args="['void']"
                             vars="['']"
                             qual="const">
ProductID id() const;
                    </method1>

                    <method1 name="productGetter"
                             return="EDProductGetter const*"
                             args="['void']"
                             vars="['']"
                             qual="const">
EDProductGetter const* productGetter() const;
                    </method1>

                    <method1 name="swap"
                             return="void"
                             args="['VectorHolder&amp;']"
                             vars="['other']"
                             qual="">
void swap(VectorHolder&amp; other);
                    </method1>

                    <operator name="operator="
                              return="VectorHolder&amp;"
                              args="['VectorHolder const&amp;']"
                              vars="['rhs']"
                              qual="">
VectorHolder&amp; operator=(VectorHolder const&amp; rhs);
                    </operator>

                    <method1 name="begin"
                             return="const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="const">
const_iterator begin() const;
                    </method1>

                    <method1 name="end"
                             return="const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="const">
const_iterator end() const;
                    </method1>

                    <method2 name="push_back"
                             return="virtual void"
                             args="['const BaseHolder&lt;T&gt;*']"
                             vars="['r']"
                             qual="">
virtual void push_back(const BaseHolder&lt;T&gt;* r);
                    </method2>

                    <method2 name="vectorHolder"
                             return="virtual std::auto_ptr&lt;RefVectorHolderBase&gt;"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual std::auto_ptr&lt;RefVectorHolderBase&gt; vectorHolder() const;
                    </method2>

                    <method1 name="product"
                             return="virtual const void*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual const void* product() const;
                    </method1>

                    <method1 name="isAvailable"
                             return="virtual bool"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual bool isAvailable() const;
                        <comment>
          in the Event. No type checking is done.
                        </comment>
                    </method1>

                </section>
                <section name="public">

                    <class name="const_iterator_imp_specific"
                           fullname="edm::reftobase::VectorHolder&lt;T, REFV&gt;::const_iterator_imp_specific"
                           module="DataFormats.Common"
                           project=""
                           type="regular struct">
                        <baseclass name="public const_iterator_imp"/>

                        <section>
                            <typedef name="difference_type"
                                     value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                            </typedef>

                            <constructor name="const_iterator_imp_specific"
                                         return=""
                                         args="['void']"
                                         vars="['']"
                                         qual="">
const_iterator_imp_specific();
                            </constructor>

                            <constructor name="const_iterator_imp_specific"
                                         return="explicit"
                                         args="['const typename REFV::const_iterator&amp;']"
                                         vars="['it']"
                                         qual="">
explicit const_iterator_imp_specific(const typename REFV::const_iterator&amp; it);
                            </constructor>

                            <destructor name="~const_iterator_imp_specific"
                                        return=""
                                        args="['void']"
                                        vars="['']"
                                        qual="">
~const_iterator_imp_specific();
                            </destructor>

                            <method1 name="clone"
                                     return="const_iterator_imp_specific*"
                                     args="['void']"
                                     vars="['']"
                                     qual="const">
const_iterator_imp_specific* clone() const;
                            </method1>

                            <method1 name="increase"
                                     return="void"
                                     args="['void']"
                                     vars="['']"
                                     qual="">
void increase();
                            </method1>

                            <method1 name="decrease"
                                     return="void"
                                     args="['void']"
                                     vars="['']"
                                     qual="">
void decrease();
                            </method1>

                            <method1 name="increase"
                                     return="void"
                                     args="['difference_type']"
                                     vars="['d']"
                                     qual="">
void increase(difference_type d);
                            </method1>

                            <method1 name="decrease"
                                     return="void"
                                     args="['difference_type']"
                                     vars="['d']"
                                     qual="">
void decrease(difference_type d);
                            </method1>

                            <method1 name="equal_to"
                                     return="bool"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
bool equal_to(const const_iterator_imp* o) const;
                            </method1>

                            <method1 name="less_than"
                                     return="bool"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
bool less_than(const const_iterator_imp* o) const;
                            </method1>

                            <method1 name="assign"
                                     return="void"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="">
void assign(const const_iterator_imp* o);
                            </method1>

                            <method1 name="deref"
                                     return="base_ref_type"
                                     args="['void']"
                                     vars="['']"
                                     qual="const">
base_ref_type deref() const;
                            </method1>

                            <method1 name="difference"
                                     return="difference_type"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
difference_type difference(const const_iterator_imp* o) const;
                            </method1>

                        </section>

                        <typemap name="const_iterator_imp_specific"
                                 value="edm::reftobase::VectorHolder&lt;T, REFV&gt;::const_iterator_imp_specific"
                                 type="class"/>
                        <typemap name="difference_type"
                                 value="ptrdiff_t"
                                 type="typedef"/>

                    </class>
                </section>

                <typemap name="base_ref_type"
                         value="typename BaseVectorHolder&lt;T&gt;::base_ref_type"
                         type="typedef"/>
                <typemap name="base_type"
                         value="BaseVectorHolder&lt;T&gt;"
                         type="typedef"/>
                <typemap name="const_iterator"
                         value="typename BaseVectorHolder&lt;T&gt;::const_iterator"
                         type="typedef"/>
                <typemap name="element_type"
                         value="typename BaseVectorHolder&lt;T&gt;::element_type"
                         type="typedef"/>
                <typemap name="ref_vector_type"
                         value="REFV"
                         type="typedef"/>
                <typemap name="size_type"
                         value="typename BaseVectorHolder&lt;T&gt;::size_type"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <type name="BaseVectorHolder&lt;T&gt;"/>
    <type name="EDProductGetter const*"/>
    <type name="ProductID"/>
    <type name="VectorHolder const&amp;"/>
    <type name="VectorHolder&amp;"/>
    <type name="base_ref_type"/>
    <type name="base_ref_type const"/>
    <type name="base_type*"/>
    <type name="bool"/>
    <type name="const BaseHolder&lt;T&gt;*"/>
    <type name="const ProductID&amp;"/>
    <type name="const const_iterator_imp*"/>
    <type name="const ref_vector_type&amp;"/>
    <type name="const typename REFV::const_iterator&amp;"/>
    <type name="const void*"/>
    <type name="const_iterator"/>
    <type name="const_iterator_imp"/>
    <type name="const_iterator_imp_specific*"/>
    <type name="difference_type"/>
    <type name="edm::reftobase::VectorHolder&lt;T, REFV&gt;"/>
    <type name="edm::reftobase::VectorHolder&lt;T, REFV&gt;::const_iterator_imp_specific"/>
    <type name="size_type"/>
    <type name="std::auto_ptr&lt;RefVectorHolderBase&gt;"/>
    <type name="void"/>
</header>
