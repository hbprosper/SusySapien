<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Trie.xml
  Created:  Thu Jan 14 22:46:29 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/Trie.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/Trie.h">

    <include name="&lt;list&gt;"/>
    <include name="&lt;string&gt;"/>

    <namespace name="edm">
        <forward name="template&lt;typename T&gt;
  TrieNode"/>

        <class name="TrieFactory"
               fullname="edm::TrieFactory&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template privatedefctor privatecopyctor"
               template="template&lt;typename T&gt;">
            <comment>
     The goal of this class is to allocate Trie node by paquet of X
     element in order to reduce heap-admin size
            </comment>

            <section name="public">
                <constructor name="TrieFactory"
                             return=""
                             args="['unsigned']"
                             vars="['paquetSize']"
                             qual="">
TrieFactory(unsigned paquetSize);
                </constructor>

                <destructor name="~TrieFactory"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~TrieFactory();
                </destructor>

            </section>
            <section name="public">
                <method2 name="newNode"
                         return="TrieNode&lt;T&gt;*"
                         args="['const T&amp;']"
                         vars="['value']"
                         qual="">
TrieNode&lt;T&gt;* newNode(const T&amp; value);
                </method2>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

            </section>

        </class>
    </namespace>

    <namespace name="edm">
        <forward name="template&lt;typename T&gt;
  TrieNodeIter"/>

        <class name="TrieNode"
               fullname="edm::TrieNode&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template privatecopyctor"
               template="template&lt;typename T&gt;">
            <comment>
     @brief this class represent the node of a trie, it contains a
     link to a sub node and a link to a brother (node which have the
     same father)
            </comment>

            <section name="public">
                <typedef name="const_iterator"
                         value="TrieNodeIter&lt;T&gt;">
typedef TrieNodeIter&lt;T&gt; const_iterator;
                </typedef>

                <constructor name="TrieNode"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrieNode();
                </constructor>

                <destructor name="~TrieNode"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~TrieNode();
                </destructor>

            </section>
            <section name="public">
                <method1 name="setValue"
                         return="void"
                         args="['const T&amp;']"
                         vars="['val']"
                         qual="">
void setValue(const T&amp; val);
                    <comment>
        set value associed to node
                    </comment>
                </method1>

                <method1 name="value"
                         return="const T&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const T&amp; value() const;
                    <comment>
        get value associed to node
                    </comment>
                </method1>

                <method2 name="brother"
                         return="const TrieNode&lt;T&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrieNode&lt;T&gt;* brother() const;
                    <comment>
        get brother (return 0x0 this node has no brother)
                    </comment>
                </method2>

                <method2 name="brother"
                         return="TrieNode&lt;T&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="">
TrieNode&lt;T&gt;* brother();
                </method2>

                <method1 name="brotherLabel"
                         return="unsigned char"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned char brotherLabel() const;
                    <comment>
        get brother label
                    </comment>
                </method1>

                <method2 name="begin"
                         return="TrieNodeIter&lt;T&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrieNodeIter&lt;T&gt; begin() const;
                    <comment>
        initialize subnode iterator (std conforming)
                    </comment>
                </method2>

                <method2 name="end"
                         return="TrieNodeIter&lt;T&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrieNodeIter&lt;T&gt; end() const;
                    <comment>
        mark end of iteration (std conforming)
                    </comment>
                </method2>

                <method2 name="subNode"
                         return="const TrieNode&lt;T&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrieNode&lt;T&gt;* subNode() const;
                    <comment>
       get first sub Node
                    </comment>
                </method2>

                <method2 name="subNode"
                         return="TrieNode&lt;T&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="">
TrieNode&lt;T&gt;* subNode();
                </method2>

                <method1 name="subNodeLabel"
                         return="unsigned char"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned char subNodeLabel() const;
                </method1>

                <method2 name="subNodeByLabel"
                         return="const TrieNode&lt;T&gt;*"
                         args="['unsigned char']"
                         vars="['chr']"
                         qual="const">
const TrieNode&lt;T&gt;* subNodeByLabel(unsigned char chr) const;
                    <comment>
       Looking for a sub node
                    </comment>
                </method2>

                <method2 name="subNodeByLabel"
                         return="TrieNode&lt;T&gt;*"
                         args="['unsigned char']"
                         vars="['chr']"
                         qual="">
TrieNode&lt;T&gt;* subNodeByLabel(unsigned char chr);
                </method2>

                <method2 name="addSubNode"
                         return="void"
                         args="['unsigned char','TrieNode&lt;T&gt;*']"
                         vars="['chr','node']"
                         qual="">
void addSubNode(unsigned char chr, TrieNode&lt;T&gt;* node);
                    <comment>
       add an edge
                    </comment>
                </method2>

                <method1 name="display"
                         return="void"
                         args="['std::ostream&amp;','unsigned','unsigned char']"
                         vars="['os','offset','label']"
                         qual="const">
void display(std::ostream&amp; os, unsigned offset, unsigned char label) const;
                    <comment>
        display content of node in output stream
                    </comment>
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                    <comment>
        clear content of TrieNode
                    </comment>
                </method1>

            </section>

            <typemap name="const_iterator"
                     value="TrieNodeIter&lt;T&gt;"
                     type="typedef"/>

        </class>
    </namespace>
    <include name="&lt;ostream&gt;"/>

    <namespace name="edm">
        <forward name="template&lt;typename T&gt;
    TrieFactory"/>
        <forward name="template&lt;typename T&gt;
    TrieNode"/>

        <class name="Trie"
               fullname="edm::Trie&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template privatedefctor privatecopyctor"
               template="template&lt;typename T&gt;">
            <comment>
     Implement a trie in memory with the smallest structure as possible
     (use few RAM as possible)
            </comment>

            <section name="public">
                <constructor name="Trie"
                             return=""
                             args="['const T&amp;']"
                             vars="['empty']"
                             qual="">
Trie(const T&amp; empty);
                    <comment>
          in trie
                    </comment>
                </constructor>

                <destructor name="~Trie"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~Trie();
                </destructor>

            </section>
            <section name="public">
                <method1 name="insert"
                         return="void"
                         args="['std::string const&amp;','const T&amp;']"
                         vars="['str','value']"
                         qual="">
void insert(std::string const&amp; str, const T&amp; value);
                    <comment>
          is throw
                    </comment>
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['const char*','unsigned','const T&amp;']"
                         vars="['str','strLen','value']"
                         qual="">
void insert(const char* str, unsigned strLen, const T&amp; value);
                </method1>

                <method1 name="setEntry"
                         return="void"
                         args="['std::string const&amp;','const T&amp;']"
                         vars="['str','value']"
                         qual="">
void setEntry(std::string const&amp; str, const T&amp; value);
                    <comment>
          value is overwriten
                    </comment>
                </method1>

                <method1 name="setEntry"
                         return="void"
                         args="['const char*','unsigned','const T&amp;']"
                         vars="['str','strLen','value']"
                         qual="">
void setEntry(const char* str, unsigned strLen, const T&amp; value);
                </method1>

                <method1 name="find"
                         return="const T&amp;"
                         args="['std::string const&amp;']"
                         vars="['str']"
                         qual="const">
const T&amp; find(std::string const&amp; str) const;
                    <comment>
          get an entry in the Trie
                    </comment>
                </method1>

                <method1 name="find"
                         return="const T&amp;"
                         args="['const char*','unsigned']"
                         vars="['str','strLen']"
                         qual="const">
const T&amp; find(const char* str, unsigned strLen) const;
                </method1>

                <method2 name="node"
                         return="const TrieNode&lt;T&gt;*"
                         args="['std::string const&amp;']"
                         vars="['str']"
                         qual="const">
const TrieNode&lt;T&gt;* node(std::string const&amp; str) const;
                    <comment>
          get node matching a string
                    </comment>
                </method2>

                <method2 name="node"
                         return="const TrieNode&lt;T&gt;*"
                         args="['const char*','unsigned']"
                         vars="['str','strLen']"
                         qual="const">
const TrieNode&lt;T&gt;* node(const char* str, unsigned strLen) const;
                </method2>

                <method2 name="initialNode"
                         return="const TrieNode&lt;T&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrieNode&lt;T&gt;* initialNode() const;
                    <comment>
           get initial TrieNode
                    </comment>
                </method2>

                <method1 name="display"
                         return="void"
                         args="['std::ostream&amp;']"
                         vars="['os']"
                         qual="">
void display(std::ostream&amp; os);
                    <comment>
          display content of trie in output stream
                    </comment>
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                    <comment>
          clear the content of trie
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>
    <include name="&lt;boost/iterator/iterator_facade.hpp&gt;"/>

    <namespace name="edm">
        <comment>
   iterators and visitors
        </comment>

        <class name="TrieNodeIter"
               fullname="edm::TrieNodeIter&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">
            <baseclass name="public boost::iterator_facade&lt;TrieNodeIter&lt;T&gt;, 
        TrieNode&lt;T&gt; const, 
        boost::forward_traversal_tag &gt;"/>

            <section name="public">
                <typedef name="self"
                         value="TrieNodeIter&lt;T&gt;">
typedef TrieNodeIter&lt;T&gt; self;
                </typedef>

                <typedef name="node_base"
                         value="TrieNode&lt;T&gt; const">
typedef TrieNode&lt;T&gt; const node_base;
                </typedef>

                <constructor name="TrieNodeIter"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrieNodeIter();
                </constructor>

                <constructor name="TrieNodeIter"
                             return="explicit"
                             args="['node_base*']"
                             vars="['p']"
                             qual="">
explicit TrieNodeIter(node_base* p);
                </constructor>

                <method1 name="label"
                         return="unsigned char"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned char label() const;
                </method1>

            </section>

            <typemap name="node_base"
                     value="TrieNode&lt;T&gt; const"
                     type="typedef"/>
            <typemap name="self"
                     value="TrieNodeIter&lt;T&gt;"
                     type="typedef"/>

        </class>
    </namespace>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;algorithm&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;cassert&gt;"/>
    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>

    <namespace name="edm">

        <namespace name="detailsTrie">
            <function1 name="errorInsert"
                       return="inline void"
                       args="['std::string const&amp;']"
                       vars="['key']"
                       qual="">
inline void errorInsert(std::string const&amp; key);
            </function1>

        </namespace>
    </namespace>

    <type name="TrieNode&lt;T&gt;*"/>
    <type name="TrieNodeIter&lt;T&gt;"/>
    <type name="boost::iterator_facade&lt;TrieNodeIter&lt;T&gt;, TrieNode&lt;T&gt; const, boost::forward_traversal_tag &gt;"/>
    <type name="const TrieNode&lt;T&gt;*"/>
    <type name="const char*"/>
    <type name="edm::Trie&lt;T&gt;"/>
    <type name="edm::TrieFactory&lt;T&gt;"/>
    <type name="edm::TrieNode&lt;T&gt;"/>
    <type name="edm::TrieNodeIter&lt;T&gt;"/>
    <type name="node_base*"/>
    <type name="std::ostream&amp;"/>
    <type name="std::string const&amp;"/>
    <type name="unsigned"/>
    <type name="unsigned char"/>
    <type name="void"/>
</header>
