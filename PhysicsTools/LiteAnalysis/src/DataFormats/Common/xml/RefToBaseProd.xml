<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefToBaseProd.xml
  Created:  Thu Jan 14 22:46:22 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefToBaseProd.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/RefToBaseProd.h">

    <include name="&quot;DataFormats/Common/interface/EDProductfwd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefCore.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ConstPtrCache.h&quot;"/>

    <namespace name="edm">
        <forward name="template&lt;typename T&gt; View"/>
        <forward name="template&lt;typename C&gt; Handle"/>

        <class name="RefToBaseProd"
               fullname="edm::RefToBaseProd&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">

            <section name="public">
                <typedef name="product_type"
                         value="View&lt;T&gt;">
typedef View&lt;T&gt; product_type;
                </typedef>

                <constructor name="RefToBaseProd"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RefToBaseProd();
                    <comment>
        Default constructor needed for reading from persistent store. Not for direct use.
                    </comment>
                </constructor>

                <method2 name="RefToBaseProd"
                         return="template&lt;class HandleC&gt; explicit"
                         args="['HandleC const&amp;']"
                         vars="['handle']"
                         qual="">
template&lt;class HandleC&gt;     explicit RefToBaseProd(HandleC const&amp; handle);
                    <comment>
       The templating is artificial.
       HandleC must have the following methods:
         id(),      returning a ProductID,
        product(), returning a C*.
                    </comment>
                </method2>

                <constructor name="RefToBaseProd"
                             return="explicit"
                             args="['Handle&lt;View&lt;T&gt; &gt; const&amp;']"
                             vars="['handle']"
                             qual="">
explicit RefToBaseProd(Handle&lt;View&lt;T&gt; &gt; const&amp; handle);
                </constructor>

                <method2 name="RefToBaseProd"
                         return="template&lt;typename C, typename F&gt; explicit"
                         args="['Ref&lt;C, T, F&gt; const&amp;']"
                         vars="['ref']"
                         qual="">
template&lt;typename C, typename F&gt;     explicit RefToBaseProd(Ref&lt;C, T, F&gt; const&amp; ref);
                    <comment>
        Constructor from Ref&lt;C,T,F&gt;
                    </comment>
                </method2>

                <constructor name="RefToBaseProd"
                             return="explicit"
                             args="['RefToBase&lt;T&gt; const&amp;']"
                             vars="['ref']"
                             qual="">
explicit RefToBaseProd(RefToBase&lt;T&gt; const&amp; ref);
                </constructor>

                <constructor name="RefToBaseProd"
                             return="explicit"
                             args="['const View&lt;T&gt;&amp;']"
                             vars="['']"
                             qual="">
explicit RefToBaseProd(const View&lt;T&gt;&amp;);
                </constructor>

                <copyconstructor name="RefToBaseProd"
                                 return=""
                                 args="['const RefToBaseProd&lt;T&gt;&amp;']"
                                 vars="['']"
                                 qual="">
RefToBaseProd(const RefToBaseProd&lt;T&gt;&amp;);
                </copyconstructor>

                <method2 name="RefToBaseProd"
                         return="template&lt;typename C&gt;"
                         args="['const RefProd&lt;C&gt;&amp;']"
                         vars="['']"
                         qual="">
template&lt;typename C&gt;     RefToBaseProd(const RefProd&lt;C&gt;&amp;);
                </method2>

                <destructor name="~RefToBaseProd"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~RefToBaseProd();
                    <comment>
        Destructor
                    </comment>
                </destructor>

                <operator name="operator*"
                          return="product_type const&amp;"
                          args="['void']"
                          vars="['']"
                          qual="const">
product_type const&amp; operator*() const;
                    <comment>
        Dereference operator
                    </comment>
                </operator>

                <operator name="operator-&gt;"
                          return="product_type const*"
                          args="['void']"
                          vars="['']"
                          qual="const">
product_type const* operator-&gt;() const;
                    <comment>
        Member dereference operator
                    </comment>
                </operator>

                <method1 name="get"
                         return="product_type const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
product_type const* get() const;
                    <comment>
        Will attempt to retrieve product
                    </comment>
                </method1>

                <method1 name="product"
                         return="product_type const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
product_type const* product() const;
                    <comment>
        Will attempt to retrieve product
                    </comment>
                </method1>

                <method1 name="refCore"
                         return="RefCore const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
RefCore const&amp; refCore() const;
                </method1>

                <method1 name="isNull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNull() const;
                    <comment>
        Checks for null
                    </comment>
                </method1>

                <method1 name="isNonnull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNonnull() const;
                    <comment>
        Checks for non-null
                    </comment>
                </method1>

                <operator name="operator!"
                          return="bool"
                          args="['void']"
                          vars="['']"
                          qual="const">
bool operator!() const;
                    <comment>
        Checks for null
                    </comment>
                </operator>

                <method1 name="id"
                         return="ProductID"
                         args="['void']"
                         vars="['']"
                         qual="const">
ProductID id() const;
                    <comment>
        Accessor for product ID.
                    </comment>
                </method1>

                <method1 name="productGetter"
                         return="EDProductGetter const*"
                         args="['void']"
                         vars="['']"
                         qual="const">
EDProductGetter const* productGetter() const;
                    <comment>
        Accessor for product getter.
                    </comment>
                </method1>

                <method1 name="hasCache"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool hasCache() const;
                    <comment>
        Checks if product is in memory.
                    </comment>
                </method1>

                <operator name="operator="
                          return="RefToBaseProd&lt;T&gt;&amp;"
                          args="['const RefToBaseProd&lt;T&gt;&amp;']"
                          vars="['other']"
                          qual="">
RefToBaseProd&lt;T&gt;&amp; operator=(const RefToBaseProd&lt;T&gt;&amp; other);
                </operator>

                <method2 name="swap"
                         return="void"
                         args="['RefToBaseProd&lt;T&gt;&amp;']"
                         vars="['']"
                         qual="">
void swap(RefToBaseProd&lt;T&gt;&amp;);
                </method2>

            </section>

            <typemap name="product_type"
                     value="View&lt;T&gt;"
                     type="typedef"/>

        </class>
    </namespace>
    <include name="&quot;DataFormats/Common/interface/View.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Handle.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefCoreGet.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVectorHolder.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefTraits.h&quot;"/>

    <namespace name="edm">

        <namespace name="refhelper">

            <class name="RefToBaseProdTrait"
                   fullname="edm::refhelper::RefToBaseProdTrait&lt;C, T, F&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename C, typename T=typename refhelper::ValueTrait&lt;C&gt;::value, typename F=typename refhelper::FindTrait&lt;C, T&gt;::value&gt;">

                <section>
                    <typedef name="ref_vector_type"
                             value="RefVector&lt;C, T, F&gt;">
typedef RefVector&lt;C, T, F&gt; ref_vector_type;
                    </typedef>

                </section>

                <typemap name="ref_vector_type"
                         value="RefVector&lt;C, T, F&gt;"
                         type="typedef"/>

            </class>

            <class name="RefToBaseProdTrait&lt;RefVector&lt;C, T, F&gt;, T1, F1&gt;"
                   fullname="edm::refhelper::RefToBaseProdTrait&lt;RefVector&lt;C, T, F&gt;, T1, F1&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename C, typename T, typename F, typename T1, typename F1&gt;">

                <section>
                    <typedef name="ref_vector_type"
                             value="RefVector&lt;C, T, F&gt;">
typedef RefVector&lt;C, T, F&gt; ref_vector_type;
                    </typedef>

                </section>

                <typemap name="ref_vector_type"
                         value="RefVector&lt;C, T, F&gt;"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>
    <include name="&quot;DataFormats/Common/interface/FillView.h&quot;"/>

    <namespace name="edm">
    </namespace>

    <type name="EDProductGetter const*"/>
    <type name="Handle&lt;View&lt;T&gt; &gt; const&amp;"/>
    <type name="ProductID"/>
    <type name="Ref&lt;C, T, F&gt; const&amp;"/>
    <type name="RefCore const&amp;"/>
    <type name="RefToBase&lt;T&gt; const&amp;"/>
    <type name="RefToBaseProd&lt;T&gt;&amp;"/>
    <type name="bool"/>
    <type name="const RefProd&lt;C&gt;&amp;"/>
    <type name="const RefToBaseProd&lt;T&gt;&amp;"/>
    <type name="const View&lt;T&gt;&amp;"/>
    <type name="edm::RefToBaseProd&lt;T&gt;"/>
    <type name="edm::refhelper::RefToBaseProdTrait&lt;C, T, F&gt;"/>
    <type name="edm::refhelper::RefToBaseProdTrait&lt;RefVector&lt;C, T, F&gt;, T1, F1&gt;"/>
    <type name="product_type const&amp;"/>
    <type name="product_type const*"/>
    <type name="template&lt;class HandleC&gt; explicit"/>
    <type name="template&lt;typename C, typename F&gt; explicit"/>
    <type name="template&lt;typename C&gt;"/>
    <type name="void"/>
</header>
