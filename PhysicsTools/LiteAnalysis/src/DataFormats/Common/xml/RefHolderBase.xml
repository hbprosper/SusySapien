<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefHolderBase.xml
  Created:  Fri Jan 15 20:45:50 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefHolderBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/RefHolderBase.h">

    <include name="&quot;Reflex/Type.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/UseReflex.h&quot;"/>

    <namespace name="edm">
        <forward name="ProductID"/>
        <forward name="EDProductGetter"/>

        <namespace name="reftobase">
            <forward name="RefVectorHolderBase"/>

            <class name="RefHolderBase"
                   fullname="edm::reftobase::RefHolderBase"
                   module="DataFormats.Common"
                   project=""
                   type="abstract regular">

                <section name="public">
                    <constructor name="RefHolderBase"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
RefHolderBase();
                    </constructor>

                    <method2 name="getPtr"
                             return="template&lt;class T&gt; T const*"
                             args="['void']"
                             vars="['']"
                             qual="const">
template&lt;class T&gt; T const* getPtr() const;
                    </method2>

                    <destructor name="~RefHolderBase"
                                return="virtual"
                                args="['void']"
                                vars="['']"
                                qual="">
virtual ~RefHolderBase();
                    </destructor>

                    <method1 name="clone"
                             return="virtual RefHolderBase*"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual RefHolderBase* clone() const=0;
                    </method1>

                    <method1 name="id"
                             return="virtual ProductID"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual ProductID id() const=0;
                    </method1>

                    <method1 name="key"
                             return="virtual size_t"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual size_t key() const=0;
                    </method1>

                    <method1 name="isEqualTo"
                             return="virtual bool"
                             args="['RefHolderBase const&amp;']"
                             vars="['rhs']"
                             qual="const = 0">
virtual bool isEqualTo(RefHolderBase const&amp; rhs) const=0;
                        <comment>
         Check to see if the Ref hidden in 'rhs' is equal to the Ref
         hidden in 'this'. They can not be equal if they are of
         different types.
                        </comment>
                    </method1>

                    <method1 name="fillRefIfMyTypeMatches"
                             return="virtual bool"
                             args="['RefHolderBase&amp;','std::string&amp;']"
                             vars="['ref','msg']"
                             qual="const = 0">
virtual bool fillRefIfMyTypeMatches(RefHolderBase&amp; ref, std::string&amp; msg) const=0;
                        <comment>
         If the type of Ref I contain matches the type contained in
         'fillme', set the Ref in 'fillme' equal to mine and return
         true. If not, write the name of the type I really contain to
         msg, and return false.
                        </comment>
                    </method1>

                    <method2 name="makeVectorHolder"
                             return="virtual std::auto_ptr&lt;RefVectorHolderBase&gt;"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual std::auto_ptr&lt;RefVectorHolderBase&gt; makeVectorHolder() const=0;
                    </method2>

                    <method1 name="productGetter"
                             return="virtual EDProductGetter const*"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual EDProductGetter const* productGetter() const=0;
                    </method1>

                    <method1 name="hasProductCache"
                             return="virtual bool"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual bool hasProductCache() const=0;
                    </method1>

                    <method1 name="product"
                             return="virtual void const*"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual void const* product() const=0;
                    </method1>

                    <method1 name="isAvailable"
                             return="virtual bool"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual bool isAvailable() const=0;
                        <comment>
          in the Event. No type checking is done.
                        </comment>
                    </method1>

                </section>

            </class>
        </namespace>
    </namespace>

    <type name="EDProductGetter const*"/>
    <type name="ProductID"/>
    <type name="RefHolderBase const&amp;"/>
    <type name="RefHolderBase&amp;"/>
    <type name="RefHolderBase*"/>
    <type name="bool"/>
    <type name="edm::reftobase::RefHolderBase"/>
    <type name="size_t"/>
    <type name="std::auto_ptr&lt;RefVectorHolderBase&gt;"/>
    <type name="std::string&amp;"/>
    <type name="template&lt;class T&gt; T const*"/>
    <type name="void"/>
    <type name="void const*"/>
</header>
