<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefVectorHolder.xml
  Created:  Thu Jan 14 22:46:25 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefVectorHolder.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/RefVectorHolder.h">

    <include name="&quot;DataFormats/Common/interface/RefVectorHolderBase.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>

    <namespace name="edm">

        <namespace name="reftobase">
            <forward name="RefHolderBase"/>
            <forward name="template&lt;REF&gt; RefHolder"/>

            <class name="RefVectorHolder"
                   fullname="edm::reftobase::RefVectorHolder&lt;REFV&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template"
                   template="template&lt;typename REFV&gt;">
                <baseclass name="public RefVectorHolderBase"/>

                <section name="public">
                    <constructor name="RefVectorHolder"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
RefVectorHolder();
                    </constructor>

                    <constructor name="RefVectorHolder"
                                 return=""
                                 args="['const REFV&amp;']"
                                 vars="['refs']"
                                 qual="">
RefVectorHolder(const REFV&amp; refs);
                    </constructor>

                    <destructor name="~RefVectorHolder"
                                return="virtual"
                                args="['void']"
                                vars="['']"
                                qual="">
virtual ~RefVectorHolder();
                    </destructor>

                    <method1 name="swap"
                             return="void"
                             args="['RefVectorHolder&amp;']"
                             vars="['other']"
                             qual="">
void swap(RefVectorHolder&amp; other);
                    </method1>

                    <operator name="operator="
                              return="RefVectorHolder&amp;"
                              args="['RefVectorHolder const&amp;']"
                              vars="['rhs']"
                              qual="">
RefVectorHolder&amp; operator=(RefVectorHolder const&amp; rhs);
                    </operator>

                    <method1 name="empty"
                             return="virtual bool"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual bool empty() const;
                    </method1>

                    <method1 name="size"
                             return="virtual size_type"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual size_type size() const;
                    </method1>

                    <method1 name="clear"
                             return="virtual void"
                             args="['void']"
                             vars="['']"
                             qual="">
virtual void clear();
                    </method1>

                    <method1 name="push_back"
                             return="virtual void"
                             args="['const RefHolderBase*']"
                             vars="['r']"
                             qual="">
virtual void push_back(const RefHolderBase* r);
                    </method1>

                    <method1 name="reserve"
                             return="virtual void"
                             args="['size_type']"
                             vars="['n']"
                             qual="">
virtual void reserve(size_type n);
                    </method1>

                    <method1 name="id"
                             return="virtual ProductID"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual ProductID id() const;
                    </method1>

                    <method1 name="productGetter"
                             return="virtual EDProductGetter const*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual EDProductGetter const* productGetter() const;
                    </method1>

                    <method2 name="clone"
                             return="virtual RefVectorHolder&lt;REFV&gt;*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual RefVectorHolder&lt;REFV&gt;* clone() const;
                    </method2>

                    <method2 name="cloneEmpty"
                             return="virtual RefVectorHolder&lt;REFV&gt;*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual RefVectorHolder&lt;REFV&gt;* cloneEmpty() const;
                    </method2>

                    <method1 name="setRefs"
                             return="void"
                             args="['const REFV&amp;']"
                             vars="['refs']"
                             qual="">
void setRefs(const REFV&amp; refs);
                    </method1>

                    <method2 name="reallyFillView"
                             return="virtual void"
                             args="['const void*','const ProductID&amp;','std::vector&lt;void const*&gt;&amp;']"
                             vars="['','','']"
                             qual="">
virtual void reallyFillView(const void*, const ProductID&amp;, std::vector&lt;void const*&gt;&amp;);
                    </method2>

                </section>
                <section name="public">

                    <class name="const_iterator_imp_specific"
                           fullname="edm::reftobase::RefVectorHolder&lt;REFV&gt;::const_iterator_imp_specific"
                           module="DataFormats.Common"
                           project=""
                           type="regular struct">
                        <baseclass name="public const_iterator_imp"/>

                        <section>
                            <typedef name="difference_type"
                                     value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                            </typedef>

                            <constructor name="const_iterator_imp_specific"
                                         return=""
                                         args="['void']"
                                         vars="['']"
                                         qual="">
const_iterator_imp_specific();
                            </constructor>

                            <constructor name="const_iterator_imp_specific"
                                         return="explicit"
                                         args="['const typename REFV::const_iterator&amp;']"
                                         vars="['it']"
                                         qual="">
explicit const_iterator_imp_specific(const typename REFV::const_iterator&amp; it);
                            </constructor>

                            <destructor name="~const_iterator_imp_specific"
                                        return=""
                                        args="['void']"
                                        vars="['']"
                                        qual="">
~const_iterator_imp_specific();
                            </destructor>

                            <method1 name="clone"
                                     return="const_iterator_imp_specific*"
                                     args="['void']"
                                     vars="['']"
                                     qual="const">
const_iterator_imp_specific* clone() const;
                            </method1>

                            <method1 name="increase"
                                     return="void"
                                     args="['void']"
                                     vars="['']"
                                     qual="">
void increase();
                            </method1>

                            <method1 name="decrease"
                                     return="void"
                                     args="['void']"
                                     vars="['']"
                                     qual="">
void decrease();
                            </method1>

                            <method1 name="increase"
                                     return="void"
                                     args="['difference_type']"
                                     vars="['d']"
                                     qual="">
void increase(difference_type d);
                            </method1>

                            <method1 name="decrease"
                                     return="void"
                                     args="['difference_type']"
                                     vars="['d']"
                                     qual="">
void decrease(difference_type d);
                            </method1>

                            <method1 name="equal_to"
                                     return="bool"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
bool equal_to(const const_iterator_imp* o) const;
                            </method1>

                            <method1 name="less_than"
                                     return="bool"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
bool less_than(const const_iterator_imp* o) const;
                            </method1>

                            <method1 name="assign"
                                     return="void"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="">
void assign(const const_iterator_imp* o);
                            </method1>

                            <method2 name="deref"
                                     return="boost::shared_ptr&lt;RefHolderBase&gt;"
                                     args="['void']"
                                     vars="['']"
                                     qual="const">
boost::shared_ptr&lt;RefHolderBase&gt; deref() const;
                            </method2>

                            <method1 name="difference"
                                     return="difference_type"
                                     args="['const const_iterator_imp*']"
                                     vars="['o']"
                                     qual="const">
difference_type difference(const const_iterator_imp* o) const;
                            </method1>

                        </section>

                        <typemap name="const_iterator_imp_specific"
                                 value="edm::reftobase::RefVectorHolder&lt;REFV&gt;::const_iterator_imp_specific"
                                 type="class"/>
                        <typemap name="difference_type"
                                 value="ptrdiff_t"
                                 type="typedef"/>

                    </class>
                    <typedef name="const_iterator"
                             value="typename RefVectorHolderBase::const_iterator">
typedef typename RefVectorHolderBase::const_iterator const_iterator;
                    </typedef>

                    <method1 name="begin"
                             return="const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="const">
const_iterator begin() const;
                    </method1>

                    <method1 name="end"
                             return="const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="const">
const_iterator end() const;
                    </method1>

                    <method1 name="product"
                             return="virtual const void*"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual const void* product() const;
                    </method1>

                    <method1 name="isAvailable"
                             return="virtual bool"
                             args="['void']"
                             vars="['']"
                             qual="const">
virtual bool isAvailable() const;
                        <comment>
          in the Event. No type checking is done.
                        </comment>
                    </method1>

                </section>

                <typemap name="const_iterator"
                         value="typename RefVectorHolderBase::const_iterator"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>
    <include name="&quot;DataFormats/Common/interface/RefHolder.h&quot;"/>

    <namespace name="edm">

        <namespace name="reftobase">
        </namespace>
    </namespace>
    <include name="&quot;DataFormats/Common/interface/FillView.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&quot;boost/mpl/if.hpp&quot;"/>

    <namespace name="edm">

        <namespace name="reftobase">

            <class name="RefVectorHolderNoFillView"
                   fullname="edm::reftobase::RefVectorHolderNoFillView&lt;REFV&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REFV&gt;">

                <section>
                    <method2 name="reallyFillView"
                             return="static void"
                             args="['RefVectorHolder&lt;REFV&gt;&amp;','const void*','const ProductID&amp;','std::vector&lt;void const*&gt;&amp;']"
                             vars="['','','','']"
                             qual="">
static void reallyFillView(RefVectorHolder&lt;REFV&gt;&amp;, const void*, const ProductID&amp;, std::vector&lt;void const*&gt;&amp;);
                    </method2>

                </section>

            </class>

            <class name="RefVectorHolderDoFillView"
                   fullname="edm::reftobase::RefVectorHolderDoFillView&lt;REFV&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REFV&gt;">

                <section>
                    <method2 name="reallyFillView"
                             return="static void"
                             args="['RefVectorHolder&lt;REFV&gt;&amp;','const void*','const ProductID&amp;','std::vector&lt;void const*&gt;&amp;']"
                             vars="['rvh','prod','id','pointers']"
                             qual="">
static void reallyFillView(RefVectorHolder&lt;REFV&gt;&amp; rvh, const void* prod, const ProductID&amp; id, std::vector&lt;void const*&gt;&amp; pointers);
                    </method2>

                </section>

            </class>
        </namespace>
    </namespace>

    <type name="EDProductGetter const*"/>
    <type name="ProductID"/>
    <type name="RefVectorHolder const&amp;"/>
    <type name="RefVectorHolder&amp;"/>
    <type name="RefVectorHolder&lt;REFV&gt;&amp;"/>
    <type name="RefVectorHolder&lt;REFV&gt;*"/>
    <type name="RefVectorHolderBase"/>
    <type name="bool"/>
    <type name="boost::shared_ptr&lt;RefHolderBase&gt;"/>
    <type name="const ProductID&amp;"/>
    <type name="const RefHolderBase*"/>
    <type name="const const_iterator_imp*"/>
    <type name="const typename REFV::const_iterator&amp;"/>
    <type name="const void*"/>
    <type name="const_iterator"/>
    <type name="const_iterator_imp"/>
    <type name="const_iterator_imp_specific*"/>
    <type name="difference_type"/>
    <type name="edm::reftobase::RefVectorHolder&lt;REFV&gt;"/>
    <type name="edm::reftobase::RefVectorHolder&lt;REFV&gt;::const_iterator_imp_specific"/>
    <type name="edm::reftobase::RefVectorHolderDoFillView&lt;REFV&gt;"/>
    <type name="edm::reftobase::RefVectorHolderNoFillView&lt;REFV&gt;"/>
    <type name="size_type"/>
    <type name="std::vector&lt;void const*&gt;&amp;"/>
    <type name="void"/>
</header>
