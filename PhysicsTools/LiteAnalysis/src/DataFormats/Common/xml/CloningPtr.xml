<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CloningPtr.xml
  Created:  Thu Jan 14 22:45:53 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/CloningPtr.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/CloningPtr.h">

    <include name="&lt;algorithm&gt;"/>
    <include name="&quot;DataFormats/Common/interface/ClonePolicy.h&quot;"/>

    <namespace name="edm">
        <comment>
   forward declarations
        </comment>

        <class name="CloningPtr"
               fullname="edm::CloningPtr&lt;T, P&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;class T, class P=ClonePolicy&lt;T&gt; &gt;">

            <section name="public">
                <constructor name="CloningPtr"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CloningPtr();
                </constructor>

                <constructor name="CloningPtr"
                             return=""
                             args="['const T&amp;']"
                             vars="['iPtr']"
                             qual="">
CloningPtr(const T&amp; iPtr);
                </constructor>

                <constructor name="CloningPtr"
                             return=""
                             args="['std::auto_ptr&lt;T&gt;']"
                             vars="['iPtr']"
                             qual="">
CloningPtr(std::auto_ptr&lt;T&gt; iPtr);
                </constructor>

                <copyconstructor name="CloningPtr"
                                 return=""
                                 args="['const CloningPtr&lt;T, P&gt;&amp;']"
                                 vars="['iPtr']"
                                 qual="">
CloningPtr(const CloningPtr&lt;T, P&gt;&amp; iPtr);
                </copyconstructor>

                <operator name="operator="
                          return="const CloningPtr&lt;T, P&gt;&amp;"
                          args="['const CloningPtr&lt;T, P&gt;&amp;']"
                          vars="['iRHS']"
                          qual="">
const CloningPtr&lt;T, P&gt;&amp; operator=(const CloningPtr&lt;T, P&gt;&amp; iRHS);
                </operator>

                <method2 name="swap"
                         return="void"
                         args="['CloningPtr&lt;T, P&gt;&amp;']"
                         vars="['iPtr']"
                         qual="">
void swap(CloningPtr&lt;T, P&gt;&amp; iPtr);
                </method2>

                <destructor name="~CloningPtr"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~CloningPtr();
                </destructor>

                <operator name="operator*"
                          return="T&amp;"
                          args="['void']"
                          vars="['']"
                          qual="const">
T&amp; operator*() const;
                    <comment>
       ---------- const member functions ---------------------
                    </comment>
                </operator>

                <operator name="operator-&gt;"
                          return="T*"
                          args="['void']"
                          vars="['']"
                          qual="const">
T* operator-&gt;() const;
                </operator>

                <method1 name="get"
                         return="T*"
                         args="['void']"
                         vars="['']"
                         qual="const">
T* get() const;
                </method1>

            </section>

        </class>
    </namespace>

    <type name="CloningPtr&lt;T, P&gt;&amp;"/>
    <type name="const CloningPtr&lt;T, P&gt;&amp;"/>
    <type name="edm::CloningPtr&lt;T, P&gt;"/>
    <type name="std::auto_ptr&lt;T&gt;"/>
    <type name="void"/>
</header>
