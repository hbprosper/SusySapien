<?xml version="1.0"?>
<!--
==============================================================================
  XML File: AssociationVector.xml
  Created:  Thu Jan 14 22:45:49 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/AssociationVector.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/AssociationVector.h">

    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/EDProduct.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBaseProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/FillView.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;boost/static_assert.hpp&quot;"/>
    <include name="&quot;boost/type_traits/is_same.hpp&quot;"/>

    <namespace name="edm">

        <namespace name="helper">

            <class name="AssociationIdenticalKeyReference"
                   fullname="edm::helper::AssociationIdenticalKeyReference"
                   module="DataFormats.Common"
                   project=""
                   type="regular struct">

                <section>
                    <method2 name="get"
                             return="template&lt;typename T&gt; static const T&amp;"
                             args="['const T&amp;','edm::ProductID']"
                             vars="['t','']"
                             qual="">
template&lt;typename T&gt;       static const T&amp; get(const T&amp; t, edm::ProductID);
                    </method2>

                </section>

            </class>

            <class name="AssociationKeyReferenceTrait"
                   fullname="edm::helper::AssociationKeyReferenceTrait&lt;T&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <typedef name="type"
                             value="AssociationIdenticalKeyReference">
typedef AssociationIdenticalKeyReference type;
                    </typedef>

                </section>

                <typemap name="type"
                         value="AssociationIdenticalKeyReference"
                         type="typedef"/>

            </class>

            <class name="RefFromRefProdTrait"
                   fullname="edm::helper::RefFromRefProdTrait&lt;REFPROD&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template struct"
                   template="template&lt;typename REFPROD&gt;">


            </class>

            <class name="RefFromRefProdTrait&lt;RefProd&lt;C&gt; &gt;"
                   fullname="edm::helper::RefFromRefProdTrait&lt;RefProd&lt;C&gt; &gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename C&gt;">

                <section>
                    <typedef name="ref_type"
                             value="Ref&lt;typename RefProd&lt;C&gt;::product_type&gt;">
typedef Ref&lt;typename RefProd&lt;C&gt;::product_type&gt; ref_type;
                    </typedef>

                </section>

                <typemap name="ref_type"
                         value="Ref&lt;typename RefProd&lt;C&gt;::product_type&gt;"
                         type="typedef"/>

            </class>

            <class name="RefFromRefProdTrait&lt;RefToBaseProd&lt;T&gt; &gt;"
                   fullname="edm::helper::RefFromRefProdTrait&lt;RefToBaseProd&lt;T&gt; &gt;"
                   module="DataFormats.Common"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <typedef name="ref_type"
                             value="RefToBase&lt;T&gt;">
typedef RefToBase&lt;T&gt; ref_type;
                    </typedef>

                </section>

                <typemap name="ref_type"
                         value="RefToBase&lt;T&gt;"
                         type="typedef"/>

            </class>
        </namespace>

        <class name="AssociationVector"
               fullname="edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename KeyRefProd, typename CVal, typename KeyRef=typename helper::RefFromRefProdTrait&lt;KeyRefProd&gt;::ref_type, typename SizeType=typename KeyRefProd::product_type::size_type, typename KeyReferenceHelper=typename helper::AssociationKeyReferenceTrait&lt;KeyRef&gt;::type&gt;">

            <section>
                <constructor name="BOOST_STATIC_ASSERT"
                             return=""
                             args="['(boost::is_same&lt;SizeType, typename']"
                             vars="['CVal::size_type&gt;::value)']"
                             qual="">
BOOST_STATIC_ASSERT((boost::is_same&lt;SizeType, typename CVal::size_type&gt;::value));
                </constructor>

                <typedef name="self"
                         value="AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt;">
typedef AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt; self;
                </typedef>

            </section>
            <section name="public">
                <typedef name="refprod_type"
                         value="KeyRefProd">
typedef KeyRefProd refprod_type;
                </typedef>

                <typedef name="CKey"
                         value="typename KeyRefProd::product_type">
typedef typename KeyRefProd::product_type CKey;
                </typedef>

                <typedef name="size_type"
                         value="SizeType">
typedef SizeType size_type;
                </typedef>

                <typedef name="key_type"
                         value="typename KeyRef::value_type">
typedef typename KeyRef::value_type key_type;
                </typedef>

                <typedef name="value_type"
                         value="typename std::pair&lt;KeyRef, typename CVal::value_type&gt;">
typedef typename std::pair&lt;KeyRef, typename CVal::value_type&gt; value_type;
                </typedef>

                <typedef name="transient_vector_type"
                         value="std::vector&lt;value_type&gt;">
typedef std::vector&lt;value_type&gt; transient_vector_type;
                </typedef>

                <typedef name="const_reference"
                         value="const value_type&amp;">
typedef const value_type&amp; const_reference;
                </typedef>

                <constructor name="AssociationVector"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
AssociationVector();
                </constructor>

                <constructor name="AssociationVector"
                             return=""
                             args="['const KeyRefProd&amp;','const CKey*=0']"
                             vars="['ref','']"
                             qual="">
AssociationVector(const KeyRefProd&amp; ref, const CKey*=0);
                </constructor>

                <copyconstructor name="AssociationVector"
                                 return=""
                                 args="['const AssociationVector&amp;']"
                                 vars="['']"
                                 qual="">
AssociationVector(const AssociationVector&amp;);
                </copyconstructor>

                <destructor name="~AssociationVector"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~AssociationVector();
                </destructor>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <operator name="operator[]"
                          return="const_reference"
                          args="['size_type']"
                          vars="['n']"
                          qual="const">
const_reference operator[](size_type n) const;
                </operator>

                <operator name="operator[]"
                          return="typename CVal::const_reference"
                          args="['const KeyRef&amp;']"
                          vars="['k']"
                          qual="const">
typename CVal::const_reference operator[](const KeyRef&amp; k) const;
                </operator>

                <operator name="operator[]"
                          return="typename CVal::reference"
                          args="['const KeyRef&amp;']"
                          vars="['k']"
                          qual="">
typename CVal::reference operator[](const KeyRef&amp; k);
                </operator>

                <operator name="operator="
                          return="self&amp;"
                          args="['const self&amp;']"
                          vars="['']"
                          qual="">
self&amp; operator=(const self&amp;);
                </operator>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['self&amp;']"
                         vars="['other']"
                         qual="">
void swap(self&amp; other);
                </method1>

                <method1 name="keyProduct"
                         return="const KeyRefProd&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const KeyRefProd&amp; keyProduct() const;
                </method1>

                <method1 name="key"
                         return="KeyRef"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
KeyRef key(size_type i) const;
                </method1>

                <method1 name="value"
                         return="const typename CVal::value_type"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
const typename CVal::value_type value(size_type i) const;
                </method1>

                <method1 name="setValue"
                         return="void"
                         args="['size_type','const typename CVal::value_type&amp;']"
                         vars="['i','val']"
                         qual="">
void setValue(size_type i, const typename CVal::value_type&amp; val);
                </method1>

                <method2 name="fillView"
                         return="void"
                         args="['ProductID const&amp;','std::vector&lt;void const*&gt;&amp;','helper_vector&amp;']"
                         vars="['id','pointers','helpers']"
                         qual="const">
void fillView(ProductID const&amp; id, std::vector&lt;void const*&gt;&amp; pointers, helper_vector&amp; helpers) const;
                </method2>

                <typedef name="const_iterator"
                         value="typename transient_vector_type::const_iterator">
typedef typename transient_vector_type::const_iterator const_iterator;
                </typedef>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

            </section>

            <typemap name="CKey"
                     value="typename KeyRefProd::product_type"
                     type="typedef"/>
            <typemap name="const_iterator"
                     value="typename std::vector&lt;typename std::pair&lt;KeyRef, typename CVal::value_type&gt; &gt;::const_iterator"
                     type="typedef"/>
            <typemap name="const_reference"
                     value="const typename std::pair&lt;KeyRef, typename CVal::value_type&gt;&amp;"
                     type="typedef"/>
            <typemap name="key_type"
                     value="typename KeyRef::typename std::pair&lt;KeyRef, typename CVal::value_type&gt;"
                     type="typedef"/>
            <typemap name="refprod_type"
                     value="KeyRefProd"
                     type="typedef"/>
            <typemap name="self"
                     value="AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt;"
                     type="typedef"/>
            <typemap name="size_type"
                     value="SizeType"
                     type="typedef"/>
            <typemap name="transient_vector_type"
                     value="std::vector&lt;typename std::pair&lt;KeyRef, typename CVal::value_type&gt; &gt;"
                     type="typedef"/>
            <typemap name="value_type"
                     value="typename std::pair&lt;KeyRef, typename CVal::value_type&gt;"
                     type="typedef"/>

        </class>

        <class name="has_fillView&lt;edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt; &gt;"
               fullname="edm::has_fillView&lt;edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt; &gt;"
               module="DataFormats.Common"
               project=""
               type="specialized template struct"
               template="template&lt;typename KeyRefProd, typename CVal, typename KeyRef, typename SizeType, typename KeyReferenceHelper&gt;">

            <section>
                <member>
static bool const value=true;
                </member>

            </section>

            <typemap name="true"
                     value="edm::has_fillView&lt;edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt; &gt;::true"
                     type="member"/>

        </class>
    </namespace>

    <type name="(boost::is_same&lt;SizeType, typename"/>
    <type name="ProductID const&amp;"/>
    <type name="bool"/>
    <type name="bool const value"/>
    <type name="const AssociationVector&amp;"/>
    <type name="const CKey*"/>
    <type name="const self&amp;"/>
    <type name="const typename CVal::value_type"/>
    <type name="const typename CVal::value_type&amp;"/>
    <type name="const_iterator"/>
    <type name="const_reference"/>
    <type name="edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt;"/>
    <type name="edm::ProductID"/>
    <type name="edm::has_fillView&lt;edm::AssociationVector&lt;KeyRefProd, CVal, KeyRef, SizeType, KeyReferenceHelper&gt; &gt;"/>
    <type name="edm::helper::AssociationIdenticalKeyReference"/>
    <type name="edm::helper::AssociationKeyReferenceTrait&lt;T&gt;"/>
    <type name="edm::helper::RefFromRefProdTrait&lt;REFPROD&gt;"/>
    <type name="edm::helper::RefFromRefProdTrait&lt;RefProd&lt;C&gt; &gt;"/>
    <type name="edm::helper::RefFromRefProdTrait&lt;RefToBaseProd&lt;T&gt; &gt;"/>
    <type name="helper_vector&amp;"/>
    <type name="self&amp;"/>
    <type name="size_type"/>
    <type name="std::vector&lt;void const*&gt;&amp;"/>
    <type name="template&lt;typename T&gt; const T&amp;"/>
    <type name="typename CVal::const_reference"/>
    <type name="typename CVal::reference"/>
    <type name="void"/>
</header>
