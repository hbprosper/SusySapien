<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefBase.xml
  Created:  Thu Jan 14 22:46:17 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/RefBase.h">

    <include name="&quot;DataFormats/Common/interface/EDProductfwd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefCore.h&quot;"/>

    <namespace name="edm">

        <class name="RefBase"
               fullname="edm::RefBase&lt;KEY&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename KEY&gt;">

            <section name="public">
                <typedef name="key_type"
                         value="KEY">
typedef KEY key_type;
                </typedef>

                <constructor name="RefBase"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RefBase();
                    <comment>
        Default constructor needed for reading from persistent store. Not for direct use.
                    </comment>
                </constructor>

                <constructor name="RefBase"
                             return=""
                             args="['ProductID const&amp;','void const*','key_type','void const*','EDProductGetter const*','bool']"
                             vars="['productID','prodPtr','itemKey','itemPtr','prodGetter','transient']"
                             qual="">
RefBase(ProductID const&amp; productID, void const* prodPtr, key_type itemKey, void const* itemPtr, EDProductGetter const* prodGetter, bool transient);
                    <comment>
        General purpose constructor.
                    </comment>
                </constructor>

                <constructor name="RefBase"
                             return=""
                             args="['RefCore const&amp;','RefItem&lt;KEY&gt; const&amp;']"
                             vars="['prod','itm']"
                             qual="">
RefBase(RefCore const&amp; prod, RefItem&lt;KEY&gt; const&amp; itm);
                    <comment>
        Constructor from RefVector.
                    </comment>
                </constructor>

                <method1 name="refCore"
                         return="RefCore const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
RefCore const&amp; refCore() const;
                    <comment>
        Accessor for product ID and product getter.
                    </comment>
                </method1>

                <method2 name="item"
                         return="RefItem&lt;KEY&gt; const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
RefItem&lt;KEY&gt; const&amp; item() const;
                    <comment>
        Accessor for index and pointer
                    </comment>
                </method2>

                <method1 name="isValid"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isValid() const;
                    <comment>
        Return true if this RefBase is non-null
                    </comment>
                </method1>

                <method1 name="isNull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNull() const;
                </method1>

                <method1 name="isNonnull"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isNonnull() const;
                </method1>

            </section>

            <typemap name="key_type"
                     value="KEY"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="EDProductGetter const*"/>
    <type name="ProductID const&amp;"/>
    <type name="RefCore const&amp;"/>
    <type name="RefItem&lt;KEY&gt; const&amp;"/>
    <type name="bool"/>
    <type name="edm::RefBase&lt;KEY&gt;"/>
    <type name="key_type"/>
    <type name="void"/>
    <type name="void const*"/>
</header>
