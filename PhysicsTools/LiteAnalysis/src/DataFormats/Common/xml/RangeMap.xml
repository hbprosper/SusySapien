<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RangeMap.xml
  Created:  Fri Jan 15 20:45:48 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RangeMap.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/RangeMap.h">

    <include name="&lt;map&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;ext/functional&gt;"/>
    <include name="&quot;FWCore/Utilities/interface/Exception.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/CloneTrait.h&quot;"/>

    <namespace name="edm">

        <class name="RangeMap"
               fullname="edm::RangeMap&lt;ID, C, P&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename ID, typename C, typename P=typename clonehelper::CloneTrait&lt;C&gt;::type &gt;">

            <section name="public">
                <typedef name="value_type"
                         value="typename C::value_type">
typedef typename C::value_type value_type;
                    <comment>
        contained object type
                    </comment>
                </typedef>

                <typedef name="size_type"
                         value="typename C::size_type">
typedef typename C::size_type size_type;
                    <comment>
        collection size type
                    </comment>
                </typedef>

                <typedef name="reference"
                         value="typename C::reference">
typedef typename C::reference reference;
                    <comment>
        reference type
                    </comment>
                </typedef>

                <typedef name="pointer"
                         value="typename C::pointer">
typedef typename C::pointer pointer;
                    <comment>
        pointer type
                    </comment>
                </typedef>

                <typedef name="const_iterator"
                         value="typename C::const_iterator">
typedef typename C::const_iterator const_iterator;
                    <comment>
        constant access iterator type
                    </comment>
                </typedef>

                <typedef name="pairType"
                         value="std::pair&lt;unsigned int, unsigned int&gt;">
typedef std::pair&lt;unsigned int, unsigned int&gt; pairType;
                    <comment>
      use unsigned int rather than C::size_type in order to avoid porting problems
                    </comment>
                </typedef>

                <typedef name="mapType"
                         value="std::map&lt;ID, pairType&gt;">
typedef std::map&lt;ID, pairType&gt; mapType;
                    <comment>
        map of identifier to index range
                    </comment>
                </typedef>

                <typedef name="range"
                         value="std::pair&lt;const_iterator, const_iterator&gt;">
typedef std::pair&lt;const_iterator, const_iterator&gt; range;
                    <comment>
        iterator range
                    </comment>
                </typedef>

            </section>
            <section name="private">

                <class name="comp"
                       fullname="edm::RangeMap&lt;ID, C, P&gt;::comp&lt;CMP&gt;"
                       module="DataFormats.Common"
                       project=""
                       type="template struct privatector"
                       template="template&lt;typename CMP&gt;">
                    <comment>
        comparator helper class
                    </comment>


                    <typemap name="comp"
                             value="edm::RangeMap&lt;ID, C, P&gt;::comp&lt;CMP&gt;"
                             type="class"/>

                </class>
            </section>
            <section name="public">
                <constructor name="RangeMap"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RangeMap();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <method2 name="get"
                         return="template&lt;typename CMP&gt; range"
                         args="['ID','CMP']"
                         vars="['id','comparator']"
                         qual="const">
template&lt;typename CMP&gt;     range get(ID id, CMP comparator) const;
                    <comment>
        to use only comparators provided with CMSSW release.
                    </comment>
                </method2>

                <method2 name="get"
                         return="template&lt;typename CMP&gt; range"
                         args="['std::pair&lt;ID, CMP&gt;']"
                         vars="['p']"
                         qual="const">
template&lt;typename CMP&gt;     range get(std::pair&lt;ID, CMP&gt; p) const;
                    <comment>
        get range of objects matching a specified identifier with a specified comparator.
                    </comment>
                </method2>

                <method1 name="get"
                         return="range"
                         args="['ID']"
                         vars="['id']"
                         qual="const">
range get(ID id) const;
                    <comment>
        get a range of objects with specified identifier
                    </comment>
                </method1>

                <method2 name="put"
                         return="template&lt;typename CI&gt; void"
                         args="['ID','CI','CI']"
                         vars="['id','begin','end']"
                         qual="">
template&lt;typename CI&gt;     void put(ID id, CI begin, CI end);
                    <comment>
        insert an object range with specified identifier
                    </comment>
                </method2>

                <method1 name="size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t size() const;
                    <comment>
        return number of contained object
                    </comment>
                </method1>

                <method1 name="begin"
                         return="typename C::const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
typename C::const_iterator begin() const;
                    <comment>
        first collection iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="typename C::const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
typename C::const_iterator end() const;
                    <comment>
        last collection iterator
                    </comment>
                </method1>


                <class name="id_iterator"
                       fullname="edm::RangeMap&lt;ID, C, P&gt;::id_iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">
                    <comment>
        identifier iterator
                    </comment>

                    <section>
                        <typedef name="value_type"
                                 value="ID">
typedef ID value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="ID*">
typedef ID* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="ID&amp;">
typedef ID&amp; reference;
                        </typedef>

                        <typedef name="difference_type"
                                 value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename mapType::const_iterator::iterator_category">
typedef typename mapType::const_iterator::iterator_category iterator_category;
                        </typedef>

                        <typedef name="const_iterator"
                                 value="typename mapType::const_iterator">
typedef typename mapType::const_iterator const_iterator;
                        </typedef>

                        <constructor name="id_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
id_iterator();
                        </constructor>

                        <constructor name="id_iterator"
                                     return=""
                                     args="['const_iterator']"
                                     vars="['o']"
                                     qual="">
id_iterator(const_iterator o);
                        </constructor>

                        <operator name="operator="
                                  return="id_iterator&amp;"
                                  args="['const id_iterator&amp;']"
                                  vars="['it']"
                                  qual="">
id_iterator&amp; operator=(const id_iterator&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="id_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
id_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="id_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
id_iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="id_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
id_iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="id_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
id_iterator operator--(int);
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const id_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const id_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const id_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const id_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="const ID"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
const ID operator*() const;
                        </operator>

                    </section>

                    <typemap name="const_iterator"
                             value="typename mapType::const_iterator"
                             type="typedef"/>
                    <typemap name="difference_type"
                             value="ptrdiff_t"
                             type="typedef"/>
                    <typemap name="id_iterator"
                             value="edm::RangeMap&lt;ID, C, P&gt;::id_iterator"
                             type="class"/>
                    <typemap name="iterator_category"
                             value="typename mapType::typename mapType::const_iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="pointer"
                             value="ID*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="ID&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="ID"
                             type="typedef"/>

                </class>
                <method1 name="post_insert"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void post_insert();
                    <comment>
        perfor post insert action
                    </comment>
                </method1>

                <method1 name="id_begin"
                         return="id_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
id_iterator id_begin() const;
                    <comment>
        first identifier iterator
                    </comment>
                </method1>

                <method1 name="id_end"
                         return="id_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
id_iterator id_end() const;
                    <comment>
        last identifier iterator
                    </comment>
                </method1>

                <method1 name="id_size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t id_size() const;
                    <comment>
        number of contained identifiers
                    </comment>
                </method1>

                <method2 name="ids"
                         return="std::vector&lt;ID&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;ID&gt; ids() const;
                    <comment>
        indentifier vector
                    </comment>
                </method2>

                <operator name="operator[]"
                          return="reference"
                          args="['size_type']"
                          vars="['i']"
                          qual="">
reference operator[](size_type i);
                    <comment>
        direct access to an object in the collection
                    </comment>
                </operator>

                <method2 name="swap"
                         return="void"
                         args="['RangeMap&lt;ID, C, P&gt;&amp;']"
                         vars="['other']"
                         qual="">
void swap(RangeMap&lt;ID, C, P&gt;&amp; other);
                    <comment>
        swap member function
                    </comment>
                </method2>

                <operator name="operator="
                          return="RangeMap&amp;"
                          args="['RangeMap const&amp;']"
                          vars="['rhs']"
                          qual="">
RangeMap&amp; operator=(RangeMap const&amp; rhs);
                    <comment>
        copy assignment
                    </comment>
                </operator>

            </section>

            <typemap name="const_iterator"
                     value="typename C::const_iterator"
                     type="typedef"/>
            <typemap name="mapType"
                     value="std::map&lt;ID, std::pair&lt;unsigned int, unsigned int&gt; &gt;"
                     type="typedef"/>
            <typemap name="pairType"
                     value="std::pair&lt;unsigned int, unsigned int&gt;"
                     type="typedef"/>
            <typemap name="pointer"
                     value="typename C::pointer"
                     type="typedef"/>
            <typemap name="range"
                     value="std::pair&lt;typename C::const_iterator, typename C::const_iterator&gt;"
                     type="typedef"/>
            <typemap name="reference"
                     value="typename C::reference"
                     type="typedef"/>
            <typemap name="size_type"
                     value="typename C::size_type"
                     type="typedef"/>
            <typemap name="value_type"
                     value="typename C::value_type"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="RangeMap const&amp;"/>
    <type name="RangeMap&amp;"/>
    <type name="RangeMap&lt;ID, C, P&gt;&amp;"/>
    <type name="bool"/>
    <type name="const id_iterator&amp;"/>
    <type name="const_iterator"/>
    <type name="edm::RangeMap&lt;ID, C, P&gt;"/>
    <type name="edm::RangeMap&lt;ID, C, P&gt;::comp&lt;CMP&gt;"/>
    <type name="edm::RangeMap&lt;ID, C, P&gt;::id_iterator"/>
    <type name="id_iterator"/>
    <type name="id_iterator&amp;"/>
    <type name="int"/>
    <type name="range"/>
    <type name="reference"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="std::pair&lt;ID, CMP&gt;"/>
    <type name="std::vector&lt;ID&gt;"/>
    <type name="template&lt;typename CI&gt; void"/>
    <type name="template&lt;typename CMP&gt; range"/>
    <type name="typename C::const_iterator"/>
    <type name="void"/>
</header>
