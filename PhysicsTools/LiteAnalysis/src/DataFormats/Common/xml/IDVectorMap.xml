<?xml version="1.0"?>
<!--
==============================================================================
  XML File: IDVectorMap.xml
  Created:  Fri Jan 15 20:45:37 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/IDVectorMap.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/IDVectorMap.h">

    <include name="&lt;map&gt;"/>

    <namespace name="edm">

        <class name="IDVectorMap"
               fullname="edm::IDVectorMap&lt;ID, C, P&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename ID, typename C, typename P&gt;">

            <section name="public">
                <typedef name="value_type"
                         value="typename C::value_type">
typedef typename C::value_type value_type;
                </typedef>

                <typedef name="container_iterator"
                         value="typename C::const_iterator">
typedef typename C::const_iterator container_iterator;
                </typedef>

                <typedef name="map"
                         value="std::map&lt;ID, C&gt;">
typedef std::map&lt;ID, C&gt; map;
                </typedef>

                <typedef name="map_iterator"
                         value="typename map::const_iterator">
typedef typename map::const_iterator map_iterator;
                </typedef>


                <class name="const_iterator"
                       fullname="edm::IDVectorMap&lt;ID, C, P&gt;::const_iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">

                    <section>
                        <typedef name="value_type"
                                 value="typename IDVectorMap::value_type">
typedef typename IDVectorMap::value_type value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="value_type*">
typedef value_type* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="value_type&amp;">
typedef value_type&amp; reference;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename map_iterator::iterator_category">
typedef typename map_iterator::iterator_category iterator_category;
                        </typedef>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
const_iterator();
                        </constructor>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['const map_iterator&amp;','const map_iterator&amp;','const container_iterator&amp;']"
                                     vars="['e','m','c']"
                                     qual="">
const_iterator(const map_iterator&amp; e, const map_iterator&amp; m, const container_iterator&amp; c);
                        </constructor>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['const map_iterator&amp;']"
                                     vars="['e']"
                                     qual="">
const_iterator(const map_iterator&amp; e);
                        </constructor>

                        <operator name="operator="
                                  return="const_iterator&amp;"
                                  args="['const const_iterator&amp;']"
                                  vars="['it']"
                                  qual="">
const_iterator&amp; operator=(const const_iterator&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator--(int);
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const const_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const const_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="const value_type&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
const value_type&amp; operator*() const;
                        </operator>

                    </section>

                    <typemap name="const_iterator"
                             value="edm::IDVectorMap&lt;ID, C, P&gt;::const_iterator"
                             type="class"/>
                    <typemap name="iterator_category"
                             value="typename map_iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="pointer"
                             value="typename IDVectorMap::value_type*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="typename IDVectorMap::value_type&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="typename IDVectorMap::value_type"
                             type="typedef"/>

                </class>
                <constructor name="IDVectorMap"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
IDVectorMap();
                </constructor>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['ID','const value_type&amp;']"
                         vars="['id','t']"
                         qual="">
void insert(ID id, const value_type&amp; t);
                </method1>

                <method2 name="insert"
                         return="template&lt;typename CI&gt; void"
                         args="['ID','CI','CI']"
                         vars="['id','begin','end']"
                         qual="">
template&lt;typename CI&gt;     void insert(ID id, CI begin, CI end);
                </method2>


                <class name="range"
                       fullname="edm::IDVectorMap&lt;ID, C, P&gt;::range"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">

                    <section>
                        <constructor name="range"
                                     return=""
                                     args="['const container_iterator&amp;','const container_iterator&amp;']"
                                     vars="['b','e']"
                                     qual="">
range (const container_iterator&amp; b, const container_iterator&amp; e);
                        </constructor>

                        <member>
container_iterator begin, end;
                        </member>

                    </section>

                    <typemap name="end"
                             value="edm::IDVectorMap&lt;ID, C, P&gt;::range::end"
                             type="member"/>
                    <typemap name="range"
                             value="edm::IDVectorMap&lt;ID, C, P&gt;::range"
                             type="class"/>

                </class>
                <method1 name="get"
                         return="range"
                         args="['ID']"
                         vars="['id']"
                         qual="const">
range get(ID id) const;
                </method1>


                <class name="match_iterator"
                       fullname="edm::IDVectorMap&lt;ID, C, P&gt;::match_iterator&lt;M&gt;"
                       module="DataFormats.Common"
                       project=""
                       type="template struct"
                       template="template&lt;typename M&gt;">

                    <section>
                        <typedef name="value_type"
                                 value="typename IDVectorMap::value_type">
typedef typename IDVectorMap::value_type value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="value_type*">
typedef value_type* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="value_type&amp;">
typedef value_type&amp; reference;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename map_iterator::iterator_category">
typedef typename map_iterator::iterator_category iterator_category;
                        </typedef>

                        <constructor name="match_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
match_iterator();
                        </constructor>

                        <constructor name="match_iterator"
                                     return=""
                                     args="['const M&amp;','const map_iterator&amp;','const map_iterator&amp;','const container_iterator&amp;']"
                                     vars="['ma','e','m','c']"
                                     qual="">
match_iterator(const M&amp; ma, const map_iterator&amp; e, const map_iterator&amp; m, const container_iterator&amp; c);
                        </constructor>

                        <constructor name="match_iterator"
                                     return=""
                                     args="['const M&amp;','const map_iterator&amp;']"
                                     vars="['ma','e']"
                                     qual="">
match_iterator(const M&amp; ma, const map_iterator&amp; e);
                        </constructor>

                        <operator name="operator="
                                  return="match_iterator&amp;"
                                  args="['const match_iterator&amp;']"
                                  vars="['it']"
                                  qual="">
match_iterator&amp; operator=(const match_iterator&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="match_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
match_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="match_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
match_iterator operator++(int);
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const match_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const match_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const match_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const match_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="const value_type&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
const value_type&amp; operator*() const;
                        </operator>

                    </section>

                    <typemap name="iterator_category"
                             value="typename map_iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="match_iterator"
                             value="edm::IDVectorMap&lt;ID, C, P&gt;::match_iterator&lt;M&gt;"
                             type="class"/>
                    <typemap name="pointer"
                             value="typename IDVectorMap::value_type*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="typename IDVectorMap::value_type&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="typename IDVectorMap::value_type"
                             type="typedef"/>

                </class>
                <method2 name="begin"
                         return="template&lt;typename M&gt; match_iterator&lt;M&gt;"
                         args="['const M&amp;']"
                         vars="['m']"
                         qual="const">
template&lt;typename M&gt;     match_iterator&lt;M&gt; begin(const M&amp; m) const;
                </method2>

                <method2 name="end"
                         return="template&lt;typename M&gt; match_iterator&lt;M&gt;"
                         args="['const M&amp;']"
                         vars="['m']"
                         qual="const">
template&lt;typename M&gt;     match_iterator&lt;M&gt; end(const M&amp; m) const;
                </method2>


                <class name="id_iterator"
                       fullname="edm::IDVectorMap&lt;ID, C, P&gt;::id_iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">

                    <section>
                        <typedef name="value_type"
                                 value="ID">
typedef ID value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="ID*">
typedef ID* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="ID&amp;">
typedef ID&amp; reference;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename map_iterator::iterator_category">
typedef typename map_iterator::iterator_category iterator_category;
                        </typedef>

                        <constructor name="id_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
id_iterator();
                        </constructor>

                        <constructor name="id_iterator"
                                     return=""
                                     args="['map_iterator']"
                                     vars="['o']"
                                     qual="">
id_iterator(map_iterator o);
                        </constructor>

                        <operator name="operator="
                                  return="id_iterator&amp;"
                                  args="['const id_iterator&amp;']"
                                  vars="['it']"
                                  qual="">
id_iterator&amp; operator=(const id_iterator&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="id_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
id_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="id_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
id_iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="id_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
id_iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="id_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
id_iterator operator--(int);
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const id_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const id_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const id_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const id_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="const ID"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
const ID operator*() const;
                        </operator>

                    </section>

                    <typemap name="id_iterator"
                             value="edm::IDVectorMap&lt;ID, C, P&gt;::id_iterator"
                             type="class"/>
                    <typemap name="iterator_category"
                             value="typename map_iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="pointer"
                             value="ID*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="ID&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="ID"
                             type="typedef"/>

                </class>
                <method1 name="id_begin"
                         return="id_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
id_iterator id_begin() const;
                </method1>

                <method1 name="id_end"
                         return="id_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
id_iterator id_end() const;
                </method1>

                <method1 name="id_size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t id_size() const;
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['IDVectorMap&amp;']"
                         vars="['other']"
                         qual="">
void swap (IDVectorMap&amp; other);
                </method1>

                <operator name="operator="
                          return="IDVectorMap&amp;"
                          args="['IDVectorMap const&amp;']"
                          vars="['rhs']"
                          qual="">
IDVectorMap&amp; operator=(IDVectorMap const&amp; rhs);
                </operator>

            </section>

            <typemap name="container_iterator"
                     value="typename C::const_iterator"
                     type="typedef"/>
            <typemap name="map"
                     value="std::map&lt;ID, C&gt;"
                     type="typedef"/>
            <typemap name="map_iterator"
                     value="typename std::map&lt;ID, C&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="value_type"
                     value="typename C::value_type"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="IDVectorMap const&amp;"/>
    <type name="IDVectorMap&amp;"/>
    <type name="bool"/>
    <type name="const const_iterator&amp;"/>
    <type name="const container_iterator&amp;"/>
    <type name="const id_iterator&amp;"/>
    <type name="const map_iterator&amp;"/>
    <type name="const match_iterator&amp;"/>
    <type name="const value_type&amp;"/>
    <type name="const_iterator"/>
    <type name="const_iterator&amp;"/>
    <type name="container_iterator begin,"/>
    <type name="edm::IDVectorMap&lt;ID, C, P&gt;"/>
    <type name="edm::IDVectorMap&lt;ID, C, P&gt;::const_iterator"/>
    <type name="edm::IDVectorMap&lt;ID, C, P&gt;::id_iterator"/>
    <type name="edm::IDVectorMap&lt;ID, C, P&gt;::match_iterator&lt;M&gt;"/>
    <type name="edm::IDVectorMap&lt;ID, C, P&gt;::range"/>
    <type name="id_iterator"/>
    <type name="id_iterator&amp;"/>
    <type name="int"/>
    <type name="map_iterator"/>
    <type name="match_iterator"/>
    <type name="match_iterator&amp;"/>
    <type name="range"/>
    <type name="size_t"/>
    <type name="template&lt;typename CI&gt; void"/>
    <type name="template&lt;typename M&gt; match_iterator&lt;M&gt;"/>
    <type name="void"/>
</header>
