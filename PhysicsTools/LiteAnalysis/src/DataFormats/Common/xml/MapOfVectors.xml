<?xml version="1.0"?>
<!--
==============================================================================
  XML File: MapOfVectors.xml
  Created:  Fri Jan 15 20:45:39 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/MapOfVectors.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/MapOfVectors.h">

    <include name="&lt;vector&gt;"/>
    <include name="&lt;map&gt;"/>
    <include name="&lt;boost/range/iterator_range.hpp&gt;"/>
    <include name="&lt;boost/range/functions.hpp&gt;"/>
    <include name="&lt;boost/iterator/iterator_facade.hpp&gt;"/>

    <namespace name="edm">

        <class name="MapOfVectors"
               fullname="edm::MapOfVectors&lt;K, T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename K, typename T&gt;">
            <comment>
     a linearized read-only map-of vectors
            </comment>

            <section name="public">
                <typedef name="self"
                         value="MapOfVectors&lt;K, T&gt;">
typedef MapOfVectors&lt;K, T&gt; self;
                </typedef>

                <typedef name="TheMap"
                         value="std::map&lt;K, std::vector&lt;T&gt; &gt;">
typedef std::map&lt;K, std::vector&lt;T&gt; &gt; TheMap;
                </typedef>

                <typedef name="size_type"
                         value="unsigned int">
typedef unsigned int size_type;
                </typedef>

                <typedef name="Keys"
                         value="std::vector&lt;K&gt;">
typedef std::vector&lt;K&gt; Keys;
                </typedef>

                <typedef name="Offsets"
                         value="std::vector&lt;size_type&gt;">
typedef std::vector&lt;size_type&gt; Offsets;
                </typedef>

                <typedef name="Data"
                         value="std::vector&lt;T&gt;">
typedef std::vector&lt;T&gt; Data;
                </typedef>

                <typedef name="key_iterator"
                         value="typename Keys::const_iterator">
typedef typename Keys::const_iterator key_iterator;
                </typedef>

                <typedef name="offset_iterator"
                         value="Offsets::const_iterator">
typedef Offsets::const_iterator offset_iterator;
                </typedef>

                <typedef name="data_iterator"
                         value="typename Data::const_iterator">
typedef typename Data::const_iterator data_iterator;
                </typedef>

                <typedef name="range"
                         value="boost::iterator_range&lt;data_iterator&gt;">
typedef boost::iterator_range&lt;data_iterator&gt; range;
                </typedef>

                <typedef name="Pair"
                         value="std::pair&lt;K, range&gt;">
typedef std::pair&lt;K, range&gt; Pair;
                </typedef>


                <class name="Iter"
                       fullname="edm::MapOfVectors&lt;K, T&gt;::Iter"
                       module="DataFormats.Common"
                       project=""
                       type="regular">
                    <baseclass name="public boost::iterator_facade&lt;Iter, 
          Pair const, 
          boost::forward_traversal_tag &gt;"/>

                    <section name="public">
                        <typedef name="self"
                                 value="Iter">
typedef Iter self;
                        </typedef>

                        <constructor name="Iter"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
Iter();
                        </constructor>

                        <constructor name="Iter"
                                     return="explicit"
                                     args="['key_iterator','offset_iterator','std::vector&lt;T&gt; const&amp;']"
                                     vars="['k','o','d']"
                                     qual="">
explicit Iter(key_iterator k, offset_iterator o, std::vector&lt;T&gt; const&amp; d);
                        </constructor>

                    </section>

                    <typemap name="Iter"
                             value="edm::MapOfVectors&lt;K, T&gt;::Iter"
                             type="class"/>
                    <typemap name="self"
                             value="Iter"
                             type="typedef"/>

                </class>
                <typedef name="const_iterator"
                         value="Iter">
typedef Iter const_iterator;
                </typedef>

                <method1 name="emptyRange"
                         return="range"
                         args="['void']"
                         vars="['']"
                         qual="const">
range emptyRange() const;
                </method1>

                <constructor name="MapOfVectors"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
MapOfVectors();
                </constructor>

                <constructor name="MapOfVectors"
                             return=""
                             args="['TheMap const&amp;']"
                             vars="['it']"
                             qual="">
MapOfVectors(TheMap const&amp; it);
                </constructor>

                <method2 name="loadNext"
                         return="void"
                         args="['K const&amp;','std::vector&lt;T&gt; const&amp;']"
                         vars="['k','v']"
                         qual="">
void loadNext(K const&amp; k, std::vector&lt;T&gt; const&amp; v);
                </method2>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <method1 name="findKey"
                         return="key_iterator"
                         args="['K const&amp;']"
                         vars="['k']"
                         qual="const">
key_iterator findKey(K const&amp; k) const;
                </method1>

                <method1 name="offset"
                         return="size_type"
                         args="['K const&amp;']"
                         vars="['k']"
                         qual="const">
size_type offset(K const&amp; k) const;
                </method1>

                <method1 name="find"
                         return="range"
                         args="['K const&amp;']"
                         vars="['k']"
                         qual="const">
range find(K const&amp; k) const;
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="swap"
                         return="void"
                         args="['MapOfVectors&amp;']"
                         vars="['other']"
                         qual="">
void swap(MapOfVectors&amp; other);
                </method1>

                <operator name="operator="
                          return="MapOfVectors&amp;"
                          args="['MapOfVectors const&amp;']"
                          vars="['rhs']"
                          qual="">
MapOfVectors&amp; operator=(MapOfVectors const&amp; rhs);
                </operator>

            </section>

            <typemap name="Data"
                     value="std::vector&lt;T&gt;"
                     type="typedef"/>
            <typemap name="Keys"
                     value="std::vector&lt;K&gt;"
                     type="typedef"/>
            <typemap name="Offsets"
                     value="std::vector&lt;unsigned int&gt;"
                     type="typedef"/>
            <typemap name="Pair"
                     value="typename std::pair&lt;K, boost::iterator_range&lt;typename std::vector&lt;T&gt;::const_iterator&gt; &gt;"
                     type="typedef"/>
            <typemap name="TheMap"
                     value="std::map&lt;K, std::vector&lt;T&gt; &gt;"
                     type="typedef"/>
            <typemap name="const_iterator"
                     value="Iter"
                     type="typedef"/>
            <typemap name="data_iterator"
                     value="typename std::vector&lt;T&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="key_iterator"
                     value="typename std::vector&lt;K&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="offset_iterator"
                     value="std::vector&lt;unsigned int&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="range"
                     value="typename boost::iterator_range&lt;typename std::vector&lt;T&gt;::const_iterator&gt;"
                     type="typedef"/>
            <typemap name="self"
                     value="MapOfVectors&lt;K, T&gt;"
                     type="typedef"/>
            <typemap name="size_type"
                     value="unsigned int"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="MapOfVectors const&amp;"/>
    <type name="MapOfVectors&amp;"/>
    <type name="TheMap const&amp;"/>
    <type name="bool"/>
    <type name="boost::iterator_facade&lt;Iter, Pair const, boost::forward_traversal_tag &gt;"/>
    <type name="const_iterator"/>
    <type name="edm::MapOfVectors&lt;K, T&gt;"/>
    <type name="edm::MapOfVectors&lt;K, T&gt;::Iter"/>
    <type name="key_iterator"/>
    <type name="offset_iterator"/>
    <type name="range"/>
    <type name="size_type"/>
    <type name="std::vector&lt;T&gt; const&amp;"/>
    <type name="void"/>
</header>
