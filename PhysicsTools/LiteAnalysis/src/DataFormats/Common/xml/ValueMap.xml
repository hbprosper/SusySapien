<?xml version="1.0"?>
<!--
==============================================================================
  XML File: ValueMap.xml
  Created:  Thu Jan 14 22:46:30 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/ValueMap.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/ValueMap.h">

    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;map&gt;"/>
    <include name="&lt;iterator&gt;"/>

    <namespace name="edm">

        <namespace name="helper">

            <class name="Filler"
                   fullname="edm::helper::Filler&lt;Map&gt;"
                   module="DataFormats.Common"
                   project=""
                   type="template"
                   template="template&lt;typename Map&gt;">

                <section name="public">
                    <constructor name="Filler"
                                 return="explicit"
                                 args="['Map&amp;']"
                                 vars="['map']"
                                 qual="">
explicit Filler(Map&amp; map);
                    </constructor>

                    <method1 name="add"
                             return="void"
                             args="['const Map&amp;']"
                             vars="['map']"
                             qual="">
void add(const Map&amp; map);
                    </method1>

                    <method2 name="insert"
                             return="template&lt;typename H, typename I&gt; void"
                             args="['const H&amp;','I','I']"
                             vars="['h','begin','end']"
                             qual="">
template&lt;typename H, typename I&gt;       void insert(const H&amp; h, I begin, I end);
                    </method2>

                    <method1 name="fill"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void fill();
                    </method1>

                </section>

            </class>
        </namespace>

        <class name="ValueMap"
               fullname="edm::ValueMap&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">

            <section name="public">
                <typedef name="value_type"
                         value="T">
typedef T value_type;
                </typedef>

                <typedef name="container"
                         value="std::vector&lt;value_type&gt;">
typedef std::vector&lt;value_type&gt; container;
                </typedef>

                <typedef name="offset"
                         value="unsigned int">
typedef unsigned int offset;
                </typedef>

                <typedef name="id_offset_vector"
                         value="std::vector&lt;std::pair&lt;ProductID, offset&gt; &gt;">
typedef std::vector&lt;std::pair&lt;ProductID, offset&gt; &gt; id_offset_vector;
                </typedef>

                <typedef name="reference_type"
                         value="typename container::reference">
typedef typename container::reference reference_type;
                </typedef>

                <typedef name="const_reference_type"
                         value="typename container::const_reference">
typedef typename container::const_reference const_reference_type;
                </typedef>

                <constructor name="ValueMap"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
ValueMap();
                </constructor>

                <method1 name="swap"
                         return="void"
                         args="['ValueMap&amp;']"
                         vars="['other']"
                         qual="">
void swap(ValueMap&amp; other);
                </method1>

                <operator name="operator="
                          return="ValueMap&amp;"
                          args="['ValueMap const&amp;']"
                          vars="['rhs']"
                          qual="">
ValueMap&amp; operator=(ValueMap const&amp; rhs);
                </operator>

                <operator name="operator[]"
                          return="template&lt;typename RefKey&gt; const_reference_type"
                          args="['const RefKey&amp;']"
                          vars="['r']"
                          qual="const">
template&lt;typename RefKey&gt;     const_reference_type operator[](const RefKey&amp; r) const;
                </operator>

                <method1 name="rawIndexOf"
                         return="size_t"
                         args="['ProductID','size_t']"
                         vars="['id','idx']"
                         qual="const">
size_t rawIndexOf(ProductID id, size_t idx) const;
                    <comment>
       raw index of a given (id,key) pair
                    </comment>
                </method1>

                <method1 name="get"
                         return="const_reference_type"
                         args="['ProductID','size_t']"
                         vars="['id','idx']"
                         qual="const">
const_reference_type get(ProductID id, size_t idx) const;
                </method1>

                <operator name="operator[]"
                          return="template&lt;typename RefKey&gt; reference_type"
                          args="['const RefKey&amp;']"
                          vars="['r']"
                          qual="">
template&lt;typename RefKey&gt;     reference_type operator[](const RefKey&amp; r);
                </operator>

                <method1 name="get"
                         return="reference_type"
                         args="['ProductID','size_t']"
                         vars="['id','idx']"
                         qual="">
reference_type get(ProductID id, size_t idx);
                </method1>

                <operator name="operator+="
                          return="ValueMap&lt;T&gt;&amp;"
                          args="['const ValueMap&lt;T&gt;&amp;']"
                          vars="['o']"
                          qual="">
ValueMap&lt;T&gt;&amp; operator+=(const ValueMap&lt;T&gt;&amp; o);
                </operator>

                <method1 name="contains"
                         return="bool"
                         args="['ProductID']"
                         vars="['id']"
                         qual="const">
bool contains(ProductID id) const;
                </method1>

                <method1 name="size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t size() const;
                </method1>

                <method1 name="idSize"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t idSize() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

                <typedef name="Filler"
                         value="helper::Filler&lt;ValueMap&lt;T&gt; &gt;">
typedef helper::Filler&lt;ValueMap&lt;T&gt; &gt; Filler;
                </typedef>


                <class name="const_iterator"
                       fullname="edm::ValueMap&lt;T&gt;::const_iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct privatector">

                    <section>
                        <typedef name="difference_type"
                                 value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                        </typedef>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
const_iterator();
                        </constructor>

                        <method1 name="id"
                                 return="ProductID"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
ProductID id() const;
                        </method1>

                        <method1 name="begin"
                                 return="typename container::const_iterator"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
typename container::const_iterator begin() const;
                        </method1>

                        <method1 name="end"
                                 return="typename container::const_iterator"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
typename container::const_iterator end() const;
                        </method1>

                        <method1 name="size"
                                 return="size_t"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
size_t size() const;
                        </method1>

                        <operator name="operator[]"
                                  return="const T&amp;"
                                  args="['size_t']"
                                  vars="['i']"
                                  qual="">
const T&amp; operator[](size_t i);
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator--(int);
                        </operator>

                        <operator name="operator-"
                                  return="difference_type"
                                  args="['const const_iterator&amp;']"
                                  vars="['o']"
                                  qual="const">
difference_type operator-(const const_iterator&amp; o) const;
                        </operator>

                        <operator name="operator+"
                                  return="const_iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
const_iterator operator+(difference_type n) const;
                        </operator>

                        <operator name="operator-"
                                  return="const_iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
const_iterator operator-(difference_type n) const;
                        </operator>

                        <operator name="operator&lt;"
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['o']"
                                  qual="const">
bool operator&lt;(const const_iterator&amp; o) const;
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const const_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const const_iterator&amp; ci) const;
                        </operator>

                        <operator name="operator+="
                                  return="const_iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
const_iterator&amp; operator+=(difference_type d);
                        </operator>

                        <operator name="operator-="
                                  return="const_iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
const_iterator&amp; operator-=(difference_type d);
                        </operator>

                    </section>
                    <section name="private">
                        <constant name="values_"
                                  type="const container*"
                                  value=""/>
                    </section>

                    <typemap name="const_iterator"
                             value="edm::ValueMap&lt;T&gt;::const_iterator"
                             type="class"/>
                    <typemap name="difference_type"
                             value="ptrdiff_t"
                             type="typedef"/>

                </class>
                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="ids"
                         return="const id_offset_vector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const id_offset_vector&amp; ids() const;
                    <comment>
        meant to be used in AssociativeIterator, not by the ordinary user
                    </comment>
                </method1>

                <method1 name="get"
                         return="const_reference_type"
                         args="['size_t']"
                         vars="['idx']"
                         qual="const">
const_reference_type get(size_t idx) const;
                    <comment>
        meant to be used in AssociativeIterator, not by the ordinary user
                    </comment>
                </method1>

            </section>
            <section name="private">

                <class name="IDComparator"
                       fullname="edm::ValueMap&lt;T&gt;::IDComparator"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">


                    <typemap name="IDComparator"
                             value="edm::ValueMap&lt;T&gt;::IDComparator"
                             type="class"/>

                </class>
            </section>

            <typemap name="Filler"
                     value="helper::Filler&lt;ValueMap&lt;T&gt; &gt;"
                     type="typedef"/>
            <typemap name="const_reference_type"
                     value="typename std::vector&lt;T&gt;::const_reference"
                     type="typedef"/>
            <typemap name="container"
                     value="std::vector&lt;T&gt;"
                     type="typedef"/>
            <typemap name="id_offset_vector"
                     value="std::vector&lt;std::pair&lt;ProductID, unsigned int&gt; &gt;"
                     type="typedef"/>
            <typemap name="offset"
                     value="unsigned int"
                     type="typedef"/>
            <typemap name="reference_type"
                     value="typename std::vector&lt;T&gt;::reference"
                     type="typedef"/>
            <typemap name="value_type"
                     value="T"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="ProductID"/>
    <type name="ValueMap const&amp;"/>
    <type name="ValueMap&amp;"/>
    <type name="ValueMap&lt;T&gt;&amp;"/>
    <type name="bool"/>
    <type name="const ValueMap&lt;T&gt;&amp;"/>
    <type name="const const_iterator&amp;"/>
    <type name="const id_offset_vector&amp;"/>
    <type name="const_iterator"/>
    <type name="const_iterator&amp;"/>
    <type name="const_reference_type"/>
    <type name="difference_type"/>
    <type name="edm::ValueMap&lt;T&gt;"/>
    <type name="edm::ValueMap&lt;T&gt;::IDComparator"/>
    <type name="edm::ValueMap&lt;T&gt;::const_iterator"/>
    <type name="edm::helper::Filler&lt;Map&gt;"/>
    <type name="int"/>
    <type name="reference_type"/>
    <type name="size_t"/>
    <type name="template&lt;typename H, typename I&gt; void"/>
    <type name="template&lt;typename RefKey&gt; const_reference_type"/>
    <type name="template&lt;typename RefKey&gt; reference_type"/>
    <type name="typename container::const_iterator"/>
    <type name="void"/>
</header>
