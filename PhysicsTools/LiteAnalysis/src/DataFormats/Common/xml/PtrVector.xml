<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PtrVector.xml
  Created:  Thu Jan 14 22:46:14 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/PtrVector.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/PtrVector.h">

    <include name="&quot;boost/iterator.hpp&quot;"/>
    <include name="&quot;boost/static_assert.hpp&quot;"/>
    <include name="&quot;boost/type_traits/is_base_of.hpp&quot;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/Common/interface/Ptr.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/PtrVectorBase.h&quot;"/>

    <namespace name="edm">
        <comment>
   forward declarations
        </comment>
        <forward name="template&lt;typename T&gt; PtrVector"/>

        <class name="PtrHolder"
               fullname="edm::PtrHolder&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">

            <section name="public">
                <constructor name="PtrHolder"
                             return=""
                             args="['Ptr&lt;T&gt; const&amp;']"
                             vars="['iPtr']"
                             qual="">
PtrHolder(Ptr&lt;T&gt; const&amp; iPtr);
                </constructor>

                <operator name="operator*"
                          return="Ptr&lt;T&gt; const&amp;"
                          args="['void']"
                          vars="['']"
                          qual="const">
Ptr&lt;T&gt; const&amp; operator*() const;
                </operator>

                <operator name="operator-&gt;"
                          return="Ptr&lt;T&gt; const*"
                          args="['void']"
                          vars="['']"
                          qual="const">
Ptr&lt;T&gt; const* operator-&gt;() const;
                </operator>

            </section>

        </class>

        <class name="PtrVectorItr"
               fullname="edm::PtrVectorItr&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">
            <baseclass name="public std::iterator&lt;std::random_access_iterator_tag, Ptr&lt;T&gt; &gt;"/>

            <section name="public">
                <typedef name="reference"
                         value="Ptr&lt;T&gt; const">
typedef Ptr&lt;T&gt; const reference;
                </typedef>

                <typedef name="iterator"
                         value="PtrVectorItr&lt;T&gt;">
typedef PtrVectorItr&lt;T&gt; iterator;
                    <comment>
                                       const, because this is a const_iterator
                    </comment>
                </typedef>

                <typedef name="difference_type"
                         value="typename std::iterator&lt;std::random_access_iterator_tag, Ptr&lt;T&gt; &gt;::difference_type">
typedef typename std::iterator&lt;std::random_access_iterator_tag, Ptr&lt;T&gt; &gt;::difference_type difference_type;
                </typedef>

                <constructor name="PtrVectorItr"
                             return=""
                             args="['std::vector&lt;void const*&gt;::const_iterator const&amp;','PtrVector&lt;T&gt; const*']"
                             vars="['iItr','iBase']"
                             qual="">
PtrVectorItr(std::vector&lt;void const*&gt;::const_iterator const&amp; iItr, PtrVector&lt;T&gt; const* iBase);
                </constructor>

                <operator name="operator*"
                          return="Ptr&lt;T&gt; const"
                          args="['void']"
                          vars="['']"
                          qual="const">
Ptr&lt;T&gt; const operator*() const;
                </operator>

                <operator name="operator[]"
                          return="Ptr&lt;T&gt; const"
                          args="['difference_type']"
                          vars="['n']"
                          qual="const">
Ptr&lt;T&gt; const operator[](difference_type n) const;
                </operator>

                <operator name="operator-&gt;"
                          return="PtrHolder&lt;T&gt;"
                          args="['void']"
                          vars="['']"
                          qual="const">
PtrHolder&lt;T&gt; operator-&gt;() const;
                </operator>

                <operator name="operator++"
                          return="iterator&amp;"
                          args="['void']"
                          vars="['']"
                          qual="">
iterator&amp; operator++();
                </operator>

                <operator name="operator--"
                          return="iterator&amp;"
                          args="['void']"
                          vars="['']"
                          qual="">
iterator&amp; operator--();
                </operator>

                <operator name="operator+="
                          return="iterator&amp;"
                          args="['difference_type']"
                          vars="['n']"
                          qual="">
iterator&amp; operator+=(difference_type n);
                </operator>

                <operator name="operator-="
                          return="iterator&amp;"
                          args="['difference_type']"
                          vars="['n']"
                          qual="">
iterator&amp; operator-=(difference_type n);
                </operator>

                <operator name="operator++"
                          return="iterator"
                          args="['int']"
                          vars="['']"
                          qual="">
iterator operator++(int);
                </operator>

                <operator name="operator--"
                          return="iterator"
                          args="['int']"
                          vars="['']"
                          qual="">
iterator operator--(int);
                </operator>

                <operator name="operator+"
                          return="iterator"
                          args="['difference_type']"
                          vars="['n']"
                          qual="const">
iterator operator+(difference_type n) const;
                </operator>

                <operator name="operator-"
                          return="iterator"
                          args="['difference_type']"
                          vars="['n']"
                          qual="const">
iterator operator-(difference_type n) const;
                </operator>

                <operator name="operator-"
                          return="difference_type"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
difference_type operator-(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator=="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator==(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator!="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator!=(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&lt;"
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&lt;(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&gt;"
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&gt;(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&lt;="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&lt;=(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&gt;="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&gt;=(iterator const&amp; rhs) const;
                </operator>

            </section>

            <typemap name="difference_type"
                     value="typename std::iterator&lt;std::random_access_iterator_tag, Ptr&lt;T&gt; &gt;::difference_type"
                     type="typedef"/>
            <typemap name="iterator"
                     value="PtrVectorItr&lt;T&gt;"
                     type="typedef"/>
            <typemap name="reference"
                     value="Ptr&lt;T&gt; const"
                     type="typedef"/>

        </class>

        <class name="PtrVector"
               fullname="edm::PtrVector&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">
            <baseclass name="public PtrVectorBase"/>

            <section name="public">
                <typedef name="const_iterator"
                         value="PtrVectorItr&lt;T&gt;">
typedef PtrVectorItr&lt;T&gt; const_iterator;
                </typedef>

                <typedef name="iterator"
                         value="PtrVectorItr&lt;T&gt;">
typedef PtrVectorItr&lt;T&gt; iterator;
                </typedef>

                <typedef name="value_type"
                         value="Ptr&lt;T&gt;">
typedef Ptr&lt;T&gt; value_type;
                </typedef>

                <friend>
friend class PtrVectorItr&lt;T&gt;;
                </friend>

                <constructor name="PtrVector"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PtrVector();
                </constructor>

                <copyconstructor name="PtrVector"
                                 return=""
                                 args="['PtrVector&lt;T&gt; const&amp;']"
                                 vars="['iOther']"
                                 qual="">
PtrVector(PtrVector&lt;T&gt; const&amp; iOther);
                </copyconstructor>

                <method2 name="PtrVector"
                         return="template&lt;typename U&gt;"
                         args="['PtrVector&lt;U&gt; const&amp;']"
                         vars="['iOther']"
                         qual="">
template&lt;typename U&gt;     PtrVector(PtrVector&lt;U&gt; const&amp; iOther);
                </method2>

                <operator name="operator[]"
                          return="Ptr&lt;T&gt;"
                          args="['unsigned long const']"
                          vars="['iIndex']"
                          qual="const">
Ptr&lt;T&gt; operator[](unsigned long const iIndex) const;
                    <comment>
       ---------- const member functions ---------------------
                    </comment>
                </operator>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method2 name="push_back"
                         return="void"
                         args="['Ptr&lt;T&gt; const&amp;']"
                         vars="['iPtr']"
                         qual="">
void push_back(Ptr&lt;T&gt; const&amp; iPtr);
                    <comment>
       ---------- member functions ---------------------------
                    </comment>
                </method2>

                <method2 name="push_back"
                         return="template&lt;typename U&gt; void"
                         args="['Ptr&lt;U&gt; const&amp;']"
                         vars="['iPtr']"
                         qual="">
template&lt;typename U&gt;     void push_back(Ptr&lt;U&gt; const&amp; iPtr);
                </method2>

                <method1 name="swap"
                         return="void"
                         args="['PtrVector&amp;']"
                         vars="['other']"
                         qual="">
void swap(PtrVector&amp; other);
                </method1>

                <operator name="operator="
                          return="PtrVector&amp;"
                          args="['PtrVector const&amp;']"
                          vars="['rhs']"
                          qual="">
PtrVector&amp; operator=(PtrVector const&amp; rhs);
                </operator>

            </section>

            <typemap name="const_iterator"
                     value="PtrVectorItr&lt;T&gt;"
                     type="typedef"/>
            <typemap name="iterator"
                     value="PtrVectorItr&lt;T&gt;"
                     type="typedef"/>
            <typemap name="value_type"
                     value="Ptr&lt;T&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Ptr&lt;T&gt;"/>
    <type name="Ptr&lt;T&gt; const"/>
    <type name="Ptr&lt;T&gt; const&amp;"/>
    <type name="Ptr&lt;T&gt; const*"/>
    <type name="Ptr&lt;U&gt; const&amp;"/>
    <type name="PtrHolder&lt;T&gt;"/>
    <type name="PtrVector const&amp;"/>
    <type name="PtrVector&amp;"/>
    <type name="PtrVector&lt;T&gt; const&amp;"/>
    <type name="PtrVector&lt;T&gt; const*"/>
    <type name="PtrVector&lt;U&gt; const&amp;"/>
    <type name="PtrVectorBase"/>
    <type name="bool"/>
    <type name="const_iterator"/>
    <type name="difference_type"/>
    <type name="edm::PtrHolder&lt;T&gt;"/>
    <type name="edm::PtrVector&lt;T&gt;"/>
    <type name="edm::PtrVectorItr&lt;T&gt;"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="iterator const&amp;"/>
    <type name="iterator&amp;"/>
    <type name="std::iterator&lt;std::random_access_iterator_tag, Ptr&lt;T&gt; &gt;"/>
    <type name="std::vector&lt;void const*&gt;::const_iterator const&amp;"/>
    <type name="template&lt;typename U&gt;"/>
    <type name="template&lt;typename U&gt; void"/>
    <type name="unsigned long const"/>
    <type name="void"/>
</header>
