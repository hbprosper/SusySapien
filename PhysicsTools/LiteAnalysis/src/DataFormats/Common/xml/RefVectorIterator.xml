<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefVectorIterator.xml
  Created:  Thu Jan 14 22:46:26 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefVectorIterator.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/RefVectorIterator.h">

    <include name="&lt;memory&gt;"/>
    <include name="&quot;DataFormats/Common/interface/RefItem.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefCore.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>

    <namespace name="edm">

        <class name="RefVectorIterator"
               fullname="edm::RefVectorIterator&lt;C, T, F&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename C, typename T=typename Ref&lt;C&gt;::value_type, typename F=typename Ref&lt;C&gt;::finder_type&gt;">
            <baseclass name="public std::iterator&lt;std::random_access_iterator_tag, Ref&lt;C, T, F&gt; &gt;"/>

            <section name="public">
                <typedef name="value_type"
                         value="Ref&lt;C, T, F&gt;">
typedef Ref&lt;C, T, F&gt; value_type;
                </typedef>

                <typedef name="const_reference"
                         value="Ref&lt;C, T, F&gt; const">
typedef Ref&lt;C, T, F&gt; const const_reference;
                </typedef>

                <typedef name="reference"
                         value="const_reference">
typedef const_reference reference;
                </typedef>

                <typedef name="key_type"
                         value="typename value_type::key_type">
typedef typename value_type::key_type key_type;
                    <comment>
                                                    through this iterator
                    </comment>
                </typedef>

                <typedef name="iterator"
                         value="RefVectorIterator&lt;C, T, F&gt;">
typedef RefVectorIterator&lt;C, T, F&gt; iterator;
                </typedef>

                <typedef name="difference"
                         value="std::ptrdiff_t">
typedef std::ptrdiff_t difference;
                </typedef>

                <typedef name="itemIter"
                         value="typename std::vector&lt;RefItem&lt;key_type&gt; &gt;::const_iterator">
typedef typename std::vector&lt;RefItem&lt;key_type&gt; &gt;::const_iterator itemIter;
                </typedef>

                <constructor name="RefVectorIterator"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RefVectorIterator();
                </constructor>

                <constructor name="RefVectorIterator"
                             return="explicit"
                             args="['RefCore const&amp;','itemIter const&amp;']"
                             vars="['product','it']"
                             qual="">
explicit RefVectorIterator(RefCore const&amp; product, itemIter const&amp; it);
                </constructor>

                <operator name="operator*"
                          return="reference"
                          args="['void']"
                          vars="['']"
                          qual="const">
reference operator*() const;
                </operator>

                <operator name="operator[]"
                          return="reference"
                          args="['difference']"
                          vars="['n']"
                          qual="const">
reference operator[](difference n) const;
                </operator>

                <operator name="operator-&gt;"
                          return="std::auto_ptr&lt;value_type&gt;"
                          args="['void']"
                          vars="['']"
                          qual="const">
std::auto_ptr&lt;value_type&gt; operator-&gt;() const;
                </operator>

                <operator name="operator++"
                          return="iterator&amp;"
                          args="['void']"
                          vars="['']"
                          qual="">
iterator&amp; operator++();
                </operator>

                <operator name="operator--"
                          return="iterator&amp;"
                          args="['void']"
                          vars="['']"
                          qual="">
iterator&amp; operator--();
                </operator>

                <operator name="operator+="
                          return="iterator&amp;"
                          args="['difference']"
                          vars="['n']"
                          qual="">
iterator&amp; operator+=(difference n);
                </operator>

                <operator name="operator-="
                          return="iterator&amp;"
                          args="['difference']"
                          vars="['n']"
                          qual="">
iterator&amp; operator-=(difference n);
                </operator>

                <operator name="operator++"
                          return="iterator"
                          args="['int']"
                          vars="['']"
                          qual="">
iterator operator++(int);
                </operator>

                <operator name="operator--"
                          return="iterator"
                          args="['int']"
                          vars="['']"
                          qual="">
iterator operator--(int);
                </operator>

                <operator name="operator+"
                          return="iterator"
                          args="['difference']"
                          vars="['n']"
                          qual="const">
iterator operator+(difference n) const;
                </operator>

                <operator name="operator-"
                          return="iterator"
                          args="['difference']"
                          vars="['n']"
                          qual="const">
iterator operator-(difference n) const;
                </operator>

                <operator name="operator-"
                          return="difference"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
difference operator-(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator=="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator==(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator!="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator!=(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&lt;"
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&lt;(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&gt;"
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&gt;(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&lt;="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&lt;=(iterator const&amp; rhs) const;
                </operator>

                <operator name="operator&gt;="
                          return="bool"
                          args="['iterator const&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator&gt;=(iterator const&amp; rhs) const;
                </operator>

            </section>

            <typemap name="const_reference"
                     value="Ref&lt;C, T, F&gt; const"
                     type="typedef"/>
            <typemap name="difference"
                     value="std::ptrdiff_t"
                     type="typedef"/>
            <typemap name="itemIter"
                     value="typename std::vector&lt;RefItem&lt;typename Ref&lt;C, T, F&gt;::key_type&gt; &gt;::const_iterator"
                     type="typedef"/>
            <typemap name="iterator"
                     value="RefVectorIterator&lt;C, T, F&gt;"
                     type="typedef"/>
            <typemap name="key_type"
                     value="typename Ref&lt;C, T, F&gt;::key_type"
                     type="typedef"/>
            <typemap name="reference"
                     value="Ref&lt;C, T, F&gt; const"
                     type="typedef"/>
            <typemap name="value_type"
                     value="Ref&lt;C, T, F&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="RefCore const&amp;"/>
    <type name="bool"/>
    <type name="difference"/>
    <type name="edm::RefVectorIterator&lt;C, T, F&gt;"/>
    <type name="int"/>
    <type name="itemIter const&amp;"/>
    <type name="iterator"/>
    <type name="iterator const&amp;"/>
    <type name="iterator&amp;"/>
    <type name="reference"/>
    <type name="std::auto_ptr&lt;value_type&gt;"/>
    <type name="std::iterator&lt;std::random_access_iterator_tag, Ref&lt;C, T, F&gt; &gt;"/>
    <type name="void"/>
</header>
