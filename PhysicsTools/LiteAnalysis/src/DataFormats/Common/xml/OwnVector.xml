<?xml version="1.0"?>
<!--
==============================================================================
  XML File: OwnVector.xml
  Created:  Fri Jan 15 20:45:45 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/OwnVector.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/OwnVector.h">

    <include name="&lt;algorithm&gt;"/>
    <include name="&lt;functional&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/Common/interface/EDProduct.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ClonePolicy.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/PostReadFixupTrait.h&quot;"/>

    <namespace name="edm">

        <class name="OwnVector"
               fullname="edm::OwnVector&lt;T, P&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T, typename P=ClonePolicy&lt;T&gt; &gt;">

            <section name="public">
                <typedef name="size_type"
                         value="typename base::size_type">
typedef typename base::size_type size_type;
                </typedef>

                <typedef name="value_type"
                         value="T">
typedef T value_type;
                </typedef>

                <typedef name="pointer"
                         value="T*">
typedef T* pointer;
                </typedef>

                <typedef name="reference"
                         value="T&amp;">
typedef T&amp; reference;
                </typedef>

                <typedef name="const_reference"
                         value="T const&amp;">
typedef T const&amp; const_reference;
                </typedef>

                <typedef name="policy_type"
                         value="P">
typedef P policy_type;
                </typedef>

                <forward name="iterator"/>

                <class name="const_iterator"
                       fullname="edm::OwnVector&lt;T, P&gt;::const_iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular">

                    <section name="public">
                        <typedef name="value_type"
                                 value="T">
typedef T value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="T*">
typedef T* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="T const&amp;">
typedef T const&amp; reference;
                        </typedef>

                        <typedef name="difference_type"
                                 value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename base::const_iterator::iterator_category">
typedef typename base::const_iterator::iterator_category iterator_category;
                        </typedef>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['typename base::const_iterator const&amp;']"
                                     vars="['it']"
                                     qual="">
const_iterator(typename base::const_iterator const&amp; it);
                        </constructor>

                        <copyconstructor name="const_iterator"
                                         return=""
                                         args="['const_iterator const&amp;']"
                                         vars="['it']"
                                         qual="">
const_iterator(const_iterator const&amp; it);
                        </copyconstructor>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['iterator const&amp;']"
                                     vars="['it']"
                                     qual="">
const_iterator(iterator const&amp; it);
                        </constructor>

                        <constructor name="const_iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
const_iterator();
                        </constructor>

                        <operator name="operator="
                                  return="const_iterator&amp;"
                                  args="['const_iterator const&amp;']"
                                  vars="['it']"
                                  qual="">
const_iterator&amp; operator=(const_iterator const&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const_iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="const_iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
const_iterator operator--(int);
                        </operator>

                        <operator name="operator-"
                                  return="difference_type"
                                  args="['const_iterator const&amp;']"
                                  vars="['o']"
                                  qual="const">
difference_type operator-(const_iterator const&amp; o) const;
                        </operator>

                        <operator name="operator+"
                                  return="const_iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
const_iterator operator+(difference_type n) const;
                        </operator>

                        <operator name="operator-"
                                  return="const_iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
const_iterator operator-(difference_type n) const;
                        </operator>

                        <operator name="operator&lt;"
                                  return="bool"
                                  args="['const_iterator const&amp;']"
                                  vars="['o']"
                                  qual="const">
bool operator&lt;(const_iterator const&amp; o) const;
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['const_iterator const&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(const_iterator const&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const_iterator const&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(const_iterator const&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="T const&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
T const&amp; operator*() const;
                        </operator>

                        <operator name="operator-&gt;"
                                  return="T const*"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
T const* operator-&gt;() const;
                            <comment>
            operator T const*() const { return &amp; **i; }
                            </comment>
                        </operator>

                        <operator name="operator+="
                                  return="const_iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
const_iterator&amp; operator+=(difference_type d);
                        </operator>

                        <operator name="operator-="
                                  return="const_iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
const_iterator&amp; operator-=(difference_type d);
                        </operator>

                        <operator name="operator[]"
                                  return="reference"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="const">
reference operator[](difference_type d) const;
                        </operator>

                    </section>

                    <typemap name="const_iterator"
                             value="edm::OwnVector&lt;T, P&gt;::const_iterator"
                             type="class"/>
                    <typemap name="difference_type"
                             value="ptrdiff_t"
                             type="typedef"/>
                    <typemap name="iterator_category"
                             value="typename base::const_iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="pointer"
                             value="T*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="T const&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="T"
                             type="typedef"/>

                </class>

                <class name="iterator"
                       fullname="edm::OwnVector&lt;T, P&gt;::iterator"
                       module="DataFormats.Common"
                       project=""
                       type="regular">

                    <section name="public">
                        <typedef name="value_type"
                                 value="T">
typedef T value_type;
                        </typedef>

                        <typedef name="pointer"
                                 value="T*">
typedef T* pointer;
                        </typedef>

                        <typedef name="reference"
                                 value="T&amp;">
typedef T&amp; reference;
                        </typedef>

                        <typedef name="difference_type"
                                 value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                        </typedef>

                        <typedef name="iterator_category"
                                 value="typename base::iterator::iterator_category">
typedef typename base::iterator::iterator_category iterator_category;
                        </typedef>

                        <constructor name="iterator"
                                     return=""
                                     args="['typename base::iterator const&amp;']"
                                     vars="['it']"
                                     qual="">
iterator(typename base::iterator const&amp; it);
                        </constructor>

                        <copyconstructor name="iterator"
                                         return=""
                                         args="['iterator const&amp;']"
                                         vars="['it']"
                                         qual="">
iterator(iterator const&amp; it);
                        </copyconstructor>

                        <constructor name="iterator"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
iterator();
                        </constructor>

                        <operator name="operator="
                                  return="iterator&amp;"
                                  args="['iterator const&amp;']"
                                  vars="['it']"
                                  qual="">
iterator&amp; operator=(iterator const&amp; it);
                        </operator>

                        <operator name="operator++"
                                  return="iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
iterator&amp; operator++();
                        </operator>

                        <operator name="operator++"
                                  return="iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
iterator operator++(int);
                        </operator>

                        <operator name="operator--"
                                  return="iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
iterator&amp; operator--();
                        </operator>

                        <operator name="operator--"
                                  return="iterator"
                                  args="['int']"
                                  vars="['']"
                                  qual="">
iterator operator--(int);
                        </operator>

                        <operator name="operator-"
                                  return="difference_type"
                                  args="['iterator const&amp;']"
                                  vars="['o']"
                                  qual="const">
difference_type operator-(iterator const&amp; o) const;
                        </operator>

                        <operator name="operator+"
                                  return="iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
iterator operator+(difference_type n) const;
                        </operator>

                        <operator name="operator-"
                                  return="iterator"
                                  args="['difference_type']"
                                  vars="['n']"
                                  qual="const">
iterator operator-(difference_type n) const;
                        </operator>

                        <operator name="operator&lt;"
                                  return="bool"
                                  args="['iterator const&amp;']"
                                  vars="['o']"
                                  qual="const">
bool operator&lt;(iterator const&amp; o) const;
                        </operator>

                        <operator name="operator=="
                                  return="bool"
                                  args="['iterator const&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator==(iterator const&amp; ci) const;
                        </operator>

                        <operator name="operator!="
                                  return="bool"
                                  args="['iterator const&amp;']"
                                  vars="['ci']"
                                  qual="const">
bool operator!=(iterator const&amp; ci) const;
                        </operator>

                        <operator name="operator*"
                                  return="T&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
T&amp; operator*() const;
                        </operator>

                        <operator name="operator-&gt;"
                                  return="T*"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
T* operator-&gt;() const;
                            <comment>
            operator T *() const { return &amp; **i; }
        T *&amp; get() { return *i; }
                            </comment>
                        </operator>

                        <operator name="operator+="
                                  return="iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
iterator&amp; operator+=(difference_type d);
                        </operator>

                        <operator name="operator-="
                                  return="iterator&amp;"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="">
iterator&amp; operator-=(difference_type d);
                        </operator>

                        <operator name="operator[]"
                                  return="reference"
                                  args="['difference_type']"
                                  vars="['d']"
                                  qual="const">
reference operator[](difference_type d) const;
                        </operator>

                    </section>

                    <typemap name="difference_type"
                             value="ptrdiff_t"
                             type="typedef"/>
                    <typemap name="iterator"
                             value="edm::OwnVector&lt;T, P&gt;::iterator"
                             type="class"/>
                    <typemap name="iterator_category"
                             value="typename base::iterator::iterator_category"
                             type="typedef"/>
                    <typemap name="pointer"
                             value="T*"
                             type="typedef"/>
                    <typemap name="reference"
                             value="T&amp;"
                             type="typedef"/>
                    <typemap name="value_type"
                             value="T"
                             type="typedef"/>

                </class>
                <constructor name="OwnVector"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
OwnVector();
                </constructor>

                <constructor name="OwnVector"
                             return=""
                             args="['size_type']"
                             vars="['']"
                             qual="">
OwnVector(size_type);
                </constructor>

                <copyconstructor name="OwnVector"
                                 return=""
                                 args="['OwnVector const&amp;']"
                                 vars="['']"
                                 qual="">
OwnVector(OwnVector const&amp;);
                </copyconstructor>

                <destructor name="~OwnVector"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~OwnVector();
                </destructor>

                <method1 name="begin"
                         return="iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
iterator begin();
                </method1>

                <method1 name="end"
                         return="iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
iterator end();
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <operator name="operator[]"
                          return="reference"
                          args="['size_type']"
                          vars="['']"
                          qual="">
reference operator[](size_type);
                </operator>

                <operator name="operator[]"
                          return="const_reference"
                          args="['size_type']"
                          vars="['']"
                          qual="const">
const_reference operator[](size_type) const;
                </operator>

                <operator name="operator="
                          return="OwnVector&lt;T, P&gt;&amp;"
                          args="['OwnVector&lt;T, P&gt; const&amp;']"
                          vars="['']"
                          qual="">
OwnVector&lt;T, P&gt;&amp; operator=(OwnVector&lt;T, P&gt; const&amp;);
                </operator>

                <method1 name="reserve"
                         return="void"
                         args="['size_t']"
                         vars="['']"
                         qual="">
void reserve(size_t);
                </method1>

                <method2 name="push_back"
                         return="template&lt;typename D&gt; void"
                         args="['D*&amp;']"
                         vars="['d']"
                         qual="">
template&lt;typename D&gt; void push_back(D*&amp; d);
                </method2>

                <method2 name="push_back"
                         return="template&lt;typename D&gt; void"
                         args="['D* const&amp;']"
                         vars="['d']"
                         qual="">
template&lt;typename D&gt; void push_back(D* const&amp; d);
                </method2>

                <method2 name="push_back"
                         return="template&lt;typename D&gt; void"
                         args="['std::auto_ptr&lt;D&gt;']"
                         vars="['d']"
                         qual="">
template&lt;typename D&gt; void push_back(std::auto_ptr&lt;D&gt; d);
                </method2>

                <method1 name="push_back"
                         return="void"
                         args="['T const&amp;']"
                         vars="['valueToCopy']"
                         qual="">
void push_back(T const&amp; valueToCopy);
                </method1>

                <method1 name="is_back_safe"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool is_back_safe() const;
                </method1>

                <method1 name="pop_back"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void pop_back();
                </method1>

                <method1 name="back"
                         return="reference"
                         args="['void']"
                         vars="['']"
                         qual="">
reference back();
                </method1>

                <method1 name="back"
                         return="const_reference"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reference back() const;
                </method1>

                <method1 name="front"
                         return="reference"
                         args="['void']"
                         vars="['']"
                         qual="">
reference front();
                </method1>

                <method1 name="front"
                         return="const_reference"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reference front() const;
                </method1>

                <method1 name="data"
                         return="base const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
base const&amp; data() const;
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

                <method1 name="erase"
                         return="iterator"
                         args="['iterator']"
                         vars="['pos']"
                         qual="">
iterator erase(iterator pos);
                </method1>

                <method1 name="erase"
                         return="iterator"
                         args="['iterator','iterator']"
                         vars="['first','last']"
                         qual="">
iterator erase(iterator first, iterator last);
                </method1>

                <method2 name="sort"
                         return="template&lt;typename S&gt; void"
                         args="['S']"
                         vars="['s']"
                         qual="">
template&lt;typename S&gt;     void sort(S s);
                </method2>

                <method1 name="sort"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void sort();
                </method1>

                <method2 name="swap"
                         return="void"
                         args="['OwnVector&lt;T, P&gt;&amp;']"
                         vars="['other']"
                         qual="">
void swap(OwnVector&lt;T, P&gt;&amp; other);
                </method2>

                <method2 name="fillView"
                         return="void"
                         args="['ProductID const&amp;','std::vector&lt;void const*&gt;&amp;','helper_vector&amp;']"
                         vars="['id','pointers','helpers']"
                         qual="const">
void fillView(ProductID const&amp; id, std::vector&lt;void const*&gt;&amp; pointers, helper_vector&amp; helpers) const;
                </method2>

            </section>
            <section name="private">

                <class name="Ordering"
                       fullname="edm::OwnVector&lt;T, P&gt;::Ordering&lt;O&gt;"
                       module="DataFormats.Common"
                       project=""
                       type="template struct privatector"
                       template="template&lt;typename O&gt;">


                    <typemap name="Ordering"
                             value="edm::OwnVector&lt;T, P&gt;::Ordering&lt;O&gt;"
                             type="class"/>

                </class>
            </section>

            <typemap name="const_reference"
                     value="T const&amp;"
                     type="typedef"/>
            <typemap name="pointer"
                     value="T*"
                     type="typedef"/>
            <typemap name="policy_type"
                     value="P"
                     type="typedef"/>
            <typemap name="reference"
                     value="T&amp;"
                     type="typedef"/>
            <typemap name="size_type"
                     value="typename base::size_type"
                     type="typedef"/>
            <typemap name="value_type"
                     value="T"
                     type="typedef"/>

        </class>

        <class name="has_fillView&lt;edm::OwnVector&lt;T, P&gt; &gt;"
               fullname="edm::has_fillView&lt;edm::OwnVector&lt;T, P&gt; &gt;"
               module="DataFormats.Common"
               project=""
               type="specialized template struct"
               template="template&lt;typename T, typename P&gt;">

            <section>
                <member>
static bool const value=true;
                </member>

            </section>

            <typemap name="true"
                     value="edm::has_fillView&lt;edm::OwnVector&lt;T, P&gt; &gt;::true"
                     type="member"/>

        </class>
    </namespace>

    <type name="OwnVector const&amp;"/>
    <type name="OwnVector&lt;T, P&gt; const&amp;"/>
    <type name="OwnVector&lt;T, P&gt;&amp;"/>
    <type name="ProductID const&amp;"/>
    <type name="base const&amp;"/>
    <type name="bool"/>
    <type name="bool const value"/>
    <type name="const_iterator"/>
    <type name="const_iterator const&amp;"/>
    <type name="const_iterator&amp;"/>
    <type name="const_reference"/>
    <type name="difference_type"/>
    <type name="edm::OwnVector&lt;T, P&gt;"/>
    <type name="edm::OwnVector&lt;T, P&gt;::Ordering&lt;O&gt;"/>
    <type name="edm::OwnVector&lt;T, P&gt;::const_iterator"/>
    <type name="edm::OwnVector&lt;T, P&gt;::iterator"/>
    <type name="edm::has_fillView&lt;edm::OwnVector&lt;T, P&gt; &gt;"/>
    <type name="helper_vector&amp;"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="iterator const&amp;"/>
    <type name="iterator&amp;"/>
    <type name="reference"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="std::auto_ptr&lt;D&gt;"/>
    <type name="std::vector&lt;void const*&gt;&amp;"/>
    <type name="template&lt;typename D&gt; void"/>
    <type name="template&lt;typename S&gt; void"/>
    <type name="typename base::const_iterator const&amp;"/>
    <type name="typename base::iterator const&amp;"/>
    <type name="void"/>
</header>
