<?xml version="1.0"?>
<!--
==============================================================================
  XML File: DataFrameContainer.xml
  Created:  Fri Jan 15 20:45:27 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/DataFrameContainer.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Common/interface/DataFrameContainer.h">

    <include name="&quot;DataFormats/Common/interface/DataFrame.h&quot;"/>
    <include name="&lt;boost/iterator/transform_iterator.hpp&gt;"/>
    <include name="&lt;boost/iterator/counting_iterator.hpp&gt;"/>

    <namespace name="edm">

        <class name="DataFrameContainer"
               fullname="edm::DataFrameContainer"
               module="DataFormats.Common"
               project=""
               type="regular">
            <comment>
      an optitimized container that linearized a &quot;vector of vector&quot;.
      It corresponds to a set of fixed size array of 16bit words each belonging
      to a &quot;channel&quot; identified by an 32bit id

     FIXME interface to be finalized once use-cases fully identified

     although it can be sorted internally it is strongly adviced to
     fill it already sorted....
            </comment>

            <section name="public">
                <typedef name="size_type"
                         value="unsigned int">
typedef unsigned int size_type;
                </typedef>

                <typedef name="id_type"
                         value="unsigned int">
typedef unsigned int id_type;
                </typedef>

                <typedef name="data_type"
                         value="unsigned short">
typedef unsigned short data_type;
                </typedef>

                <typedef name="IdContainer"
                         value="std::vector&lt;id_type&gt;">
typedef std::vector&lt;id_type&gt; IdContainer;
                </typedef>

                <typedef name="DataContainer"
                         value="std::vector&lt;data_type&gt;">
typedef std::vector&lt;data_type&gt; DataContainer;
                </typedef>

                <typedef name="IdIter"
                         value="std::vector&lt;id_type&gt;::iterator">
typedef std::vector&lt;id_type&gt;::iterator IdIter;
                </typedef>

                <typedef name="DataIter"
                         value="std::vector&lt;data_type&gt;::iterator">
typedef std::vector&lt;data_type&gt;::iterator DataIter;
                </typedef>

                <typedef name="IterPair"
                         value="std::pair&lt;IdIter, DataIter&gt;">
typedef std::pair&lt;IdIter, DataIter&gt; IterPair;
                </typedef>

                <typedef name="const_IdIter"
                         value="std::vector&lt;id_type&gt;::const_iterator">
typedef std::vector&lt;id_type&gt;::const_iterator const_IdIter;
                </typedef>

                <typedef name="const_DataIter"
                         value="std::vector&lt;data_type&gt;::const_iterator">
typedef std::vector&lt;data_type&gt;::const_iterator const_DataIter;
                </typedef>

                <typedef name="const_IterPair"
                         value="std::pair&lt;const_IdIter, const_DataIter&gt;">
typedef std::pair&lt;const_IdIter, const_DataIter&gt; const_IterPair;
                </typedef>


                <class name="IterHelp"
                       fullname="edm::DataFrameContainer::IterHelp"
                       module="DataFormats.Common"
                       project=""
                       type="regular struct">

                    <section>
                        <typedef name="result_type"
                                 value="DataFrame">
typedef DataFrame result_type;
                        </typedef>

                        <constructor name="IterHelp"
                                     return=""
                                     args="['DataFrameContainer const&amp;']"
                                     vars="['iv']"
                                     qual="">
IterHelp(DataFrameContainer const&amp; iv);
                        </constructor>

                        <operator name="operator()"
                                  return="DataFrame const&amp;"
                                  args="['int']"
                                  vars="['i']"
                                  qual="const">
DataFrame const&amp; operatorPP(int i) const;
                        </operator>

                    </section>

                    <typemap name="IterHelp"
                             value="edm::DataFrameContainer::IterHelp"
                             type="class"/>
                    <typemap name="result_type"
                             value="DataFrame"
                             type="typedef"/>

                </class>
                <typedef name="const_iterator"
                         value="boost::transform_iterator&lt;IterHelp, boost::counting_iterator&lt;int&gt; &gt;">
typedef boost::transform_iterator&lt;IterHelp, boost::counting_iterator&lt;int&gt; &gt; const_iterator;
                </typedef>

                <constructor name="DataFrameContainer"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
DataFrameContainer();
                </constructor>

                <constructor name="DataFrameContainer"
                             return="explicit"
                             args="['size_t','int=0','size_t=0']"
                             vars="['istride','isubdet','isize']"
                             qual="">
explicit DataFrameContainer(size_t istride, int isubdet=0, size_t isize=0);
                </constructor>

                <method1 name="swap"
                         return="void"
                         args="['DataFrameContainer&amp;']"
                         vars="['rh']"
                         qual="">
void swap(DataFrameContainer&amp; rh);
                </method1>

                <operator name="operator="
                          return="DataFrameContainer&amp;"
                          args="['DataFrameContainer const&amp;']"
                          vars="['rhs']"
                          qual="">
DataFrameContainer&amp; operator=(DataFrameContainer const&amp; rhs);
                </operator>

                <method1 name="swap"
                         return="void"
                         args="['IdContainer&amp;','DataContainer&amp;']"
                         vars="['iic','idc']"
                         qual="">
void swap(IdContainer&amp; iic, DataContainer&amp; idc);
                </method1>

                <method1 name="reserve"
                         return="void"
                         args="['size_t']"
                         vars="['isize']"
                         qual="">
void reserve(size_t isize);
                </method1>

                <method1 name="resize"
                         return="void"
                         args="['size_t']"
                         vars="['isize']"
                         qual="">
void resize(size_t isize);
                </method1>

                <method1 name="sort"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void sort();
                </method1>

                <method1 name="push_back"
                         return="void"
                         args="['id_type','data_type const*']"
                         vars="['iid','idata']"
                         qual="">
void push_back(id_type iid, data_type const* idata);
                    <comment>
       FIXME not sure what the best way to add one cell to cont
                    </comment>
                </method1>

                <method1 name="push_back"
                         return="void"
                         args="['id_type']"
                         vars="['iid']"
                         qual="">
void push_back(id_type iid);
                    <comment>
      make space for it
                    </comment>
                </method1>

                <method1 name="set_back"
                         return="void"
                         args="['id_type','data_type const*']"
                         vars="['iid','idata']"
                         qual="">
void set_back(id_type iid, data_type const* idata);
                    <comment>
       overwrite back (very ad hoc interface...)
                    </comment>
                </method1>

                <method1 name="set_back"
                         return="void"
                         args="['id_type']"
                         vars="['iid']"
                         qual="">
void set_back(id_type iid);
                </method1>

                <method1 name="set_back"
                         return="void"
                         args="['data_type const*']"
                         vars="['idata']"
                         qual="">
void set_back(data_type const* idata);
                </method1>

                <method1 name="back"
                         return="DataFrame"
                         args="['void']"
                         vars="['']"
                         qual="">
DataFrame back();
                </method1>

                <method1 name="pop_back"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void pop_back();
                </method1>

                <method1 name="pair"
                         return="IterPair"
                         args="['size_t']"
                         vars="['i']"
                         qual="">
IterPair pair(size_t i);
                </method1>

                <method1 name="pair"
                         return="const_IterPair"
                         args="['size_t']"
                         vars="['i']"
                         qual="const">
const_IterPair pair(size_t i) const;
                </method1>

                <operator name="operator[]"
                          return="DataFrame"
                          args="['size_t']"
                          vars="['i']"
                          qual="">
DataFrame operator[](size_t i);
                </operator>

                <operator name="operator[]"
                          return="DataFrame"
                          args="['size_t']"
                          vars="['i']"
                          qual="const">
DataFrame operator[](size_t i) const;
                </operator>

                <method1 name="find"
                         return="const_iterator"
                         args="['id_type']"
                         vars="['i']"
                         qual="const">
const_iterator find(id_type i) const;
                    <comment>
       slow interface
                    </comment>
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="subdetId"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int subdetId() const;
                </method1>

                <method1 name="stride"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type stride() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                </method1>

                <operator name="operator()"
                          return="data_type"
                          args="['size_t','size_t']"
                          vars="['cell','frame']"
                          qual="const">
data_type operatorPP(size_t cell, size_t frame) const;
                </operator>

                <method1 name="frame"
                         return="data_type const*"
                         args="['size_t']"
                         vars="['cell']"
                         qual="const">
data_type const* frame(size_t cell) const;
                </method1>

                <method1 name="id"
                         return="id_type"
                         args="['size_t']"
                         vars="['cell']"
                         qual="const">
id_type id(size_t cell) const;
                </method1>

            </section>

            <typemap name="DataContainer"
                     value="std::vector&lt;unsigned short&gt;"
                     type="typedef"/>
            <typemap name="DataIter"
                     value="std::vector&lt;unsigned short&gt;::iterator"
                     type="typedef"/>
            <typemap name="IdContainer"
                     value="std::vector&lt;unsigned int&gt;"
                     type="typedef"/>
            <typemap name="IdIter"
                     value="std::vector&lt;unsigned int&gt;::iterator"
                     type="typedef"/>
            <typemap name="IterPair"
                     value="std::pair&lt;std::vector&lt;unsigned int&gt;::iterator, std::vector&lt;unsigned short&gt;::iterator&gt;"
                     type="typedef"/>
            <typemap name="const_DataIter"
                     value="std::vector&lt;unsigned short&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="const_IdIter"
                     value="std::vector&lt;unsigned int&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="const_IterPair"
                     value="std::pair&lt;std::vector&lt;unsigned int&gt;::const_iterator, std::vector&lt;unsigned short&gt;::const_iterator&gt;"
                     type="typedef"/>
            <typemap name="const_iterator"
                     value="boost::transform_iterator&lt;IterHelp, boost::counting_iterator&lt;int&gt; &gt;"
                     type="typedef"/>
            <typemap name="data_type"
                     value="unsigned short"
                     type="typedef"/>
            <typemap name="id_type"
                     value="unsigned int"
                     type="typedef"/>
            <typemap name="size_type"
                     value="unsigned int"
                     type="typedef"/>

        </class>
        <function1 name="DataFrame::DataFrame"
                   return="inline"
                   args="['DataFrameContainer const&amp;','size_type']"
                   vars="['icont','i']"
                   qual="">
inline   DataFrame::DataFrame(DataFrameContainer const&amp; icont, size_type i);
        </function1>

        <function1 name="DataFrame::set"
                   return="inline void"
                   args="['DataFrameContainer const&amp;','size_type']"
                   vars="['icont','i']"
                   qual="">
inline   void DataFrame::set(DataFrameContainer const&amp; icont, size_type i);
        </function1>

        <function1 name="swap"
                   return="inline void"
                   args="['DataFrameContainer&amp;','DataFrameContainer&amp;']"
                   vars="['lhs','rhs']"
                   qual="">
inline   void   swap(DataFrameContainer&amp; lhs, DataFrameContainer&amp; rhs);
            <comment>
     Free swap function
            </comment>
        </function1>

    </namespace>

    <namespace name="std">
        <comment>
   The standard allows us to specialize std::swap for non-templates.
   This ensures that DataFrameContainer::swap() will be used in algorithms.
        </comment>
    </namespace>

    <type name="DataContainer&amp;"/>
    <type name="DataFrame"/>
    <type name="DataFrame const&amp;"/>
    <type name="DataFrameContainer const&amp;"/>
    <type name="DataFrameContainer&amp;"/>
    <type name="IdContainer&amp;"/>
    <type name="IterPair"/>
    <type name="bool"/>
    <type name="const_IterPair"/>
    <type name="const_iterator"/>
    <type name="data_type"/>
    <type name="data_type const*"/>
    <type name="edm::DataFrameContainer"/>
    <type name="edm::DataFrameContainer::IterHelp"/>
    <type name="id_type"/>
    <type name="int"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="void"/>
</header>
