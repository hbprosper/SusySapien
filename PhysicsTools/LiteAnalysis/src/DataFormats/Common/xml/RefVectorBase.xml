<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RefVectorBase.xml
  Created:  Thu Jan 14 22:46:25 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/RefVectorBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/RefVectorBase.h">

    <include name="&quot;DataFormats/Common/interface/EDProductfwd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefCore.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="edm">
        <forward name="EDProductGetter"/>

        <class name="RefVectorBase"
               fullname="edm::RefVectorBase&lt;KEY&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename KEY&gt;">

            <section name="public">
                <typedef name="RefItems"
                         value="std::vector&lt;RefItem&lt;KEY&gt; &gt;">
typedef std::vector&lt;RefItem&lt;KEY&gt; &gt; RefItems;
                </typedef>

                <typedef name="key_type"
                         value="KEY">
typedef KEY key_type;
                </typedef>

                <typedef name="size_type"
                         value="typename RefItems::size_type">
typedef typename RefItems::size_type size_type;
                </typedef>

                <constructor name="RefVectorBase"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RefVectorBase();
                    <comment>
        Default constructor needed for reading from persistent store. Not for direct use.
                    </comment>
                </constructor>

                <constructor name="RefVectorBase"
                             return="explicit"
                             args="['ProductID const&amp;','void const*=0','EDProductGetter const*=0']"
                             vars="['productID','prodPtr','prodGetter']"
                             qual="">
explicit RefVectorBase(ProductID const&amp; productID, void const* prodPtr=0, EDProductGetter const* prodGetter=0);
                </constructor>

                <destructor name="~RefVectorBase"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~RefVectorBase();
                    <comment>
        Destructor
                    </comment>
                </destructor>

                <method1 name="refCore"
                         return="RefCore const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
RefCore const&amp; refCore() const;
                    <comment>
        Accessor for product ID and product getter
                    </comment>
                </method1>

                <method1 name="items"
                         return="RefItems const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
RefItems const&amp; items() const;
                    <comment>
        Accessor for vector of keys and pointers
                    </comment>
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                    <comment>
        Is vector empty?
                    </comment>
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                    <comment>
        Size of vector
                    </comment>
                </method1>

                <method2 name="pushBack"
                         return="void"
                         args="['RefCore const&amp;','RefItem&lt;KEY&gt; const&amp;']"
                         vars="['product','item_']"
                         qual="">
void pushBack(RefCore const&amp; product, RefItem&lt;KEY&gt; const&amp; item_);
                </method2>

                <method1 name="capacity"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type capacity() const;
                    <comment>
        Capacity of vector
                    </comment>
                </method1>

                <method1 name="reserve"
                         return="void"
                         args="['size_type']"
                         vars="['n']"
                         qual="">
void reserve(size_type n);
                    <comment>
        Reserve space for vector
                    </comment>
                </method1>

                <method1 name="eraseAtIndex"
                         return="typename RefItems::iterator"
                         args="['size_type']"
                         vars="['index']"
                         qual="">
typename RefItems::iterator eraseAtIndex(size_type index);
                    <comment>
        erase an element from the vector
                    </comment>
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                    <comment>
        clear the vector
                    </comment>
                </method1>

                <method2 name="swap"
                         return="void"
                         args="['RefVectorBase&lt;KEY&gt;&amp;']"
                         vars="['other']"
                         qual="">
void swap(RefVectorBase&lt;KEY&gt;&amp; other);
                    <comment>
        swap two vectors
                    </comment>
                </method2>

                <operator name="operator="
                          return="RefVectorBase&amp;"
                          args="['RefVectorBase const&amp;']"
                          vars="['rhs']"
                          qual="">
RefVectorBase&amp; operator=(RefVectorBase const&amp; rhs);
                    <comment>
        Copy assignment
                    </comment>
                </operator>

            </section>

            <typemap name="RefItems"
                     value="std::vector&lt;RefItem&lt;KEY&gt; &gt;"
                     type="typedef"/>
            <typemap name="key_type"
                     value="KEY"
                     type="typedef"/>
            <typemap name="size_type"
                     value="typename std::vector&lt;RefItem&lt;KEY&gt; &gt;::size_type"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="EDProductGetter const*"/>
    <type name="ProductID const&amp;"/>
    <type name="RefCore const&amp;"/>
    <type name="RefItem&lt;KEY&gt; const&amp;"/>
    <type name="RefItems const&amp;"/>
    <type name="RefVectorBase const&amp;"/>
    <type name="RefVectorBase&amp;"/>
    <type name="RefVectorBase&lt;KEY&gt;&amp;"/>
    <type name="bool"/>
    <type name="edm::RefVectorBase&lt;KEY&gt;"/>
    <type name="size_type"/>
    <type name="typename RefItems::iterator"/>
    <type name="void"/>
    <type name="void const*"/>
</header>
