<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Vector.xml
  Created:  Thu Jan 14 22:46:30 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Common/interface/Vector.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Common/interface/Vector.h">

    <include name="&lt;algorithm&gt;"/>
    <include name="&lt;functional&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/Common/interface/EDProduct.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ClonePolicy.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>
    <include name="&quot;DataFormats/Provenance/interface/ProductID.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/EDMException.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/PostReadFixupTrait.h&quot;"/>

    <namespace name="edm">

        <class name="Vector"
               fullname="edm::Vector&lt;T&gt;"
               module="DataFormats.Common"
               project=""
               type="template"
               template="template&lt;typename T&gt;">

            <section name="public">
                <typedef name="size_type"
                         value="typename base::size_type">
typedef typename base::size_type size_type;
                </typedef>

                <typedef name="value_type"
                         value="typename base::value_type">
typedef typename base::value_type value_type;
                </typedef>

                <typedef name="pointer"
                         value="typename base::pointer">
typedef typename base::pointer pointer;
                </typedef>

                <typedef name="reference"
                         value="typename base::reference">
typedef typename base::reference reference;
                </typedef>

                <typedef name="const_reference"
                         value="typename base::const_reference">
typedef typename base::const_reference const_reference;
                </typedef>

                <typedef name="iterator"
                         value="typename base::iterator">
typedef typename base::iterator iterator;
                </typedef>

                <typedef name="const_iterator"
                         value="typename base::const_iterator">
typedef typename base::const_iterator const_iterator;
                </typedef>

                <constructor name="Vector"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Vector();
                </constructor>

                <constructor name="Vector"
                             return=""
                             args="['size_type']"
                             vars="['']"
                             qual="">
Vector(size_type);
                </constructor>

                <copyconstructor name="Vector"
                                 return=""
                                 args="['const Vector&amp;']"
                                 vars="['']"
                                 qual="">
Vector(const Vector&amp;);
                </copyconstructor>

                <destructor name="~Vector"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~Vector();
                </destructor>

                <method1 name="begin"
                         return="iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
iterator begin();
                </method1>

                <method1 name="end"
                         return="iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
iterator end();
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                </method1>

                <method1 name="empty"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool empty() const;
                </method1>

                <operator name="operator[]"
                          return="reference"
                          args="['size_type']"
                          vars="['']"
                          qual="">
reference operator[](size_type);
                </operator>

                <operator name="operator[]"
                          return="const_reference"
                          args="['size_type']"
                          vars="['']"
                          qual="const">
const_reference operator[](size_type) const;
                </operator>

                <operator name="operator="
                          return="Vector&lt;T&gt;&amp;"
                          args="['const Vector&lt;T&gt;&amp;']"
                          vars="['']"
                          qual="">
Vector&lt;T&gt;&amp; operator=(const Vector&lt;T&gt;&amp;);
                </operator>

                <method1 name="reserve"
                         return="void"
                         args="['size_t']"
                         vars="['']"
                         qual="">
void reserve(size_t);
                </method1>

                <method1 name="push_back"
                         return="void"
                         args="['const value_type&amp;']"
                         vars="['']"
                         qual="">
void push_back(const value_type&amp;);
                </method1>

                <method1 name="pop_back"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void pop_back();
                </method1>

                <method1 name="back"
                         return="reference"
                         args="['void']"
                         vars="['']"
                         qual="">
reference back();
                </method1>

                <method1 name="back"
                         return="const_reference"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reference back() const;
                </method1>

                <method1 name="front"
                         return="reference"
                         args="['void']"
                         vars="['']"
                         qual="">
reference front();
                </method1>

                <method1 name="front"
                         return="const_reference"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reference front() const;
                </method1>

                <method1 name="data"
                         return="const base&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const base&amp; data() const;
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

                <method1 name="erase"
                         return="iterator"
                         args="['iterator']"
                         vars="['pos']"
                         qual="">
iterator erase(iterator pos);
                </method1>

                <method1 name="erase"
                         return="iterator"
                         args="['iterator','iterator']"
                         vars="['first','last']"
                         qual="">
iterator erase(iterator first, iterator last);
                </method1>

                <method2 name="swap"
                         return="void"
                         args="['Vector&lt;T&gt;&amp;']"
                         vars="['other']"
                         qual="">
void swap(Vector&lt;T&gt;&amp; other);
                </method2>

                <method2 name="fillView"
                         return="void"
                         args="['ProductID const&amp;','std::vector&lt;void const*&gt;&amp;','helper_vector&amp;']"
                         vars="['id','pointers','helpers']"
                         qual="const">
void fillView(ProductID const&amp; id, std::vector&lt;void const*&gt;&amp; pointers, helper_vector&amp; helpers) const;
                </method2>

            </section>

            <typemap name="const_iterator"
                     value="typename base::const_iterator"
                     type="typedef"/>
            <typemap name="const_reference"
                     value="typename base::const_reference"
                     type="typedef"/>
            <typemap name="iterator"
                     value="typename base::iterator"
                     type="typedef"/>
            <typemap name="pointer"
                     value="typename base::pointer"
                     type="typedef"/>
            <typemap name="reference"
                     value="typename base::reference"
                     type="typedef"/>
            <typemap name="size_type"
                     value="typename base::size_type"
                     type="typedef"/>
            <typemap name="value_type"
                     value="typename base::value_type"
                     type="typedef"/>

        </class>

        <class name="has_fillView&lt;edm::Vector&lt;T&gt; &gt;"
               fullname="edm::has_fillView&lt;edm::Vector&lt;T&gt; &gt;"
               module="DataFormats.Common"
               project=""
               type="specialized template struct"
               template="template&lt;typename T&gt;">

            <section>
                <member>
static bool const value=true;
                </member>

            </section>

            <typemap name="true"
                     value="edm::has_fillView&lt;edm::Vector&lt;T&gt; &gt;::true"
                     type="member"/>

        </class>
    </namespace>

    <type name="ProductID const&amp;"/>
    <type name="Vector&lt;T&gt;&amp;"/>
    <type name="bool"/>
    <type name="bool const value"/>
    <type name="const Vector&amp;"/>
    <type name="const Vector&lt;T&gt;&amp;"/>
    <type name="const base&amp;"/>
    <type name="const value_type&amp;"/>
    <type name="const_iterator"/>
    <type name="const_reference"/>
    <type name="edm::Vector&lt;T&gt;"/>
    <type name="edm::has_fillView&lt;edm::Vector&lt;T&gt; &gt;"/>
    <type name="helper_vector&amp;"/>
    <type name="iterator"/>
    <type name="reference"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="std::vector&lt;void const*&gt;&amp;"/>
    <type name="void"/>
</header>
