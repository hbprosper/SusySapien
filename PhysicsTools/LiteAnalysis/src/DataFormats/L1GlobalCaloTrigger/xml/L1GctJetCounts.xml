<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1GctJetCounts.xml
  Created:  Thu Jan 14 22:47:26 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/L1GlobalCaloTrigger/interface/L1GctJetCounts.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/L1GlobalCaloTrigger/interface/L1GctJetCounts.h">

    <include name="&lt;vector&gt;"/>
    <include name="&lt;ostream&gt;"/>

    <class name="L1GctJetCounts"
           fullname="L1GctJetCounts"
           module="DataFormats.L1GlobalCaloTrigger"
           project=""
           type="regular">
        <comment>
    Class to store the GCT jet count output
        </comment>

        <section name="public">
            <constant name="MAX_TOTAL_COUNTS"
                      type="static const unsigned"
                      value=""/>
            <constant name="MAX_TRUE_COUNTS"
                      type="static const unsigned"
                      value=""/>
            <constructor name="L1GctJetCounts"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1GctJetCounts();
                <comment>
      default constructor
                </comment>
            </constructor>

            <constructor name="L1GctJetCounts"
                         return=""
                         args="['uint32_t','uint32_t']"
                         vars="['data0','data1']"
                         qual="">
L1GctJetCounts(uint32_t data0, uint32_t data1);
                <comment>
      Expects three 5-bit jet counts in bits 14:0, and then
      three more 5-bit jet counts in bits 30:16 for both of
      the arguments; this is because in the raw format bit
      31 is a BC0 flag, and bit 15 is always 1. Thus, jet
      count 0 should be in bits 4:0 of the data0 argument.
                </comment>
            </constructor>

            <constructor name="L1GctJetCounts"
                         return=""
                         args="['uint32_t','uint32_t','int16_t']"
                         vars="['data0','data1','bx']"
                         qual="">
L1GctJetCounts(uint32_t data0, uint32_t data1, int16_t bx);
            </constructor>

            <constructor name="L1GctJetCounts"
                         return=""
                         args="['std::vector&lt;unsigned&gt;']"
                         vars="['counts']"
                         qual="">
L1GctJetCounts(std::vector&lt;unsigned&gt; counts);
                <comment>
      constructor for emulator
                </comment>
            </constructor>

            <constructor name="L1GctJetCounts"
                         return=""
                         args="['std::vector&lt;unsigned&gt;','int16_t']"
                         vars="['counts','bx']"
                         qual="">
L1GctJetCounts(std::vector&lt;unsigned&gt; counts, int16_t bx);
            </constructor>

            <destructor name="~L1GctJetCounts"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~L1GctJetCounts();
                <comment>
      destructor
                </comment>
            </destructor>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method
                </comment>
            </method1>

            <method1 name="raw0"
                     return="uint32_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint32_t raw0() const;
                <comment>
      get raw word 0
                </comment>
            </method1>

            <method1 name="raw1"
                     return="uint32_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint32_t raw1() const;
                <comment>
      get raw word 1
                </comment>
            </method1>

            <method1 name="count"
                     return="unsigned"
                     args="['unsigned']"
                     vars="['i']"
                     qual="const">
unsigned count(unsigned i) const;
                <comment>
      get count by index
                </comment>
            </method1>

            <method1 name="count00"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count00() const;
                <comment>
      get individual counts (for use with FWLite)
                </comment>
            </method1>

            <method1 name="count01"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count01() const;
            </method1>

            <method1 name="count02"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count02() const;
            </method1>

            <method1 name="count03"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count03() const;
            </method1>

            <method1 name="count04"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count04() const;
            </method1>

            <method1 name="count05"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count05() const;
            </method1>

            <method1 name="count06"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count06() const;
            </method1>

            <method1 name="count07"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count07() const;
            </method1>

            <method1 name="count08"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count08() const;
            </method1>

            <method1 name="count09"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count09() const;
            </method1>

            <method1 name="count10"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count10() const;
            </method1>

            <method1 name="count11"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned count11() const;
            </method1>

            <method1 name="bx"
                     return="int16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
int16_t bx() const;
                <comment>
      get bunch-crossing index
                </comment>
            </method1>

            <operator name="operator=="
                      return="int"
                      args="['const L1GctJetCounts&amp;']"
                      vars="['c']"
                      qual="const">
int operator==(const L1GctJetCounts&amp; c) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const L1GctJetCounts&amp;']"
                      vars="['c']"
                      qual="const">
int operator!=(const L1GctJetCounts&amp; c) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1GctJetCounts&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1GctJetCounts&amp; c);
    </operator>


    <type name="L1GctJetCounts"/>
    <type name="bool"/>
    <type name="const L1GctJetCounts&amp;"/>
    <type name="int"/>
    <type name="int16_t"/>
    <type name="std::string"/>
    <type name="std::vector&lt;unsigned&gt;"/>
    <type name="uint32_t"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
