<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1GctHFRingEtSums.xml
  Created:  Thu Jan 14 22:47:24 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/L1GlobalCaloTrigger/interface/L1GctHFRingEtSums.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/L1GlobalCaloTrigger/interface/L1GctHFRingEtSums.h">

    <include name="&lt;ostream&gt;"/>
    <include name="&lt;string&gt;"/>

    <class name="L1GctHFRingEtSums"
           fullname="L1GctHFRingEtSums"
           module="DataFormats.L1GlobalCaloTrigger"
           project=""
           type="regular">
        <comment>
    Will store four Et sums of 3 bits each
        </comment>

        <section name="public">
            <constant name="N_SUMS"
                      type="static const unsigned"
                      value="4"/>
        </section>
        <section name="public">
            <constructor name="L1GctHFRingEtSums"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1GctHFRingEtSums();
                <comment>
      default constructor (for vector initialisation etc.)
                </comment>
            </constructor>

            <destructor name="~L1GctHFRingEtSums"
                        return=""
                        args="['void']"
                        vars="['']"
                        qual="">
~L1GctHFRingEtSums();
                <comment>
      destructor
                </comment>
            </destructor>

            <method1 name="fromConcRingSums"
                     return="static L1GctHFRingEtSums"
                     args="['const uint16_t','const uint16_t','const int16_t','const uint32_t']"
                     vars="['capBlock','capIndex','bx','data']"
                     qual="">
static L1GctHFRingEtSums fromConcRingSums(const uint16_t capBlock, const uint16_t capIndex, const int16_t bx, const uint32_t data);
                <comment>
      the HF bit counts, which are ignored
                </comment>
            </method1>

            <method1 name="fromGctEmulator"
                     return="static L1GctHFRingEtSums"
                     args="['const int16_t','const uint16_t','const uint16_t','const uint16_t','const uint16_t']"
                     vars="['bx','etSumPosEtaRing1','etSumPosEtaRing2','etSumNegEtaRing1','etSumNegEtaRing2']"
                     qual="">
static L1GctHFRingEtSums fromGctEmulator(const int16_t bx, const uint16_t etSumPosEtaRing1, const uint16_t etSumPosEtaRing2, const uint16_t etSumNegEtaRing1, const uint16_t etSumNegEtaRing2);
                <comment>
      named ctor for GCT emulator
                </comment>
            </method1>

            <method1 name="nSums"
                     return="static unsigned"
                     args="['void']"
                     vars="['']"
                     qual="">
static unsigned nSums();
                <comment>
     get number of ring sums
                </comment>
            </method1>

            <method1 name="capBlock"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t capBlock() const;
                <comment>
      get GCT unpacker capture block
                </comment>
            </method1>

            <method1 name="capIndex"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t capIndex() const;
                <comment>
      get index within GCT unpacker capture block
                </comment>
            </method1>

            <method1 name="bx"
                     return="int16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
int16_t bx() const;
                <comment>
      get BX number
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      is the sum non-zero
                </comment>
            </method1>

            <method1 name="raw"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t raw() const;
                <comment>
      get the raw data
                </comment>
            </method1>

            <method1 name="etSum"
                     return="uint16_t"
                     args="['unsigned const']"
                     vars="['i']"
                     qual="const">
uint16_t etSum(unsigned const i) const;
                <comment>
         3   :  Ring 2 Negative Rapidity HF Et sum
                </comment>
            </method1>

            <method1 name="setCapBlock"
                     return="void"
                     args="['uint16_t']"
                     vars="['capBlock']"
                     qual="">
void setCapBlock(uint16_t capBlock);
                <comment>
      set cap block
                </comment>
            </method1>

            <method1 name="setCapIndex"
                     return="void"
                     args="['uint16_t']"
                     vars="['capIndex']"
                     qual="">
void setCapIndex(uint16_t capIndex);
                <comment>
      set cap index
                </comment>
            </method1>

            <method1 name="setBx"
                     return="void"
                     args="['uint16_t']"
                     vars="['bx']"
                     qual="">
void setBx(uint16_t bx);
                <comment>
      set bx
                </comment>
            </method1>

            <method1 name="setEtSum"
                     return="void"
                     args="['unsigned','uint16_t']"
                     vars="['i','et']"
                     qual="">
void setEtSum(unsigned i, uint16_t et);
                <comment>
      set a sum
                </comment>
            </method1>

            <method1 name="setData"
                     return="void"
                     args="['uint32_t']"
                     vars="['data']"
                     qual="">
void setData(uint32_t data);
                <comment>
      set the raw data
                </comment>
            </method1>

            <operator name="operator=="
                      return="bool"
                      args="['const L1GctHFRingEtSums&amp;']"
                      vars="['c']"
                      qual="const">
bool operator==(const L1GctHFRingEtSums&amp; c) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="bool"
                      args="['const L1GctHFRingEtSums&amp;']"
                      vars="['c']"
                      qual="const">
bool operator!=(const L1GctHFRingEtSums&amp; c) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1GctHFRingEtSums&amp;']"
              vars="['s','cand']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1GctHFRingEtSums&amp; cand);
    </operator>


    <type name="L1GctHFRingEtSums"/>
    <type name="bool"/>
    <type name="const L1GctHFRingEtSums&amp;"/>
    <type name="const int16_t"/>
    <type name="const uint16_t"/>
    <type name="const uint32_t"/>
    <type name="int16_t"/>
    <type name="uint16_t"/>
    <type name="uint32_t"/>
    <type name="unsigned"/>
    <type name="unsigned const"/>
    <type name="void"/>
</header>
