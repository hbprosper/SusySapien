<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1GctEtHad.xml
  Created:  Thu Jan 14 22:47:21 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/L1GlobalCaloTrigger/interface/L1GctEtHad.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/L1GlobalCaloTrigger/interface/L1GctEtHad.h">

    <include name="&lt;ostream&gt;"/>

    <class name="L1GctEtHad"
           fullname="L1GctEtHad"
           module="DataFormats.L1GlobalCaloTrigger"
           project=""
           type="regular">
        <comment>
    \brief Persistable copy of total Ht measured at Level-1
        </comment>

        <section name="public">
            <enum name="numberOfBits">
enum numberOfBits {

    kEtHadNBits=12, 
    kEtHadOFlowBit=1&lt;&lt;kEtHadNBits, 
    kEtHadMaxValue=kEtHadOFlowBit-1, 
    kRawCtorMask=kEtHadOFlowBit | kEtHadMaxValue
  };
                <field name="kEtHadNBits" value="12"/>
                <field name="kEtHadOFlowBit"
                       value="1&amp;lt;&amp;lt;kEtHadNBits"/>
                <field name="kEtHadMaxValue" value="kEtHadOFlowBit-1"/>
                <field name="kRawCtorMask"
                       value="kEtHadOFlowBit | kEtHadMaxValue"/>
            </enum>

            <constructor name="L1GctEtHad"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1GctEtHad();
            </constructor>

            <constructor name="L1GctEtHad"
                         return=""
                         args="['uint16_t']"
                         vars="['rawData']"
                         qual="">
L1GctEtHad(uint16_t rawData);
            </constructor>

            <constructor name="L1GctEtHad"
                         return=""
                         args="['uint16_t','int16_t']"
                         vars="['rawData','bx']"
                         qual="">
L1GctEtHad(uint16_t rawData, int16_t bx);
            </constructor>

            <constructor name="L1GctEtHad"
                         return=""
                         args="['unsigned','bool']"
                         vars="['et','oflow']"
                         qual="">
L1GctEtHad(unsigned et, bool oflow);
            </constructor>

            <constructor name="L1GctEtHad"
                         return=""
                         args="['unsigned','bool','int16_t']"
                         vars="['et','oflow','bx']"
                         qual="">
L1GctEtHad(unsigned et, bool oflow, int16_t bx);
            </constructor>

            <destructor name="~L1GctEtHad"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~L1GctEtHad();
            </destructor>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method (= false; hadronic Et is always calculated)
                </comment>
            </method1>

            <method1 name="raw"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t raw() const;
                <comment>
      get the data
                </comment>
            </method1>

            <method1 name="et"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned et() const;
                <comment>
      get the Et
                </comment>
            </method1>

            <method1 name="overFlow"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool overFlow() const;
                <comment>
      get the overflow
                </comment>
            </method1>

            <method1 name="bx"
                     return="int16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
int16_t bx() const;
                <comment>
      get bunch-crossing index
                </comment>
            </method1>

            <operator name="operator=="
                      return="int"
                      args="['const L1GctEtHad&amp;']"
                      vars="['e']"
                      qual="const">
int operator==(const L1GctEtHad&amp; e) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const L1GctEtHad&amp;']"
                      vars="['e']"
                      qual="const">
int operator!=(const L1GctEtHad&amp; e) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="kEtHadMaxValue "
                 value="L1GctEtHad::kEtHadMaxValue "
                 type="enum"/>
        <typemap name="kEtHadNBits "
                 value="L1GctEtHad::kEtHadNBits "
                 type="enum"/>
        <typemap name="kEtHadOFlowBit "
                 value="L1GctEtHad::kEtHadOFlowBit "
                 type="enum"/>
        <typemap name="kRawCtorMask "
                 value="L1GctEtHad::kRawCtorMask "
                 type="enum"/>
        <typemap name="numberOfBits"
                 value="L1GctEtHad::numberOfBits"
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1GctEtHad&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1GctEtHad&amp; c);
        <comment>
    Pretty-print operator for L1GctEtHad
        </comment>
    </operator>


    <type name="L1GctEtHad"/>
    <type name="bool"/>
    <type name="const L1GctEtHad&amp;"/>
    <type name="enum numberOfBits"/>
    <type name="int"/>
    <type name="int16_t"/>
    <type name="std::string"/>
    <type name="uint16_t"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
