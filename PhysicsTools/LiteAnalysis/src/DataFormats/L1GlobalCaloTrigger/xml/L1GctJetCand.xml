<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1GctJetCand.xml
  Created:  Thu Jan 14 22:47:26 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/L1GlobalCaloTrigger/interface/L1GctJetCand.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/L1GlobalCaloTrigger/interface/L1GctJetCand.h">

    <include name="&lt;ostream&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&quot;DataFormats/L1GlobalCaloTrigger/interface/L1GctCand.h&quot;"/>
    <include name="&quot;DataFormats/L1CaloTrigger/interface/L1CaloRegionDetId.h&quot;"/>

    <class name="L1GctJetCand"
           fullname="L1GctJetCand"
           module="DataFormats.L1GlobalCaloTrigger"
           project=""
           type="regular">
        <baseclass name="public L1GctCand"/>
        <comment>
    \date June 2006
        </comment>

        <section name="public">
            <constructor name="L1GctJetCand"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1GctJetCand();
                <comment>
      default constructor (for vector initialisation etc.)
                </comment>
            </constructor>

            <constructor name="L1GctJetCand"
                         return=""
                         args="['uint16_t','bool','bool']"
                         vars="['rawData','isTau','isFor']"
                         qual="">
L1GctJetCand(uint16_t rawData, bool isTau, bool isFor);
                <comment>
      construct from raw data - used in GT
                </comment>
            </constructor>

            <constructor name="L1GctJetCand"
                         return=""
                         args="['uint16_t','bool','bool','uint16_t','uint16_t','int16_t']"
                         vars="['rawData','isTau','isFor','block','index','bx']"
                         qual="">
L1GctJetCand(uint16_t rawData, bool isTau, bool isFor, uint16_t block, uint16_t index, int16_t bx);
                <comment>
      construct from raw data with source - uesd in GCT unpacker
                </comment>
            </constructor>

            <constructor name="L1GctJetCand"
                         return=""
                         args="['unsigned','unsigned','unsigned','bool','bool']"
                         vars="['rank','phi','eta','isTau','isFor']"
                         qual="">
L1GctJetCand(unsigned rank, unsigned phi, unsigned eta, bool isTau, bool isFor);
                <comment>
      NB - eta = -6 to -0, +0 to +6. Sign is bit 3, 1 means -ve Z, 0 means +ve Z
                </comment>
            </constructor>

            <constructor name="L1GctJetCand"
                         return=""
                         args="['unsigned','unsigned','unsigned','bool','bool','uint16_t','uint16_t','int16_t']"
                         vars="['rank','phi','eta','isTau','isFor','block','index','bx']"
                         qual="">
L1GctJetCand(unsigned rank, unsigned phi, unsigned eta, bool isTau, bool isFor, uint16_t block, uint16_t index, int16_t bx);
                <comment>
      NB - eta = -6 to -0, +0 to +6. Sign is bit 3, 1 means -ve Z, 0 means +ve Z
                </comment>
            </constructor>

            <destructor name="~L1GctJetCand"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~L1GctJetCand();
                <comment>
      destructor (virtual to prevent compiler warnings)
                </comment>
            </destructor>

            <method1 name="regionId"
                     return="L1CaloRegionDetId"
                     args="['void']"
                     vars="['']"
                     qual="const">
L1CaloRegionDetId regionId() const;
                <comment>
      region associated with the candidate
                </comment>
            </method1>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name of object
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      was an object really found?
                </comment>
            </method1>

            <method1 name="raw"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t raw() const;
                <comment>
      get the raw data
                </comment>
            </method1>

            <method1 name="rank"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned rank() const;
                <comment>
      get rank bits
                </comment>
            </method1>

            <method1 name="etaIndex"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned etaIndex() const;
                <comment>
      get eta index (bit 3 is sign, 1 for -ve Z, 0 for +ve Z)
                </comment>
            </method1>

            <method1 name="etaSign"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned etaSign() const;
                <comment>
      get eta sign bit (1 for -ve Z, 0 for +ve Z)
                </comment>
            </method1>

            <method1 name="phiIndex"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned phiIndex() const;
                <comment>
      get phi index (0-17)
                </comment>
            </method1>

            <method1 name="isCentral"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool isCentral() const;
                <comment>
      check if this is a central jet
                </comment>
            </method1>

            <method1 name="isTau"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool isTau() const;
                <comment>
      check if this is a tau
                </comment>
            </method1>

            <method1 name="isForward"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool isForward() const;
                <comment>
      check if this is a forward jet
                </comment>
            </method1>

            <method1 name="capBlock"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned capBlock() const;
                <comment>
      which capture block did this come from
                </comment>
            </method1>

            <method1 name="capIndex"
                     return="unsigned"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned capIndex() const;
                <comment>
      what index within capture block
                </comment>
            </method1>

            <method1 name="bx"
                     return="int16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
int16_t bx() const;
                <comment>
      get bunch-crossing index
                </comment>
            </method1>

            <operator name="operator=="
                      return="int"
                      args="['const L1GctJetCand&amp;']"
                      vars="['c']"
                      qual="const">
int operator==(const L1GctJetCand&amp; c) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const L1GctJetCand&amp;']"
                      vars="['c']"
                      qual="const">
int operator!=(const L1GctJetCand&amp; c) const;
                <comment>
       inequality operator
                </comment>
            </operator>

        </section>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1GctJetCand&amp;']"
              vars="['s','cand']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1GctJetCand&amp; cand);
    </operator>


    <type name="L1CaloRegionDetId"/>
    <type name="L1GctCand"/>
    <type name="L1GctJetCand"/>
    <type name="bool"/>
    <type name="const L1GctJetCand&amp;"/>
    <type name="int"/>
    <type name="int16_t"/>
    <type name="std::string"/>
    <type name="uint16_t"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
