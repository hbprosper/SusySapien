<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1GctInternHFData.xml
  Created:  Thu Jan 14 22:47:25 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/L1GlobalCaloTrigger/interface/L1GctInternHFData.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/L1GlobalCaloTrigger/interface/L1GctInternHFData.h">

    <include name="&lt;ostream&gt;"/>
    <include name="&lt;string&gt;"/>

    <class name="L1GctInternHFData"
           fullname="L1GctInternHFData"
           module="DataFormats.L1GlobalCaloTrigger"
           project=""
           type="regular">
        <comment>
    Will store 4 sums/counts of up to 8 bits each
        </comment>

        <section name="public">
            <enum name="L1GctInternHFDataType">
enum L1GctInternHFDataType {
 null, 
          conc_hf_ring_et_sums, 
          conc_hf_bit_counts
  };
                <field name="null" value=""/>
                <field name="conc_hf_ring_et_sums" value=""/>
                <field name="conc_hf_bit_counts" value=""/>
                <comment>
      et sum type - not clear this is required
                </comment>
            </enum>

            <constructor name="L1GctInternHFData"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1GctInternHFData();
                <comment>
      default constructor (for vector initialisation etc.)
                </comment>
            </constructor>

            <destructor name="~L1GctInternHFData"
                        return=""
                        args="['void']"
                        vars="['']"
                        qual="">
~L1GctInternHFData();
                <comment>
      destructor
                </comment>
            </destructor>

            <method1 name="fromConcRingSums"
                     return="static L1GctInternHFData"
                     args="['const uint16_t','const uint16_t','const int16_t','const uint32_t']"
                     vars="['capBlock','capIndex','bx','data']"
                     qual="">
static L1GctInternHFData fromConcRingSums(const uint16_t capBlock, const uint16_t capIndex, const int16_t bx, const uint32_t data);
            </method1>

            <method1 name="fromConcBitCounts"
                     return="static L1GctInternHFData"
                     args="['const uint16_t','const uint16_t','const int16_t','const uint32_t']"
                     vars="['capBlock','capIndex','bx','data']"
                     qual="">
static L1GctInternHFData fromConcBitCounts(const uint16_t capBlock, const uint16_t capIndex, const int16_t bx, const uint32_t data);
            </method1>

            <method1 name="type"
                     return="L1GctInternHFData::L1GctInternHFDataType"
                     args="['void']"
                     vars="['']"
                     qual="const">
L1GctInternHFData::L1GctInternHFDataType type() const;
                <comment>
      'type' of object - not required?
                </comment>
            </method1>

            <method1 name="capBlock"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t capBlock() const;
                <comment>
      get capture block
                </comment>
            </method1>

            <method1 name="capIndex"
                     return="uint16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint16_t capIndex() const;
                <comment>
      get index within capture block
                </comment>
            </method1>

            <method1 name="bx"
                     return="int16_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
int16_t bx() const;
                <comment>
      get BX number
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      is the sum non-zero
                </comment>
            </method1>

            <method1 name="isRingSums"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool isRingSums() const;
                <comment>
      is this ring sums or bit counts?
                </comment>
            </method1>

            <method1 name="raw"
                     return="uint32_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint32_t raw() const;
                <comment>
      get the raw data
                </comment>
            </method1>

            <method1 name="value"
                     return="uint16_t"
                     args="['unsigned const']"
                     vars="['i']"
                     qual="">
uint16_t value(unsigned const i);
                <comment>
      get value
                </comment>
            </method1>

            <method1 name="et"
                     return="uint16_t"
                     args="['unsigned const']"
                     vars="['i']"
                     qual="">
uint16_t et(unsigned const i);
                <comment>
      get the et sums
                </comment>
            </method1>

            <method1 name="count"
                     return="uint16_t"
                     args="['unsigned const']"
                     vars="['i']"
                     qual="">
uint16_t count(unsigned const i);
                <comment>
      get the counts
                </comment>
            </method1>

            <method1 name="setCapBlock"
                     return="void"
                     args="['uint16_t const']"
                     vars="['capBlock']"
                     qual="">
void setCapBlock(uint16_t const capBlock);
                <comment>
      set cap block
                </comment>
            </method1>

            <method1 name="setCapIndex"
                     return="void"
                     args="['uint16_t const']"
                     vars="['capIndex']"
                     qual="">
void setCapIndex(uint16_t const capIndex);
                <comment>
      set cap index
                </comment>
            </method1>

            <method1 name="setBx"
                     return="void"
                     args="['int16_t const']"
                     vars="['bx']"
                     qual="">
void setBx(int16_t const bx);
                <comment>
      set bx
                </comment>
            </method1>

            <method1 name="setType"
                     return="void"
                     args="['L1GctInternHFDataType']"
                     vars="['type']"
                     qual="">
void setType(L1GctInternHFDataType type);
                <comment>
      set type
                </comment>
            </method1>

            <method1 name="setValue"
                     return="void"
                     args="['unsigned const','uint16_t const']"
                     vars="['i','val']"
                     qual="">
void setValue(unsigned const i, uint16_t const val);
                <comment>
      set value
                </comment>
            </method1>

            <method1 name="setEt"
                     return="void"
                     args="['unsigned const','uint16_t const']"
                     vars="['i','et']"
                     qual="">
void setEt(unsigned const i, uint16_t const et);
                <comment>
      set the sum
                </comment>
            </method1>

            <method1 name="setCount"
                     return="void"
                     args="['unsigned const','uint16_t const']"
                     vars="['i','count']"
                     qual="">
void setCount(unsigned const i, uint16_t const count);
                <comment>
      set the count
                </comment>
            </method1>

            <method1 name="setData"
                     return="void"
                     args="['uint32_t const']"
                     vars="['data']"
                     qual="">
void setData(uint32_t const data);
            </method1>

            <operator name="operator=="
                      return="bool"
                      args="['const L1GctInternHFData&amp;']"
                      vars="['c']"
                      qual="const">
bool operator==(const L1GctInternHFData&amp; c) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="bool"
                      args="['const L1GctInternHFData&amp;']"
                      vars="['c']"
                      qual="const">
bool operator!=(const L1GctInternHFData&amp; c) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="L1GctInternHFDataType"
                 value="L1GctInternHFData::L1GctInternHFDataType"
                 type="enum"/>
        <typemap name="conc_hf_bit_counts"
                 value="L1GctInternHFData::conc_hf_bit_counts"
                 type="enum"/>
        <typemap name="conc_hf_ring_et_sums"
                 value="L1GctInternHFData::conc_hf_ring_et_sums"
                 type="enum"/>
        <typemap name="null"
                 value="L1GctInternHFData::null"
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1GctInternHFData&amp;']"
              vars="['s','cand']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1GctInternHFData&amp; cand);
    </operator>


    <type name="L1GctInternHFData"/>
    <type name="L1GctInternHFData::L1GctInternHFDataType"/>
    <type name="L1GctInternHFDataType"/>
    <type name="bool"/>
    <type name="const L1GctInternHFData&amp;"/>
    <type name="const int16_t"/>
    <type name="const uint16_t"/>
    <type name="const uint32_t"/>
    <type name="enum L1GctInternHFDataType"/>
    <type name="int16_t"/>
    <type name="int16_t const"/>
    <type name="uint16_t"/>
    <type name="uint16_t const"/>
    <type name="uint32_t"/>
    <type name="uint32_t const"/>
    <type name="unsigned const"/>
    <type name="void"/>
</header>
