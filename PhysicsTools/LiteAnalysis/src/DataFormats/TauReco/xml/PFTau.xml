<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFTau.xml
  Created:  Fri Jan 15 20:47:36 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TauReco/interface/PFTau.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/TauReco/interface/PFTau.h">

    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/BaseTau.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/PFTauFwd.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/PFTauTagInfo.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidate.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h&quot;"/>
    <include name="&lt;iostream&gt;"/>
    <include name="&lt;limits&gt;"/>

    <namespace name="reco">

        <class name="PFTau"
               fullname="reco::PFTau"
               module="DataFormats.TauReco"
               project=""
               type="regular">
            <baseclass name="public BaseTau"/>

            <section name="public">
                <constructor name="PFTau"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PFTau();
                </constructor>

                <constructor name="PFTau"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)']"
                             vars="['q','','']"
                             qual="">
PFTau(Charge q, const LorentzVector&amp;, const Point&amp;=Point(0, 0, 0));
                </constructor>

                <destructor name="~PFTau"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~PFTau();
                </destructor>

                <method1 name="clone"
                         return="PFTau*"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFTau* clone() const;
                </method1>

                <method1 name="pfTauTagInfoRef"
                         return="const PFTauTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFTauTagInfoRef&amp; pfTauTagInfoRef() const;
                </method1>

                <method1 name="setpfTauTagInfoRef"
                         return="void"
                         args="['const PFTauTagInfoRef']"
                         vars="['']"
                         qual="">
void setpfTauTagInfoRef(const PFTauTagInfoRef);
                </method1>

                <method1 name="leadPFChargedHadrCand"
                         return="const PFCandidateRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRef&amp; leadPFChargedHadrCand() const;
                </method1>

                <method1 name="leadPFNeutralCand"
                         return="const PFCandidateRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRef&amp; leadPFNeutralCand() const;
                </method1>

                <method1 name="leadPFCand"
                         return="const PFCandidateRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRef&amp; leadPFCand() const;
                    <comment>
      Can be either the charged or the neutral one
                    </comment>
                </method1>

                <method1 name="setleadPFChargedHadrCand"
                         return="void"
                         args="['const PFCandidateRef&amp;']"
                         vars="['']"
                         qual="">
void setleadPFChargedHadrCand(const PFCandidateRef&amp;);
                </method1>

                <method1 name="setleadPFNeutralCand"
                         return="void"
                         args="['const PFCandidateRef&amp;']"
                         vars="['']"
                         qual="">
void setleadPFNeutralCand(const PFCandidateRef&amp;);
                </method1>

                <method1 name="setleadPFCand"
                         return="void"
                         args="['const PFCandidateRef&amp;']"
                         vars="['']"
                         qual="">
void setleadPFCand(const PFCandidateRef&amp;);
                </method1>

                <method1 name="leadPFChargedHadrCandsignedSipt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadPFChargedHadrCandsignedSipt() const;
                    <comment>
       signed transverse impact parameter significance of the Track constituting the leading charged hadron PFCandidate
                    </comment>
                </method1>

                <method1 name="setleadPFChargedHadrCandsignedSipt"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setleadPFChargedHadrCandsignedSipt(const float&amp;);
                </method1>

                <method1 name="signalPFCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; signalPFCands() const;
                    <comment>
        PFCandidates which passed quality cuts and are inside a tracker/ECAL/HCAL signal cone around leading charged hadron PFCandidate
                    </comment>
                </method1>

                <method1 name="setsignalPFCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setsignalPFCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="signalPFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; signalPFChargedHadrCands() const;
                </method1>

                <method1 name="setsignalPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setsignalPFChargedHadrCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="signalPFNeutrHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; signalPFNeutrHadrCands() const;
                </method1>

                <method1 name="setsignalPFNeutrHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setsignalPFNeutrHadrCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="signalPFGammaCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; signalPFGammaCands() const;
                </method1>

                <method1 name="setsignalPFGammaCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setsignalPFGammaCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="isolationPFCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; isolationPFCands() const;
                    <comment>
       PFCandidates which passed quality cuts and are inside a tracker/ECAL/HCAL isolation annulus around leading charged hadron PFCandidate
                    </comment>
                </method1>

                <method1 name="setisolationPFCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="isolationPFChargedHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; isolationPFChargedHadrCands() const;
                </method1>

                <method1 name="setisolationPFChargedHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFChargedHadrCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="isolationPFNeutrHadrCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; isolationPFNeutrHadrCands() const;
                </method1>

                <method1 name="setisolationPFNeutrHadrCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFNeutrHadrCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="isolationPFGammaCands"
                         return="const PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFCandidateRefVector&amp; isolationPFGammaCands() const;
                </method1>

                <method1 name="setisolationPFGammaCands"
                         return="void"
                         args="['const PFCandidateRefVector&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFGammaCands(const PFCandidateRefVector&amp;);
                </method1>

                <method1 name="isolationPFChargedHadrCandsPtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationPFChargedHadrCandsPtSum() const;
                    <comment>
       sum of Pt of the charged hadr. PFCandidates inside a tracker isolation annulus around leading charged hadron PFCandidate ; NaN if no leading charged hadron PFCandidate
                    </comment>
                </method1>

                <method1 name="setisolationPFChargedHadrCandsPtSum"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFChargedHadrCandsPtSum(const float&amp;);
                </method1>

                <method1 name="isolationPFGammaCandsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationPFGammaCandsEtSum() const;
                    <comment>
       sum of Et of the gamma PFCandidates inside an ECAL isolation annulus around leading charged hadron PFCandidate ; NaN if no leading charged hadron PFCandidate
                    </comment>
                </method1>

                <method1 name="setisolationPFGammaCandsEtSum"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setisolationPFGammaCandsEtSum(const float&amp;);
                </method1>

                <method1 name="maximumHCALPFClusterEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float maximumHCALPFClusterEt() const;
                    <comment>
       Et of the highest Et HCAL PFCluster
                    </comment>
                </method1>

                <method1 name="setmaximumHCALPFClusterEt"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setmaximumHCALPFClusterEt(const float&amp;);
                </method1>

                <method1 name="emFraction"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float emFraction() const;
                    <comment>
      Electron rejection
                    </comment>
                </method1>

                <method1 name="hcalTotOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalTotOverPLead() const;
                </method1>

                <method1 name="hcalMaxOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalMaxOverPLead() const;
                </method1>

                <method1 name="hcal3x3OverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcal3x3OverPLead() const;
                </method1>

                <method1 name="ecalStripSumEOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalStripSumEOverPLead() const;
                </method1>

                <method1 name="bremsRecoveryEOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float bremsRecoveryEOverPLead() const;
                </method1>

                <method1 name="electronPreIDTrack"
                         return="reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::TrackRef electronPreIDTrack() const;
                </method1>

                <method1 name="electronPreIDOutput"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float electronPreIDOutput() const;
                </method1>

                <method1 name="electronPreIDDecision"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool electronPreIDDecision() const;
                </method1>

                <method1 name="setemFraction"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setemFraction(const float&amp;);
                </method1>

                <method1 name="sethcalTotOverPLead"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void sethcalTotOverPLead(const float&amp;);
                </method1>

                <method1 name="sethcalMaxOverPLead"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void sethcalMaxOverPLead(const float&amp;);
                </method1>

                <method1 name="sethcal3x3OverPLead"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void sethcal3x3OverPLead(const float&amp;);
                </method1>

                <method1 name="setecalStripSumEOverPLead"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setecalStripSumEOverPLead(const float&amp;);
                </method1>

                <method1 name="setbremsRecoveryEOverPLead"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setbremsRecoveryEOverPLead(const float&amp;);
                </method1>

                <method1 name="setelectronPreIDTrack"
                         return="void"
                         args="['const reco::TrackRef&amp;']"
                         vars="['']"
                         qual="">
void setelectronPreIDTrack(const reco::TrackRef&amp;);
                </method1>

                <method1 name="setelectronPreIDOutput"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setelectronPreIDOutput(const float&amp;);
                </method1>

                <method1 name="setelectronPreIDDecision"
                         return="void"
                         args="['const bool&amp;']"
                         vars="['']"
                         qual="">
void setelectronPreIDDecision(const bool&amp;);
                </method1>

                <method1 name="hasMuonReference"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool hasMuonReference() const;
                    <comment>
      end of Electron rejection
   For Muon Rejection
                    </comment>
                </method1>

                <method1 name="caloComp"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloComp() const;
                </method1>

                <method1 name="segComp"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float segComp() const;
                </method1>

                <method1 name="muonDecision"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool muonDecision() const;
                </method1>

                <method1 name="setCaloComp"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setCaloComp(const float&amp;);
                </method1>

                <method1 name="setSegComp"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setSegComp(const float&amp;);
                </method1>

                <method1 name="setMuonDecision"
                         return="void"
                         args="['const bool&amp;']"
                         vars="['']"
                         qual="">
void setMuonDecision(const bool&amp;);
                </method1>

                <method1 name="numberOfSourceCandidatePtrs"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type numberOfSourceCandidatePtrs() const;
                    <comment>
        which is the corresponding PFJet
                    </comment>
                </method1>

                <method1 name="sourceCandidatePtr"
                         return="CandidatePtr"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
CandidatePtr sourceCandidatePtr(size_type i) const;
                    <comment>
        ( the candidates used to construct this Candidate)
                    </comment>
                </method1>

                <method1 name="dump"
                         return="void"
                         args="['std::ostream&amp;=std::cout']"
                         vars="['out']"
                         qual="const">
void dump(std::ostream&amp; out=std::cout) const;
                    <comment>
        prints information on this PFTau
                    </comment>
                </method1>

            </section>

        </class>
        <operator name="operator&lt;&lt;"
                  return="std::ostream&amp;"
                  args="['std::ostream&amp;','const PFTau&amp;']"
                  vars="['out','c']"
                  qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const PFTau&amp; c);
        </operator>

    </namespace>

    <type name="BaseTau"/>
    <type name="CandidatePtr"/>
    <type name="Charge"/>
    <type name="PFTau*"/>
    <type name="bool"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const PFCandidateRef&amp;"/>
    <type name="const PFCandidateRefVector&amp;"/>
    <type name="const PFTauTagInfoRef"/>
    <type name="const PFTauTagInfoRef&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const bool&amp;"/>
    <type name="const float&amp;"/>
    <type name="const reco::TrackRef&amp;"/>
    <type name="float"/>
    <type name="reco::PFTau"/>
    <type name="reco::TrackRef"/>
    <type name="size_type"/>
    <type name="std::ostream&amp;"/>
    <type name="void"/>
</header>
