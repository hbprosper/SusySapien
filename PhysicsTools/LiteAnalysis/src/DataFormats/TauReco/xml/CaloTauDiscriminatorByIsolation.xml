<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CaloTauDiscriminatorByIsolation.xml
  Created:  Fri Jan 15 20:47:34 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TauReco/interface/CaloTauDiscriminatorByIsolation.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/TauReco/interface/CaloTauDiscriminatorByIsolation.h">

    <include name="&quot;DataFormats/Common/interface/AssociationVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/CaloTau.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="reco">
        <typedef name="CaloTauDiscriminatorByIsolationBase"
                 value="edm::AssociationVector&lt;CaloTauRefProd, std::vector&lt;int&gt; &gt;">
typedef edm::AssociationVector&lt;CaloTauRefProd, std::vector&lt;int&gt; &gt; CaloTauDiscriminatorByIsolationBase;
        </typedef>


        <class name="CaloTauDiscriminatorByIsolation"
               fullname="reco::CaloTauDiscriminatorByIsolation"
               module="DataFormats.TauReco"
               project=""
               type="regular">
            <baseclass name="public CaloTauDiscriminatorByIsolationBase"/>

            <section name="public">
                <constructor name="CaloTauDiscriminatorByIsolation"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CaloTauDiscriminatorByIsolation();
                </constructor>

                <constructor name="CaloTauDiscriminatorByIsolation"
                             return=""
                             args="['const reco::CaloTauRefProd&amp;']"
                             vars="['ref']"
                             qual="">
CaloTauDiscriminatorByIsolation(const reco::CaloTauRefProd&amp; ref);
                </constructor>

                <constructor name="CaloTauDiscriminatorByIsolation"
                             return=""
                             args="['const CaloTauDiscriminatorByIsolationBase&amp;']"
                             vars="['v']"
                             qual="">
CaloTauDiscriminatorByIsolation(const CaloTauDiscriminatorByIsolationBase&amp; v);
                </constructor>

            </section>

        </class>
        <typedef name="CaloTauDiscriminatorByIsolationVT"
                 value="CaloTauDiscriminatorByIsolation::value_type">
typedef CaloTauDiscriminatorByIsolation::value_type CaloTauDiscriminatorByIsolationVT;
        </typedef>

        <typedef name="CaloTauDiscriminatorByIsolationRef"
                 value="edm::Ref&lt;CaloTauDiscriminatorByIsolation&gt;">
typedef edm::Ref&lt;CaloTauDiscriminatorByIsolation&gt; CaloTauDiscriminatorByIsolationRef;
        </typedef>

        <typedef name="CaloTauDiscriminatorByIsolationRefProd"
                 value="edm::RefProd&lt;CaloTauDiscriminatorByIsolation&gt;">
typedef edm::RefProd&lt;CaloTauDiscriminatorByIsolation&gt; CaloTauDiscriminatorByIsolationRefProd;
        </typedef>

        <typedef name="CaloTauDiscriminatorByIsolationRefVector"
                 value="edm::RefVector&lt;CaloTauDiscriminatorByIsolation&gt;">
typedef edm::RefVector&lt;CaloTauDiscriminatorByIsolation&gt; CaloTauDiscriminatorByIsolationRefVector;
        </typedef>

    </namespace>

    <type name="CaloTauDiscriminatorByIsolationBase"/>
    <type name="const CaloTauDiscriminatorByIsolationBase&amp;"/>
    <type name="const reco::CaloTauRefProd&amp;"/>
    <type name="reco::CaloTauDiscriminatorByIsolation"/>
    <type name="void"/>
</header>
