<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CaloTau.xml
  Created:  Thu Jan 14 22:48:38 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TauReco/interface/CaloTau.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/TauReco/interface/CaloTau.h">

    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/BaseTau.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/CaloTauFwd.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/CaloTauTagInfo.h&quot;"/>
    <include name="&lt;limits&gt;"/>

    <namespace name="reco">

        <class name="CaloTau"
               fullname="reco::CaloTau"
               module="DataFormats.TauReco"
               project=""
               type="regular">
            <baseclass name="public BaseTau"/>

            <section name="public">
                <constructor name="CaloTau"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CaloTau();
                </constructor>

                <constructor name="CaloTau"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)']"
                             vars="['q','','']"
                             qual="">
CaloTau(Charge q, const LorentzVector&amp;, const Point&amp;=Point(0, 0, 0));
                </constructor>

                <destructor name="~CaloTau"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CaloTau();
                </destructor>

                <method1 name="clone"
                         return="CaloTau*"
                         args="['void']"
                         vars="['']"
                         qual="const">
CaloTau* clone() const;
                </method1>

                <method1 name="caloTauTagInfoRef"
                         return="const CaloTauTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const CaloTauTagInfoRef&amp; caloTauTagInfoRef() const;
                </method1>

                <method1 name="setcaloTauTagInfoRef"
                         return="void"
                         args="['const CaloTauTagInfoRef']"
                         vars="['']"
                         qual="">
void setcaloTauTagInfoRef(const CaloTauTagInfoRef);
                </method1>

                <method1 name="leadTracksignedSipt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTracksignedSipt() const;
                    <comment>
       signed transverse impact parameter significance of leading Track ; NaN if no leading Track
                    </comment>
                </method1>

                <method1 name="setleadTracksignedSipt"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setleadTracksignedSipt(const float&amp;);
                </method1>

                <method1 name="leadTrackHCAL3x3hitsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTrackHCAL3x3hitsEtSum() const;
                    <comment>
       sum of Et of HCAL hits inside a 3x3 calo. tower matrix centered on direction of propag. leading Track - ECAL inner surf. contact point ; NaN if no leading Track or if invalid propag. leading Track - ECAL inner surf. contact point
                    </comment>
                </method1>

                <method1 name="setleadTrackHCAL3x3hitsEtSum"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setleadTrackHCAL3x3hitsEtSum(const float&amp;);
                </method1>

                <method1 name="leadTrackHCAL3x3hottesthitDEta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTrackHCAL3x3hottesthitDEta() const;
                    <comment>
       |DEta| between direction of propag. leading Track - ECAL inner surf. contact point and direction of highest Et hit among HCAL hits inside a 3x3 calo. tower matrix centered on direction of propag. leading Track - ECAL inner surf. contact point ; NaN if no leading Track or if invalid propag. leading Track - ECAL inner surf. contact point
                    </comment>
                </method1>

                <method1 name="setleadTrackHCAL3x3hottesthitDEta"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setleadTrackHCAL3x3hottesthitDEta(const float&amp;);
                </method1>

                <method1 name="signalTracksInvariantMass"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float signalTracksInvariantMass() const;
                    <comment>
       invariant mass of the system of Tracks inside a signal cone around leading Track ; NaN if no leading Track
                    </comment>
                </method1>

                <method1 name="setsignalTracksInvariantMass"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setsignalTracksInvariantMass(const float&amp;);
                </method1>

                <method1 name="TracksInvariantMass"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float TracksInvariantMass() const;
                    <comment>
       invariant mass of the system of Tracks ; NaN if no Track
                    </comment>
                </method1>

                <method1 name="setTracksInvariantMass"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setTracksInvariantMass(const float&amp;);
                </method1>

                <method1 name="isolationTracksPtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationTracksPtSum() const;
                    <comment>
       sum of Pt of the Tracks inside a tracker isolation annulus around leading Track ; NaN if no leading Track
                    </comment>
                </method1>

                <method1 name="setisolationTracksPtSum"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setisolationTracksPtSum(const float&amp;);
                </method1>

                <method1 name="isolationECALhitsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationECALhitsEtSum() const;
                    <comment>
       sum of Et of ECAL RecHits inside an ECAL isolation annulus around leading Track ; NaN if no leading Track
                    </comment>
                </method1>

                <method1 name="setisolationECALhitsEtSum"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setisolationECALhitsEtSum(const float&amp;);
                </method1>

                <method1 name="maximumHCALhitEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float maximumHCALhitEt() const;
                    <comment>
       Et of the highest Et HCAL hit
                    </comment>
                </method1>

                <method1 name="setmaximumHCALhitEt"
                         return="void"
                         args="['const float&amp;']"
                         vars="['']"
                         qual="">
void setmaximumHCALhitEt(const float&amp;);
                </method1>

            </section>

        </class>
    </namespace>

    <type name="BaseTau"/>
    <type name="CaloTau*"/>
    <type name="Charge"/>
    <type name="const CaloTauTagInfoRef"/>
    <type name="const CaloTauTagInfoRef&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const float&amp;"/>
    <type name="float"/>
    <type name="reco::CaloTau"/>
    <type name="void"/>
</header>
