<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFTauDecayMode.xml
  Created:  Thu Jan 14 22:48:44 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TauReco/interface/PFTauDecayMode.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/TauReco/interface/PFTauDecayMode.h">

    <include name="&quot;DataFormats/Candidate/interface/CompositeCandidate.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/VertexCompositeCandidate.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidate.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/PFTau.h&quot;"/>
    <include name="&quot;DataFormats/TauReco/interface/PFTauDecayModeFwd.h&quot;"/>
    <include name="&quot;FWCore/MessageLogger/interface/MessageLogger.h&quot;"/>

    <namespace name="reco">

        <class name="PFTauDecayMode"
               fullname="reco::PFTauDecayMode"
               module="DataFormats.TauReco"
               project=""
               type="regular">
            <baseclass name="public CompositeCandidate"/>

            <section name="public">
                <constant name="maxNumberOfPiZeroCandidatesAllowed"
                          type="const static unsigned char"
                          value="4"/>
                <enum name="hadronicTauDecayModes">
enum hadronicTauDecayModes
      {

         tauDecay1ChargedPion0PiZero, 
         tauDecay1ChargedPion1PiZero, 
         tauDecay1ChargedPion2PiZero, 
         tauDecay1ChargedPion3PiZero, 
         tauDecay1ChargedPion4PiZero, 
         tauDecay2ChargedPion0PiZero, 
         tauDecay2ChargedPion1PiZero, 
         tauDecay2ChargedPion2PiZero, 
         tauDecay2ChargedPion3PiZero, 
         tauDecay2ChargedPion4PiZero, 
         tauDecay3ChargedPion0PiZero, 
         tauDecay3ChargedPion1PiZero, 
         tauDecay3ChargedPion2PiZero, 
         tauDecay3ChargedPion3PiZero, 
         tauDecay3ChargedPion4PiZero, 
         tauDecaysElectron, 
         tauDecayMuon, 
         tauDecayOther
      };
                    <field name="tauDecay1ChargedPion0PiZero" value=""/>
                    <field name="tauDecay1ChargedPion1PiZero" value=""/>
                    <field name="tauDecay1ChargedPion2PiZero" value=""/>
                    <field name="tauDecay1ChargedPion3PiZero" value=""/>
                    <field name="tauDecay1ChargedPion4PiZero" value=""/>
                    <field name="tauDecay2ChargedPion0PiZero" value=""/>
                    <field name="tauDecay2ChargedPion1PiZero" value=""/>
                    <field name="tauDecay2ChargedPion2PiZero" value=""/>
                    <field name="tauDecay2ChargedPion3PiZero" value=""/>
                    <field name="tauDecay2ChargedPion4PiZero" value=""/>
                    <field name="tauDecay3ChargedPion0PiZero" value=""/>
                    <field name="tauDecay3ChargedPion1PiZero" value=""/>
                    <field name="tauDecay3ChargedPion2PiZero" value=""/>
                    <field name="tauDecay3ChargedPion3PiZero" value=""/>
                    <field name="tauDecay3ChargedPion4PiZero" value=""/>
                    <field name="tauDecaysElectron" value=""/>
                    <field name="tauDecayMuon" value=""/>
                    <field name="tauDecayOther" value=""/>
                </enum>

                <constructor name="PFTauDecayMode"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PFTauDecayMode();
                </constructor>

                <constructor name="PFTauDecayMode"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=12','int=2','bool=true']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
PFTauDecayMode(Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=12, int status=2, bool integerCharge=true);
                    <comment>
          constructor from values
                    </comment>
                </constructor>

                <constructor name="PFTauDecayMode"
                             return=""
                             args="['const VertexCompositeCandidate&amp;','const CompositeCandidate&amp;','const CompositeCandidate&amp;']"
                             vars="['chargedPions','piZeroes','filteredObjects']"
                             qual="">
PFTauDecayMode(const VertexCompositeCandidate&amp; chargedPions, const CompositeCandidate&amp; piZeroes, const CompositeCandidate&amp; filteredObjects);
                    <comment>
          constructor from candidate content
                    </comment>
                </constructor>

                <destructor name="~PFTauDecayMode"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~PFTauDecayMode();
                </destructor>

                <method1 name="clone"
                         return="PFTauDecayMode*"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFTauDecayMode* clone() const;
                </method1>

                <method1 name="pfTauRef"
                         return="const PFTauRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const PFTauRef&amp; pfTauRef() const;
                    <comment>
          return reference to associated PFTau object
                    </comment>
                </method1>

                <method1 name="setPFTauRef"
                         return="void"
                         args="['const PFTauRef&amp;']"
                         vars="['theTau']"
                         qual="">
void setPFTauRef(const PFTauRef&amp; theTau);
                </method1>

                <method1 name="getDecayMode"
                         return="hadronicTauDecayModes"
                         args="['void']"
                         vars="['']"
                         qual="const">
hadronicTauDecayModes getDecayMode() const;
                </method1>

                <method1 name="setDecayMode"
                         return="void"
                         args="['hadronicTauDecayModes']"
                         vars="['theDecayMode']"
                         qual="">
void setDecayMode(hadronicTauDecayModes theDecayMode);
                </method1>

                <method1 name="chargedPions"
                         return="const VertexCompositeCandidate&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const VertexCompositeCandidate&amp; chargedPions() const;
                    <comment>
          returns collection of charged pions w/ vertex information (tracks are refit)
                    </comment>
                </method1>

                <method1 name="neutralPions"
                         return="const CompositeCandidate&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const CompositeCandidate&amp; neutralPions() const;
                    <comment>
          returns a collection of merged Pi0s
                    </comment>
                </method1>

                <method1 name="filteredObjects"
                         return="const CompositeCandidate&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const CompositeCandidate&amp; filteredObjects() const;
                    <comment>
          returns references to PF objects that were filtered
                    </comment>
                </method1>

                <method2 name="chargedPionCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;const Candidate*&gt; chargedPionCandidates() const;
                    <comment>
          returns pointers to charged pions
                    </comment>
                </method2>

                <method2 name="neutralPionCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;const Candidate*&gt; neutralPionCandidates() const;
                    <comment>
          returns pointers to neutral pions
                    </comment>
                </method2>

                <method2 name="decayProductCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;const Candidate*&gt; decayProductCandidates() const;
                    <comment>
          returns pointers to non-filtered objects
                    </comment>
                </method2>

                <method2 name="filteredObjectCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['int=-2']"
                         vars="['absCharge']"
                         qual="const">
std::vector&lt;const Candidate*&gt; filteredObjectCandidates(int absCharge=-2) const;
                    <comment>
          returns pointers to filtered objects (i.e. those not included in signal objects)
                    </comment>
                </method2>

                <method2 name="neutralFilteredObjectCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;const Candidate*&gt; neutralFilteredObjectCandidates() const;
                    <comment>
          returns only netural filtered objects
                    </comment>
                </method2>

                <method2 name="chargedFilteredObjectCandidates"
                         return="std::vector&lt;const Candidate*&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;const Candidate*&gt; chargedFilteredObjectCandidates() const;
                    <comment>
          returns only charged filtered objects
                    </comment>
                </method2>

                <method1 name="pfMasterClones"
                         return="void"
                         args="['const Candidate*','PFCandidateRefVector&amp;']"
                         vars="['input','toFill']"
                         qual="const">
void pfMasterClones(const Candidate* input, PFCandidateRefVector&amp; toFill) const;
                    <comment>
          fills master clones to PF objects (utility function)
                    </comment>
                </method1>

                <method1 name="associatedChargedPFCandidates"
                         return="PFCandidateRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFCandidateRefVector associatedChargedPFCandidates() const;
                    <comment>
          returns the PFCandidates associated to the charged signal objects
                    </comment>
                </method1>

                <method1 name="associatedNeutralPFCandidates"
                         return="PFCandidateRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFCandidateRefVector associatedNeutralPFCandidates() const;
                    <comment>
          returns the PFCandidates associated to the PiZero signal objects (i.e., the unmerged photons)
                    </comment>
                </method1>

                <method1 name="filteredPFCandidates"
                         return="PFCandidateRefVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFCandidateRefVector filteredPFCandidates() const;
                    <comment>
          returns the PFCandidates that were filtered
                    </comment>
                </method1>

            </section>

            <typemap name="hadronicTauDecayModes"
                     value="reco::PFTauDecayMode::hadronicTauDecayModes"
                     type="enum"/>
            <typemap name="tauDecay1ChargedPion0PiZero"
                     value="reco::PFTauDecayMode::tauDecay1ChargedPion0PiZero"
                     type="enum"/>
            <typemap name="tauDecay1ChargedPion1PiZero"
                     value="reco::PFTauDecayMode::tauDecay1ChargedPion1PiZero"
                     type="enum"/>
            <typemap name="tauDecay1ChargedPion2PiZero"
                     value="reco::PFTauDecayMode::tauDecay1ChargedPion2PiZero"
                     type="enum"/>
            <typemap name="tauDecay1ChargedPion3PiZero"
                     value="reco::PFTauDecayMode::tauDecay1ChargedPion3PiZero"
                     type="enum"/>
            <typemap name="tauDecay1ChargedPion4PiZero"
                     value="reco::PFTauDecayMode::tauDecay1ChargedPion4PiZero"
                     type="enum"/>
            <typemap name="tauDecay2ChargedPion0PiZero"
                     value="reco::PFTauDecayMode::tauDecay2ChargedPion0PiZero"
                     type="enum"/>
            <typemap name="tauDecay2ChargedPion1PiZero"
                     value="reco::PFTauDecayMode::tauDecay2ChargedPion1PiZero"
                     type="enum"/>
            <typemap name="tauDecay2ChargedPion2PiZero"
                     value="reco::PFTauDecayMode::tauDecay2ChargedPion2PiZero"
                     type="enum"/>
            <typemap name="tauDecay2ChargedPion3PiZero"
                     value="reco::PFTauDecayMode::tauDecay2ChargedPion3PiZero"
                     type="enum"/>
            <typemap name="tauDecay2ChargedPion4PiZero"
                     value="reco::PFTauDecayMode::tauDecay2ChargedPion4PiZero"
                     type="enum"/>
            <typemap name="tauDecay3ChargedPion0PiZero"
                     value="reco::PFTauDecayMode::tauDecay3ChargedPion0PiZero"
                     type="enum"/>
            <typemap name="tauDecay3ChargedPion1PiZero"
                     value="reco::PFTauDecayMode::tauDecay3ChargedPion1PiZero"
                     type="enum"/>
            <typemap name="tauDecay3ChargedPion2PiZero"
                     value="reco::PFTauDecayMode::tauDecay3ChargedPion2PiZero"
                     type="enum"/>
            <typemap name="tauDecay3ChargedPion3PiZero"
                     value="reco::PFTauDecayMode::tauDecay3ChargedPion3PiZero"
                     type="enum"/>
            <typemap name="tauDecay3ChargedPion4PiZero"
                     value="reco::PFTauDecayMode::tauDecay3ChargedPion4PiZero"
                     type="enum"/>
            <typemap name="tauDecayMuon"
                     value="reco::PFTauDecayMode::tauDecayMuon"
                     type="enum"/>
            <typemap name="tauDecayOther"
                     value="reco::PFTauDecayMode::tauDecayOther"
                     type="enum"/>
            <typemap name="tauDecaysElectron"
                     value="reco::PFTauDecayMode::tauDecaysElectron"
                     type="enum"/>

        </class>
    </namespace>

    <type name="Charge"/>
    <type name="CompositeCandidate"/>
    <type name="PFCandidateRefVector"/>
    <type name="PFCandidateRefVector&amp;"/>
    <type name="PFTauDecayMode*"/>
    <type name="bool"/>
    <type name="const Candidate*"/>
    <type name="const CompositeCandidate&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const PFTauRef&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const VertexCompositeCandidate&amp;"/>
    <type name="enum hadronicTauDecayModes"/>
    <type name="hadronicTauDecayModes"/>
    <type name="int"/>
    <type name="reco::PFTauDecayMode"/>
    <type name="std::vector&lt;const Candidate*&gt;"/>
    <type name="void"/>
</header>
