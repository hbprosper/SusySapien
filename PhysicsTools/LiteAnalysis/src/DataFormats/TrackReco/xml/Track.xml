<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Track.xml
  Created:  Fri Jan 15 20:47:40 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TrackReco/interface/Track.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/TrackReco/interface/Track.h">

    <include name="&quot;DataFormats/TrackReco/interface/TrackBase.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackExtra.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackExtraFwd.h&quot;"/>
    <include name="&quot;DataFormats/TrackingRecHit/interface/TrackingRecHitFwd.h&quot;"/>

    <namespace name="reco">

        <class name="Track"
               fullname="reco::Track"
               module="DataFormats.TrackReco"
               project=""
               type="regular">
            <baseclass name="public TrackBase"/>

            <section name="public">
                <constructor name="Track"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Track();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <destructor name="~Track"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Track();
                    <comment>
        virtual destructor
                    </comment>
                </destructor>

                <constructor name="Track"
                             return=""
                             args="['double','double','const Point&amp;','const Vector&amp;','int','const CovarianceMatrix&amp;','TrackAlgorithm=undefAlgorithm','TrackQuality=undefQuality']"
                             vars="['chi2','ndof','referencePoint','momentum','charge','','','quality']"
                             qual="">
Track(double chi2, double ndof, const Point&amp; referencePoint, const Vector&amp; momentum, int charge, const CovarianceMatrix&amp;, TrackAlgorithm=undefAlgorithm, TrackQuality quality=undefQuality);
                    <comment>
        constructor from fit parameters and error matrix
                    </comment>
                </constructor>

                <method1 name="outerOk"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool outerOk() const;
                    <comment>
        return true if the outermost hit is valid
                    </comment>
                </method1>

                <method1 name="innerOk"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool innerOk() const;
                    <comment>
        return true if the innermost hit is valid
                    </comment>
                </method1>

                <method1 name="innerPosition"
                         return="const math::XYZPoint&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const math::XYZPoint&amp; innerPosition() const;
                    <comment>
        position of the innermost hit
                    </comment>
                </method1>

                <method1 name="innerMomentum"
                         return="const math::XYZVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const math::XYZVector&amp; innerMomentum() const;
                    <comment>
        momentum vector at the innermost hit position
                    </comment>
                </method1>

                <method1 name="outerPosition"
                         return="const math::XYZPoint&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const math::XYZPoint&amp; outerPosition() const;
                    <comment>
        position of the outermost hit
                    </comment>
                </method1>

                <method1 name="outerMomentum"
                         return="const math::XYZVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const math::XYZVector&amp; outerMomentum() const;
                    <comment>
        momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerStateCovariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix outerStateCovariance() const;
                    <comment>
        outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="innerStateCovariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix innerStateCovariance() const;
                    <comment>
        innermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="fillOuter"
                         return="CovarianceMatrix&amp;"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const">
CovarianceMatrix&amp; fillOuter(CovarianceMatrix&amp; v) const;
                    <comment>
        fill outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="fillInner"
                         return="CovarianceMatrix&amp;"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const">
CovarianceMatrix&amp; fillInner(CovarianceMatrix&amp; v) const;
                    <comment>
        fill outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="outerDetId"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int outerDetId() const;
                    <comment>
        DetId of the detector on which surface the outermost state is located
                    </comment>
                </method1>

                <method1 name="innerDetId"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int innerDetId() const;
                    <comment>
        DetId of the detector on which surface the innermost state is located
                    </comment>
                </method1>

                <method1 name="recHitsBegin"
                         return="trackingRecHit_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
trackingRecHit_iterator recHitsBegin() const;
                    <comment>
        Iterator to first hit on the track.
                    </comment>
                </method1>

                <method1 name="recHitsEnd"
                         return="trackingRecHit_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
trackingRecHit_iterator recHitsEnd() const;
                    <comment>
        Iterator to last hit on the track.
                    </comment>
                </method1>

                <method1 name="recHit"
                         return="TrackingRecHitRef"
                         args="['size_t']"
                         vars="['i']"
                         qual="const">
TrackingRecHitRef recHit(size_t i) const;
                    <comment>
        Get i-th hit on the track.
                    </comment>
                </method1>

                <method1 name="recHitsSize"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t recHitsSize() const;
                    <comment>
        Get number of RecHits. (Warning, this includes invalid hits, which are not physical hits).
                    </comment>
                </method1>

                <method1 name="outerPx"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPx() const;
                    <comment>
        x coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPy"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPy() const;
                    <comment>
        y coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPz() const;
                    <comment>
        z coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerX"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerX() const;
                    <comment>
        x coordinate of the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerY"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerY() const;
                    <comment>
        y coordinate of the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerZ"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerZ() const;
                    <comment>
        z coordinate of the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerP"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerP() const;
                    <comment>
        magnitude of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPt() const;
                    <comment>
        transverse momentum at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPhi"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPhi() const;
                    <comment>
        azimuthal angle of the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerEta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerEta() const;
                    <comment>
        pseudorapidity of the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerTheta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerTheta() const;
                    <comment>
        polar angle of the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerRadius"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerRadius() const;
                    <comment>
        polar radius of the outermost hit position
                    </comment>
                </method1>

                <method1 name="setExtra"
                         return="void"
                         args="['const TrackExtraRef&amp;']"
                         vars="['ref']"
                         qual="">
void setExtra(const TrackExtraRef&amp; ref);
                    <comment>
        set reference to &quot;extra&quot; object
                    </comment>
                </method1>

                <method1 name="extra"
                         return="const TrackExtraRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackExtraRef&amp; extra() const;
                    <comment>
        reference to &quot;extra&quot; object
                    </comment>
                </method1>

                <method1 name="found"
                         return="unsigned short"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned short found() const;
                    <comment>
        Number of valid hits on track.
                    </comment>
                </method1>

                <method1 name="lost"
                         return="unsigned short"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned short lost() const;
                    <comment>
        Number of lost (=invalid) hits on track.
                    </comment>
                </method1>

                <method1 name="seedDirection"
                         return="PropagationDirection"
                         args="['void']"
                         vars="['']"
                         qual="const">
PropagationDirection seedDirection() const;
                    <comment>
        direction of how the hits were sorted in the original seed
                    </comment>
                </method1>

                <method2 name="seedRef"
                         return="edm::RefToBase&lt;TrajectorySeed&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
edm::RefToBase&lt;TrajectorySeed&gt; seedRef() const;
                    <comment>
         return the edm::reference to the trajectory seed in the original
         seeds collection. If the collection has been dropped from the
         Event, the reference may be invalid. Its validity should be tested,
         before the reference is actually used.
                    </comment>
                </method2>

                <method1 name="residuals"
                         return="const TrackResiduals&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackResiduals&amp; residuals () const;
                    <comment>
         precision per hit
                    </comment>
                </method1>

                <method1 name="residualX"
                         return="double"
                         args="['int']"
                         vars="['position']"
                         qual="const">
double residualX (int position) const;
                    <comment>
        this position is aligned with the position in the HitPattern
                    </comment>
                </method1>

                <method1 name="residualY"
                         return="double"
                         args="['int']"
                         vars="['position']"
                         qual="const">
double residualY (int position) const;
                </method1>

            </section>

        </class>
    </namespace>

    <type name="CovarianceMatrix"/>
    <type name="CovarianceMatrix&amp;"/>
    <type name="PropagationDirection"/>
    <type name="TrackAlgorithm"/>
    <type name="TrackBase"/>
    <type name="TrackQuality"/>
    <type name="TrackingRecHitRef"/>
    <type name="bool"/>
    <type name="const CovarianceMatrix&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const TrackExtraRef&amp;"/>
    <type name="const TrackResiduals&amp;"/>
    <type name="const Vector&amp;"/>
    <type name="const math::XYZPoint&amp;"/>
    <type name="const math::XYZVector&amp;"/>
    <type name="double"/>
    <type name="edm::RefToBase&lt;TrajectorySeed&gt;"/>
    <type name="int"/>
    <type name="reco::Track"/>
    <type name="size_t"/>
    <type name="trackingRecHit_iterator"/>
    <type name="unsigned int"/>
    <type name="unsigned short"/>
    <type name="void"/>
</header>
