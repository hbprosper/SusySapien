<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TrackExtra.xml
  Created:  Thu Jan 14 22:48:51 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TrackReco/interface/TrackExtra.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/TrackReco/interface/TrackExtra.h">

    <include name="&lt;Rtypes.h&gt;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Error.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackExtraBase.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackResiduals.h&quot;"/>
    <include name="&quot;DataFormats/TrajectorySeed/interface/PropagationDirection.h&quot;"/>
    <include name="&quot;DataFormats/TrajectorySeed/interface/TrajectorySeed.h&quot;"/>

    <namespace name="reco">

        <class name="TrackExtra"
               fullname="reco::TrackExtra"
               module="DataFormats.TrackReco"
               project=""
               type="regular">
            <baseclass name="public TrackExtraBase"/>

            <section name="public">
                <enum name="">
enum {
 dimension=5 };
                    <field name="dimension" value="5"/>
                    <comment>
        tracker parameter dimension
                    </comment>
                </enum>

                <enum name="">
enum {
 covarianceSize=dimension* (dimension+1)/2 };
                    <field name="covarianceSize"
                           value="dimension* (dimension+1)/2"/>
                    <comment>
        track error matrix size
                    </comment>
                </enum>

                <typedef name="Point"
                         value="math::XYZPoint">
typedef math::XYZPoint Point;
                    <comment>
        point in the space
                    </comment>
                </typedef>

                <typedef name="Vector"
                         value="math::XYZVector">
typedef math::XYZVector Vector;
                    <comment>
        spatial vector
                    </comment>
                </typedef>

                <typedef name="CovarianceMatrix"
                         value="math::Error&lt;5&gt;::type">
typedef math::Error&lt;5&gt;::type CovarianceMatrix;
                    <comment>
        5 parameter covariance matrix
                    </comment>
                </typedef>

                <typedef name="index"
                         value="unsigned int">
typedef unsigned int index;
                    <comment>
        index type
                    </comment>
                </typedef>

                <constructor name="TrackExtra"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrackExtra();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="TrackExtra"
                             return=""
                             args="['const Point&amp;','const Vector&amp;','bool','const Point&amp;','const Vector&amp;','bool','const CovarianceMatrix&amp;','unsigned int','const CovarianceMatrix&amp;','unsigned int','PropagationDirection','edm::RefToBase&lt;TrajectorySeed&gt;=edm::RefToBase&lt;TrajectorySeed&gt;()']"
                             vars="['outerPosition','outerMomentum','ok','innerPosition','innerMomentum','iok','outerState','outerId','innerState','innerId','seedDir','seedRef']"
                             qual="">
TrackExtra(const Point&amp; outerPosition, const Vector&amp; outerMomentum, bool ok, const Point&amp; innerPosition, const Vector&amp; innerMomentum, bool iok, const CovarianceMatrix&amp; outerState, unsigned int outerId, const CovarianceMatrix&amp; innerState, unsigned int innerId, PropagationDirection seedDir, edm::RefToBase&lt;TrajectorySeed&gt; seedRef=edm::RefToBase&lt;TrajectorySeed&gt;());
                    <comment>
        constructor from outermost/innermost position and momentum and Seed information
                    </comment>
                </constructor>

                <method1 name="outerPosition"
                         return="const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Point&amp; outerPosition() const;
                    <comment>
        outermost hit position
                    </comment>
                </method1>

                <method1 name="outerMomentum"
                         return="const Vector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Vector&amp; outerMomentum() const;
                    <comment>
        momentum vector at outermost hit position
                    </comment>
                </method1>

                <method1 name="outerOk"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool outerOk() const;
                    <comment>
        returns true if the outermost hit is valid
                    </comment>
                </method1>

                <method1 name="innerPosition"
                         return="const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Point&amp; innerPosition() const;
                    <comment>
        innermost hit position
                    </comment>
                </method1>

                <method1 name="innerMomentum"
                         return="const Vector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Vector&amp; innerMomentum() const;
                    <comment>
        momentum vector at innermost hit position
                    </comment>
                </method1>

                <method1 name="innerOk"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool innerOk() const;
                    <comment>
        returns true if the innermost hit is valid
                    </comment>
                </method1>

                <method1 name="outerPx"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPx() const;
                    <comment>
        x coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPy"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPy() const;
                    <comment>
        y coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPz() const;
                    <comment>
        z coordinate of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerX"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerX() const;
                    <comment>
        x coordinate the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerY"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerY() const;
                    <comment>
        y coordinate the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerZ"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerZ() const;
                    <comment>
        z coordinate the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerP"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerP() const;
                    <comment>
        magnitude of momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPt() const;
                    <comment>
        transverse momentum at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerPhi"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerPhi() const;
                    <comment>
        azimuthal angle of the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerEta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerEta() const;
                    <comment>
        pseudorapidity the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerTheta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerTheta() const;
                    <comment>
        polar angle of the  momentum vector at the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerRadius"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double outerRadius() const;
                    <comment>
        polar radius of the outermost hit position
                    </comment>
                </method1>

                <method1 name="outerStateCovariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix outerStateCovariance() const;
                    <comment>
        outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="innerStateCovariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix innerStateCovariance() const;
                    <comment>
        innermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="fillOuter"
                         return="CovarianceMatrix&amp;"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const">
CovarianceMatrix&amp; fillOuter(CovarianceMatrix&amp; v) const;
                    <comment>
        fill outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="fillInner"
                         return="CovarianceMatrix&amp;"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const">
CovarianceMatrix&amp; fillInner(CovarianceMatrix&amp; v) const;
                    <comment>
        fill outermost trajectory state curvilinear errors
                    </comment>
                </method1>

                <method1 name="outerDetId"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int outerDetId() const;
                    <comment>
        DetId of the detector on which surface the outermost state is located
                    </comment>
                </method1>

                <method1 name="innerDetId"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int innerDetId() const;
                    <comment>
        DetId of the detector on which surface the innermost state is located
                    </comment>
                </method1>

                <method1 name="seedDirection"
                         return="PropagationDirection"
                         args="['void']"
                         vars="['']"
                         qual="const">
PropagationDirection seedDirection() const;
                    <comment>
       direction how the hits were sorted in the original seed
                    </comment>
                </method1>

                <method2 name="seedRef"
                         return="edm::RefToBase&lt;TrajectorySeed&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
edm::RefToBase&lt;TrajectorySeed&gt; seedRef() const;
                    <comment>
         return the edm::reference to the trajectory seed in the original
         seeds collection. If the collection has been dropped from the
         Event, the reference may be invalid. Its validity should be tested,
         before the reference is actually used.
                    </comment>
                </method2>

                <method1 name="setResiduals"
                         return="void"
                         args="['const TrackResiduals&amp;']"
                         vars="['r']"
                         qual="">
void setResiduals (const TrackResiduals&amp; r);
                    <comment>
        set the residuals
                    </comment>
                </method1>

                <method1 name="residuals"
                         return="const TrackResiduals&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackResiduals&amp; residuals () const;
                    <comment>
        get the residuals
                    </comment>
                </method1>

            </section>

            <typemap name="CovarianceMatrix"
                     value="math::Error&lt;5&gt;::type"
                     type="typedef"/>
            <typemap name="Point"
                     value="math::XYZPoint"
                     type="typedef"/>
            <typemap name="Vector"
                     value="math::XYZVector"
                     type="typedef"/>
            <typemap name="covarianceSize "
                     value="reco::TrackExtra::covarianceSize "
                     type="enum"/>
            <typemap name="dimension "
                     value="reco::TrackExtra::dimension "
                     type="enum"/>
            <typemap name="index"
                     value="unsigned int"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="CovarianceMatrix"/>
    <type name="CovarianceMatrix&amp;"/>
    <type name="PropagationDirection"/>
    <type name="TrackExtraBase"/>
    <type name="bool"/>
    <type name="const CovarianceMatrix&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const TrackResiduals&amp;"/>
    <type name="const Vector&amp;"/>
    <type name="double"/>
    <type name="edm::RefToBase&lt;TrajectorySeed&gt;"/>
    <type name="enum"/>
    <type name="reco::TrackExtra"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
