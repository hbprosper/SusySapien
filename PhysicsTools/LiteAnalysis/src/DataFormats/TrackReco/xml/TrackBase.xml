<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TrackBase.xml
  Created:  Thu Jan 14 22:48:50 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/TrackReco/interface/TrackBase.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/TrackReco/interface/TrackBase.h">

    <include name="&quot;DataFormats/Math/interface/Vector.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Error.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Error.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/HitPattern.h&quot;"/>

    <namespace name="reco">

        <class name="TrackBase"
               fullname="reco::TrackBase"
               module="DataFormats.TrackReco"
               project=""
               type="regular">

            <section name="public">
                <enum name="">
enum {
 dimension=5 };
                    <field name="dimension" value="5"/>
                    <comment>
        parameter dimension
                    </comment>
                </enum>

                <enum name="">
enum {
 covarianceSize=dimension* (dimension+1)/2 };
                    <field name="covarianceSize"
                           value="dimension* (dimension+1)/2"/>
                    <comment>
        error matrix size
                    </comment>
                </enum>

                <typedef name="ParameterVector"
                         value="math::Vector&lt;dimension&gt;::type">
typedef math::Vector&lt;dimension&gt;::type ParameterVector;
                    <comment>
        parameter vector
                    </comment>
                </typedef>

                <typedef name="CovarianceMatrix"
                         value="math::Error&lt;dimension&gt;::type">
typedef math::Error&lt;dimension&gt;::type CovarianceMatrix;
                    <comment>
        5 parameter covariance matrix
                    </comment>
                </typedef>

                <typedef name="Vector"
                         value="math::XYZVector">
typedef math::XYZVector Vector;
                    <comment>
        spatial vector
                    </comment>
                </typedef>

                <typedef name="Point"
                         value="math::XYZPoint">
typedef math::XYZPoint Point;
                    <comment>
        point in the space
                    </comment>
                </typedef>

                <enum name="">
enum {
 i_qoverp=0, i_lambda, i_phi, i_dxy, i_dsz };
                    <field name="i_qoverp" value="0"/>
                    <field name="i_lambda" value=""/>
                    <field name="i_phi" value=""/>
                    <field name="i_dxy" value=""/>
                    <field name="i_dsz" value=""/>
                    <comment>
        enumerator provided indices to the five parameters
                    </comment>
                </enum>

                <typedef name="index"
                         value="unsigned int">
typedef unsigned int index;
                    <comment>
        index type
                    </comment>
                </typedef>

                <enum name="TrackAlgorithm">
enum TrackAlgorithm {
 undefAlgorithm=0, ctf=1, rs=2, cosmics=3, beamhalo=4, 
     iter1=5, iter2=6, iter3=7, iter4=8, iter5=9, iter6=10, iter7=11, iter8=12, iter9=13, iter10=14, 
     conversion=15, nuclInter=16, 
     algoSize=17 };
                    <field name="undefAlgorithm" value="0"/>
                    <field name="ctf" value="1"/>
                    <field name="rs" value="2"/>
                    <field name="cosmics" value="3"/>
                    <field name="beamhalo" value="4"/>
                    <field name="iter1" value="5"/>
                    <field name="iter2" value="6"/>
                    <field name="iter3" value="7"/>
                    <field name="iter4" value="8"/>
                    <field name="iter5" value="9"/>
                    <field name="iter6" value="10"/>
                    <field name="iter7" value="11"/>
                    <field name="iter8" value="12"/>
                    <field name="iter9" value="13"/>
                    <field name="iter10" value="14"/>
                    <field name="conversion" value="15"/>
                    <field name="nuclInter" value="16"/>
                    <field name="algoSize" value="17"/>
                    <comment>
        track algorithm
                    </comment>
                </enum>

                <constant name="algoNames[]"
                          type="static const std::string"
                          value=""/>
                <enum name="TrackQuality">
enum TrackQuality {
 undefQuality=-1, loose=0, tight=1, highPurity=2, confirmed=3, goodIterative=4, qualitySize=5};
                    <field name="undefQuality" value="-1"/>
                    <field name="loose" value="0"/>
                    <field name="tight" value="1"/>
                    <field name="highPurity" value="2"/>
                    <field name="confirmed" value="3"/>
                    <field name="goodIterative" value="4"/>
                    <field name="qualitySize" value="5"/>
                    <comment>
        track quality
                    </comment>
                </enum>

                <constant name="qualityNames[]"
                          type="static const std::string"
                          value=""/>
                <constructor name="TrackBase"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TrackBase();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="TrackBase"
                             return=""
                             args="['double','double','const Point&amp;','const Vector&amp;','int','const CovarianceMatrix&amp;','TrackAlgorithm=undefAlgorithm','TrackQuality=undefQuality']"
                             vars="['chi2','ndof','referencePoint','momentum','charge','','','quality']"
                             qual="">
TrackBase(double chi2, double ndof, const Point&amp; referencePoint, const Vector&amp; momentum, int charge, const CovarianceMatrix&amp;, TrackAlgorithm=undefAlgorithm, TrackQuality quality=undefQuality);
                    <comment>
        constructor from fit parameters and error matrix
                    </comment>
                </constructor>

                <destructor name="~TrackBase"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~TrackBase();
                    <comment>
        virtual destructor
                    </comment>
                </destructor>

                <method1 name="chi2"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double chi2() const;
                    <comment>
        chi-squared of the fit
                    </comment>
                </method1>

                <method1 name="ndof"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ndof() const;
                    <comment>
        number of degrees of freedom of the fit
                    </comment>
                </method1>

                <method1 name="normalizedChi2"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double normalizedChi2() const;
                    <comment>
        chi-squared divided by n.d.o.f.
                    </comment>
                </method1>

                <method1 name="charge"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int charge() const;
                    <comment>
        track electric charge
                    </comment>
                </method1>

                <method1 name="qoverp"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double qoverp() const;
                    <comment>
        q/p
                    </comment>
                </method1>

                <method1 name="theta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double theta() const;
                    <comment>
        polar angle
                    </comment>
                </method1>

                <method1 name="lambda"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double lambda() const;
                    <comment>
        Lambda angle
                    </comment>
                </method1>

                <method1 name="dxy"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dxy() const;
                    <comment>
        dxy parameter. (This is the transverse impact parameter w.r.t. to (0,0,0) ONLY if refPoint is close to (0,0,0): see parametrization definition above for details). See also function dxy(myBeamSpot) below.
                    </comment>
                </method1>

                <method1 name="d0"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double d0() const;
                    <comment>
        dxy parameter in perigee convention (d0 = - dxy)
                    </comment>
                </method1>

                <method1 name="dsz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dsz() const;
                    <comment>
        dsz parameter (THIS IS NOT the SZ impact parameter to (0,0,0) if refPoint is far from (0,0,0): see parametrization definition above for details)
                    </comment>
                </method1>

                <method1 name="dz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dz() const;
                    <comment>
        dz parameter (= dsz/cos(lambda)). This is the track z0 w.r.t (0,0,0) only if the refPoint is close to (0,0,0). See also function dz(myBeamSpot) below.
                    </comment>
                </method1>

                <method1 name="p"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double p() const;
                    <comment>
        momentum vector magnitude
                    </comment>
                </method1>

                <method1 name="pt"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pt() const;
                    <comment>
        track transverse momentum
                    </comment>
                </method1>

                <method1 name="px"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double px() const;
                    <comment>
        x coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="py"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double py() const;
                    <comment>
        y coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="pz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pz() const;
                    <comment>
        z coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="phi"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double phi() const;
                    <comment>
        azimuthal angle of momentum vector
                    </comment>
                </method1>

                <method1 name="eta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double eta() const;
                    <comment>
        pseudorapidity of momentum vector
                    </comment>
                </method1>

                <method1 name="vx"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double vx() const;
                    <comment>
        x coordinate of the reference point on track
                    </comment>
                </method1>

                <method1 name="vy"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double vy() const;
                    <comment>
        y coordinate of the reference point on track
                    </comment>
                </method1>

                <method1 name="vz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double vz() const;
                    <comment>
        z coordinate of the reference point on track
                    </comment>
                </method1>

                <method1 name="momentum"
                         return="const Vector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Vector&amp; momentum() const;
                    <comment>
        track momentum vector
                    </comment>
                </method1>

                <method1 name="referencePoint"
                         return="const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Point&amp; referencePoint() const;
                    <comment>
        Reference point on the track
                    </comment>
                </method1>

                <method1 name="vertex"
                         return="const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Point&amp; vertex() const;
                    <comment>
        reference point on the track. This method is DEPRECATED, please use referencePoint() instead
                    </comment>
                </method1>

                <method1 name="dxy"
                         return="double"
                         args="['const Point&amp;']"
                         vars="['myBeamSpot']"
                         qual="const">
double dxy(const Point&amp; myBeamSpot) const;
                    <comment>
        dxy parameter with respect to a user-given beamSpot (WARNING: this quantity can only be interpreted as a minimum transverse distance if beamSpot, if the beam spot is reasonably close to the refPoint, since linear approximations are involved). This is a good approximation for Tracker tracks.
                    </comment>
                </method1>

                <method1 name="dsz"
                         return="double"
                         args="['const Point&amp;']"
                         vars="['myBeamSpot']"
                         qual="const">
double dsz(const Point&amp; myBeamSpot) const;
                    <comment>
        dsz parameter with respect to a user-given beamSpot (WARNING: this quantity can only be interpreted as the distance in the S-Z plane to the beamSpot, if the beam spot is reasonably close to the refPoint, since linear approximations are involved). This is a good approximation for Tracker tracks.
                    </comment>
                </method1>

                <method1 name="dz"
                         return="double"
                         args="['const Point&amp;']"
                         vars="['myBeamSpot']"
                         qual="const">
double dz(const Point&amp; myBeamSpot) const;
                    <comment>
        dz parameter with respect to a user-given beamSpot (WARNING: this quantity can only be interpreted as the track z0, if the beamSpot is reasonably close to the refPoint, since linear approximations are involved). This is a good approximation for Tracker tracks.
                    </comment>
                </method1>

                <method1 name="parameters"
                         return="ParameterVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
ParameterVector parameters() const;
                    <comment>
        Track parameters with one-to-one correspondence to the covariance matrix
                    </comment>
                </method1>

                <method1 name="covariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix covariance() const;
                    <comment>
        return track covariance matrix
                    </comment>
                </method1>

                <method1 name="parameter"
                         return="double"
                         args="['int']"
                         vars="['i']"
                         qual="const">
double parameter(int i) const;
                    <comment>
        i-th parameter ( i = 0, ... 4 )
                    </comment>
                </method1>

                <method1 name="covariance"
                         return="double"
                         args="['int','int']"
                         vars="['i','j']"
                         qual="const">
double covariance(int i, int j) const;
                    <comment>
        (i,j)-th element of covarianve matrix ( i, j = 0, ... 4 )
                    </comment>
                </method1>

                <method1 name="error"
                         return="double"
                         args="['int']"
                         vars="['i']"
                         qual="const">
double error(int i) const;
                    <comment>
        error on specified element
                    </comment>
                </method1>

                <method1 name="qoverpError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double qoverpError() const;
                    <comment>
        error on signed transverse curvature
                    </comment>
                </method1>

                <method1 name="ptError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ptError() const;
                    <comment>
        error on Pt (set to 1000 TeV if charge==0 for safety)
                    </comment>
                </method1>

                <method1 name="thetaError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double thetaError() const;
                    <comment>
        error on theta
                    </comment>
                </method1>

                <method1 name="lambdaError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double lambdaError() const;
                    <comment>
        error on lambda
                    </comment>
                </method1>

                <method1 name="etaError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double etaError() const;
                    <comment>
        error on eta
                    </comment>
                </method1>

                <method1 name="phiError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double phiError() const;
                    <comment>
        error on phi
                    </comment>
                </method1>

                <method1 name="dxyError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dxyError() const;
                    <comment>
        error on dxy
                    </comment>
                </method1>

                <method1 name="d0Error"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double d0Error() const;
                    <comment>
        error on d0
                    </comment>
                </method1>

                <method1 name="dszError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dszError() const;
                    <comment>
        error on dsz
                    </comment>
                </method1>

                <method1 name="dzError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dzError() const;
                    <comment>
        error on dz
                    </comment>
                </method1>

                <method1 name="fill"
                         return="CovarianceMatrix&amp;"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const">
CovarianceMatrix&amp; fill(CovarianceMatrix&amp; v) const;
                    <comment>
        fill SMatrix
                    </comment>
                </method1>

                <method1 name="covIndex"
                         return="static index"
                         args="['index','index']"
                         vars="['i','j']"
                         qual="">
static index covIndex(index i, index j);
                    <comment>
        covariance matrix index in array
                    </comment>
                </method1>

                <method1 name="hitPattern"
                         return="const HitPattern&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const HitPattern&amp; hitPattern() const;
                    <comment>
         Access the hit pattern, indicating in which Tracker layers the track has hits.
                    </comment>
                </method1>

                <method1 name="numberOfValidHits"
                         return="unsigned short"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned short numberOfValidHits() const;
                    <comment>
        number of valid hits found
                    </comment>
                </method1>

                <method1 name="numberOfLostHits"
                         return="unsigned short"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned short numberOfLostHits() const;
                    <comment>
        number of cases where track crossed a layer without getting a hit.
                    </comment>
                </method1>

                <method2 name="setHitPattern"
                         return="template&lt;typename C&gt; void"
                         args="['const C&amp;']"
                         vars="['c']"
                         qual="">
template&lt;typename C&gt;     void setHitPattern(const C&amp; c);
                    <comment>
        set hit pattern from vector of hit references
                    </comment>
                </method2>

                <method2 name="setHitPattern"
                         return="template&lt;typename I&gt; void"
                         args="['const I&amp;','const I&amp;']"
                         vars="['begin','end']"
                         qual="">
template&lt;typename I&gt;     void setHitPattern(const I&amp; begin, const I&amp; end);
                </method2>

                <method1 name="setHitPattern"
                         return="void"
                         args="['const TrackingRecHit&amp;','size_t']"
                         vars="['hit','i']"
                         qual="">
void setHitPattern(const TrackingRecHit&amp; hit, size_t i);
                    <comment>
        set hit pattern for specified hit
                    </comment>
                </method1>

                <method1 name="setAlgorithm"
                         return="void"
                         args="['const TrackAlgorithm','bool=true']"
                         vars="['a','set']"
                         qual="">
void setAlgorithm(const TrackAlgorithm a, bool set=true);
                    <comment>
       Track algorithm
                    </comment>
                </method1>

                <method1 name="algo"
                         return="TrackAlgorithm"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackAlgorithm algo() const;
                </method1>

                <method1 name="algoName"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string algoName() const;
                </method1>

                <method1 name="algoName"
                         return="static std::string"
                         args="['TrackAlgorithm']"
                         vars="['']"
                         qual="">
static std::string algoName(TrackAlgorithm);
                </method1>

                <method1 name="algoByName"
                         return="static TrackAlgorithm"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="">
static TrackAlgorithm algoByName(const std::string&amp; name);
                </method1>

                <method1 name="quality"
                         return="bool"
                         args="['const TrackQuality']"
                         vars="['']"
                         qual="const">
bool quality(const TrackQuality) const;
                    <comment>
       Track quality
                    </comment>
                </method1>

                <method1 name="setQuality"
                         return="void"
                         args="['const TrackQuality','bool=true']"
                         vars="['','set']"
                         qual="">
void setQuality(const TrackQuality, bool set=true);
                </method1>

                <method1 name="qualityName"
                         return="static std::string"
                         args="['TrackQuality']"
                         vars="['']"
                         qual="">
static std::string qualityName(TrackQuality);
                </method1>

                <method1 name="qualityByName"
                         return="static TrackQuality"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="">
static TrackQuality qualityByName(const std::string&amp; name);
                </method1>

                <method1 name="qualityMask"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int qualityMask() const;
                </method1>

                <method1 name="setQualityMask"
                         return="void"
                         args="['int']"
                         vars="['qualMask']"
                         qual="">
void setQualityMask(int qualMask);
                </method1>

            </section>

            <typemap name="CovarianceMatrix"
                     value="math::Error&lt;dimension&gt;::type"
                     type="typedef"/>
            <typemap name="ParameterVector"
                     value="math::math::XYZVector&lt;dimension&gt;::type"
                     type="typedef"/>
            <typemap name="Point"
                     value="math::XYZPoint"
                     type="typedef"/>
            <typemap name="TrackAlgorithm"
                     value="reco::TrackBase::TrackAlgorithm"
                     type="enum"/>
            <typemap name="TrackQuality"
                     value="reco::TrackBase::TrackQuality"
                     type="enum"/>
            <typemap name="Vector"
                     value="math::XYZVector"
                     type="typedef"/>
            <typemap name="algoSize"
                     value="reco::TrackBase::algoSize"
                     type="enum"/>
            <typemap name="beamhalo"
                     value="reco::TrackBase::beamhalo"
                     type="enum"/>
            <typemap name="confirmed"
                     value="reco::TrackBase::confirmed"
                     type="enum"/>
            <typemap name="conversion"
                     value="reco::TrackBase::conversion"
                     type="enum"/>
            <typemap name="cosmics"
                     value="reco::TrackBase::cosmics"
                     type="enum"/>
            <typemap name="covarianceSize "
                     value="reco::TrackBase::covarianceSize "
                     type="enum"/>
            <typemap name="ctf"
                     value="reco::TrackBase::ctf"
                     type="enum"/>
            <typemap name="dimension "
                     value="reco::TrackBase::dimension "
                     type="enum"/>
            <typemap name="goodIterative"
                     value="reco::TrackBase::goodIterative"
                     type="enum"/>
            <typemap name="highPurity"
                     value="reco::TrackBase::highPurity"
                     type="enum"/>
            <typemap name="i_dsz"
                     value="reco::TrackBase::i_dsz"
                     type="enum"/>
            <typemap name="i_dxy"
                     value="reco::TrackBase::i_dxy"
                     type="enum"/>
            <typemap name="i_lambda"
                     value="reco::TrackBase::i_lambda"
                     type="enum"/>
            <typemap name="i_phi"
                     value="reco::TrackBase::i_phi"
                     type="enum"/>
            <typemap name="i_qoverp "
                     value="reco::TrackBase::i_qoverp "
                     type="enum"/>
            <typemap name="index"
                     value="unsigned int"
                     type="typedef"/>
            <typemap name="iter1"
                     value="reco::TrackBase::iter1"
                     type="enum"/>
            <typemap name="iter10"
                     value="reco::TrackBase::iter10"
                     type="enum"/>
            <typemap name="iter2"
                     value="reco::TrackBase::iter2"
                     type="enum"/>
            <typemap name="iter3"
                     value="reco::TrackBase::iter3"
                     type="enum"/>
            <typemap name="iter4"
                     value="reco::TrackBase::iter4"
                     type="enum"/>
            <typemap name="iter5"
                     value="reco::TrackBase::iter5"
                     type="enum"/>
            <typemap name="iter6"
                     value="reco::TrackBase::iter6"
                     type="enum"/>
            <typemap name="iter7"
                     value="reco::TrackBase::iter7"
                     type="enum"/>
            <typemap name="iter8"
                     value="reco::TrackBase::iter8"
                     type="enum"/>
            <typemap name="iter9"
                     value="reco::TrackBase::iter9"
                     type="enum"/>
            <typemap name="loose"
                     value="reco::TrackBase::loose"
                     type="enum"/>
            <typemap name="nuclInter"
                     value="reco::TrackBase::nuclInter"
                     type="enum"/>
            <typemap name="qualitySize"
                     value="reco::TrackBase::qualitySize"
                     type="enum"/>
            <typemap name="rs"
                     value="reco::TrackBase::rs"
                     type="enum"/>
            <typemap name="tight"
                     value="reco::TrackBase::tight"
                     type="enum"/>
            <typemap name="undefAlgorithm"
                     value="reco::TrackBase::undefAlgorithm"
                     type="enum"/>
            <typemap name="undefQuality"
                     value="reco::TrackBase::undefQuality"
                     type="enum"/>

        </class>
    </namespace>

    <type name="CovarianceMatrix"/>
    <type name="CovarianceMatrix&amp;"/>
    <type name="ParameterVector"/>
    <type name="TrackAlgorithm"/>
    <type name="TrackQuality"/>
    <type name="bool"/>
    <type name="const CovarianceMatrix&amp;"/>
    <type name="const HitPattern&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const TrackAlgorithm"/>
    <type name="const TrackQuality"/>
    <type name="const TrackingRecHit&amp;"/>
    <type name="const Vector&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="double"/>
    <type name="enum"/>
    <type name="enum TrackAlgorithm"/>
    <type name="enum TrackQuality"/>
    <type name="index"/>
    <type name="int"/>
    <type name="reco::TrackBase"/>
    <type name="size_t"/>
    <type name="std::string"/>
    <type name="template&lt;typename C&gt; void"/>
    <type name="template&lt;typename I&gt; void"/>
    <type name="unsigned short"/>
    <type name="void"/>
</header>
