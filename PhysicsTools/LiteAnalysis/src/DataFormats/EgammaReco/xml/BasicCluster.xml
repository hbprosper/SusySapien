<?xml version="1.0"?>
<!--
==============================================================================
  XML File: BasicCluster.xml
  Created:  Thu Jan 14 22:46:59 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaReco/interface/BasicCluster.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/EgammaReco/interface/BasicCluster.h">

    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&quot;Rtypes.h&quot;"/>
    <include name="&quot;DataFormats/DetId/interface/DetId.h&quot;"/>
    <include name="&quot;DataFormats/CaloRecHit/interface/CaloCluster.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="reco">
        <enum name="AlgoId">
enum AlgoId {
 island=0, hybrid=1, fixedMatrix=2, dynamicHybrid=3, multi5x5=4 };
            <field name="island" value="0"/>
            <field name="hybrid" value="1"/>
            <field name="fixedMatrix" value="2"/>
            <field name="dynamicHybrid" value="3"/>
            <field name="multi5x5" value="4"/>
        </enum>


        <class name="BasicCluster"
               fullname="reco::BasicCluster"
               module="DataFormats.EgammaReco"
               project=""
               type="regular">
            <baseclass name="public CaloCluster"/>

            <section name="public">
                <typedef name="Point"
                         value="math::XYZPoint">
typedef math::XYZPoint Point;
                </typedef>

                <constructor name="BasicCluster"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
BasicCluster();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="BasicCluster"
                             return=""
                             args="['const double','const Point&amp;','const double','const std::vector&lt;DetId&gt;','AlgoId=hybrid']"
                             vars="['energy','position','chi2','usedHits','algoID']"
                             qual="">
BasicCluster(const double energy, const Point&amp; position, const double chi2, const std::vector&lt;DetId&gt; usedHits, AlgoId algoID=hybrid);
                </constructor>

                <method2 name="getHitsByDetId"
                         return="std::vector&lt;DetId&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;DetId&gt; getHitsByDetId() const;
                    <comment>
        DetIds of component RecHits
                    </comment>
                </method2>

                <method1 name="size"
                         return="size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_t size() const;
                    <comment>
        Size (in number of crystals)
                    </comment>
                </method1>

                <method1 name="chi2"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double chi2() const;
                    <comment>
        chi-squared
                    </comment>
                </method1>

                <method1 name="algo"
                         return="AlgoId"
                         args="['void']"
                         vars="['']"
                         qual="const">
AlgoId algo() const;
                    <comment>
        identifier of the algorithm
                    </comment>
                </method1>

                <operator name="operator&lt;"
                          return="bool"
                          args="['const reco::BasicCluster&amp;']"
                          vars="['otherCluster']"
                          qual="const">
bool operator&lt;(const reco::BasicCluster&amp; otherCluster) const;
                    <comment>
        this method is needed to sort the BasicClusters by energy
                    </comment>
                </operator>

                <operator name="operator=="
                          return="bool"
                          args="['const BasicCluster&amp;']"
                          vars="['rhs']"
                          qual="const">
bool operator==(const BasicCluster&amp; rhs) const;
                </operator>

            </section>

            <typemap name="Point"
                     value="math::XYZPoint"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="AlgoId"/>
    <type name="CaloCluster"/>
    <type name="bool"/>
    <type name="const BasicCluster&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const double"/>
    <type name="const reco::BasicCluster&amp;"/>
    <type name="const std::vector&lt;DetId&gt;"/>
    <type name="double"/>
    <type name="reco::BasicCluster"/>
    <type name="size_t"/>
    <type name="std::vector&lt;DetId&gt;"/>
    <type name="void"/>
</header>
