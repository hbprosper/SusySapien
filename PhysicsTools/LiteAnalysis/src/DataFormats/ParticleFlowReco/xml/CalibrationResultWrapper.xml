<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CalibrationResultWrapper.xml
  Created:  Fri Jan 15 20:46:56 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowReco/interface/CalibrationResultWrapper.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/ParticleFlowReco/interface/CalibrationResultWrapper.h">

    <include name="&lt;boost/shared_ptr.hpp&gt;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/CalibrationProvenance.h&quot;"/>

    <namespace name="pftools">

        <class name="CalibrationResultWrapper"
               fullname="pftools::CalibrationResultWrapper"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular">
            <comment>
   \class CalibrationResultWrapper
   \brief A small class designed to hold the result of a calibration of a SingleParticleWrapper

   \author Jamie Ballin
   \date May 2008
            </comment>

            <section name="public">
                <typedef name="CalibrationResultWrapperPtr"
                         value="boost::shared_ptr&lt;CalibrationResultWrapper&gt;">
typedef boost::shared_ptr&lt;CalibrationResultWrapper&gt;
   CalibrationResultWrapperPtr;
                </typedef>

                <constructor name="CalibrationResultWrapper"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CalibrationResultWrapper();
                </constructor>

                <destructor name="~CalibrationResultWrapper"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CalibrationResultWrapper();
                </destructor>

                <method1 name="reset"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void reset();
                </method1>

                <method1 name="compute"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void compute();
                </method1>

                <method1 name="bias"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double bias() const;
                </method1>

                <method1 name="ratio"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ratio() const;
                </method1>

                <member>
CalibrationProvenance provenance_;
                    <comment>
	   Which calibrator made this?
                    </comment>
                </member>

                <member>
double truthEnergy_;
                    <comment>
	   What energy was this particle optimised to?
                    </comment>
                </member>

                <member>
double ecalEnergy_;
                    <comment>
	   Calibrated ecal deposition
                    </comment>
                </member>

                <member>
double hcalEnergy_;
                    <comment>
	   Calibrated hcal deposition
                    </comment>
                </member>

                <member>
double particleEnergy_;
                    <comment>
	   Calibrated particle energy (not necessarily ecal + hcal!)
                    </comment>
                </member>

                <member>
CalibrationTarget target_;
                    <comment>
	   What objects did this optimise on?
                    </comment>
                </member>

                <member>
double bias_;
                    <comment>
	   (reco - truth)/truth
                    </comment>
                </member>

                <member>
double ratio_;
                    <comment>
	   reco/truth
                    </comment>
                </member>

                <member>
double targetFuncContrib_;
                    <comment>
	  Target function contribution
                    </comment>
                </member>

                <member>
double a_;
                </member>

                <member>
double b_;
                </member>

                <member>
double c_;
                </member>

            </section>

            <typemap name="CalibrationResultWrapperPtr"
                     value="boost::shared_ptr&lt;CalibrationResultWrapper&gt;"
                     type="typedef"/>
            <typemap name="a_"
                     value="pftools::CalibrationResultWrapper::a_"
                     type="member"/>
            <typemap name="b_"
                     value="pftools::CalibrationResultWrapper::b_"
                     type="member"/>
            <typemap name="bias_"
                     value="pftools::CalibrationResultWrapper::bias_"
                     type="member"/>
            <typemap name="c_"
                     value="pftools::CalibrationResultWrapper::c_"
                     type="member"/>
            <typemap name="ecalEnergy_"
                     value="pftools::CalibrationResultWrapper::ecalEnergy_"
                     type="member"/>
            <typemap name="hcalEnergy_"
                     value="pftools::CalibrationResultWrapper::hcalEnergy_"
                     type="member"/>
            <typemap name="particleEnergy_"
                     value="pftools::CalibrationResultWrapper::particleEnergy_"
                     type="member"/>
            <typemap name="provenance_"
                     value="pftools::CalibrationResultWrapper::provenance_"
                     type="member"/>
            <typemap name="ratio_"
                     value="pftools::CalibrationResultWrapper::ratio_"
                     type="member"/>
            <typemap name="targetFuncContrib_"
                     value="pftools::CalibrationResultWrapper::targetFuncContrib_"
                     type="member"/>
            <typemap name="target_"
                     value="pftools::CalibrationResultWrapper::target_"
                     type="member"/>
            <typemap name="truthEnergy_"
                     value="pftools::CalibrationResultWrapper::truthEnergy_"
                     type="member"/>

        </class>
    </namespace>

    <type name="CalibrationProvenance"/>
    <type name="CalibrationTarget"/>
    <type name="double"/>
    <type name="pftools::CalibrationResultWrapper"/>
    <type name="void"/>
</header>
