<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Calibratable.xml
  Created:  Fri Jan 15 20:46:56 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowReco/interface/Calibratable.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/ParticleFlowReco/interface/Calibratable.h">

    <include name="&lt;boost/shared_ptr.hpp&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;iostream&gt;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/CalibrationResultWrapper.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/CalibrationProvenance.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>

    <namespace name="pftools">

        <class name="CalibratableElement"
               fullname="pftools::CalibratableElement"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular">
            <comment>
   \class CalibratableElement
   \brief Small wrapper class for storing individual rechit and cluster information.

   \author Jamie Ballin
   \date	June 2008
            </comment>

            <section name="public">
                <constructor name="CalibratableElement"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CalibratableElement();
                </constructor>

                <constructor name="CalibratableElement"
                             return=""
                             args="['double','double','double','int']"
                             vars="['energy','eta','phi','layer']"
                             qual="">
CalibratableElement(double energy, double eta, double phi, int layer);
                </constructor>

                <member>
double energy_, eta_, phi_;
                </member>

                <member>
int layer_;
                </member>

                <method1 name="reset"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void reset();
                </method1>

                <operator name="operator&lt;"
                          return="bool"
                          args="['const CalibratableElement&amp;']"
                          vars="['em']"
                          qual="const">
bool operator&lt;(const CalibratableElement&amp; em) const;
                </operator>

            </section>

            <typemap name="layer_"
                     value="pftools::CalibratableElement::layer_"
                     type="member"/>
            <typemap name="phi_"
                     value="pftools::CalibratableElement::phi_"
                     type="member"/>

        </class>

        <class name="CandidateWrapper"
               fullname="pftools::CandidateWrapper"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular">
            <comment>
  \class CandidateWrapper
  \brief Small wrapper class to store information associated with PFCandidates
  \author Jamie Ballin
  \date May 2008
 
  Documentation added Dec 08.
            </comment>

            <section name="public">
                <constructor name="CandidateWrapper"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CandidateWrapper();
                </constructor>

                <constructor name="CandidateWrapper"
                             return=""
                             args="['double','double','double','double','double','int']"
                             vars="['energy','eta','phi','energyEcal','energyHcal','type']"
                             qual="">
CandidateWrapper(double energy, double eta, double phi, double energyEcal, double energyHcal, int type);
                </constructor>

                <member>
double energy_, eta_, phi_, energyEcal_, energyHcal_;
                </member>

                <member>
int cluster_numEcal_, cluster_numHcal_;
                </member>

                <member>
int type_;
                </member>

                <method1 name="reset"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void reset();
                </method1>

            </section>

            <typemap name="cluster_numHcal_"
                     value="pftools::CandidateWrapper::cluster_numHcal_"
                     type="member"/>
            <typemap name="energyHcal_"
                     value="pftools::CandidateWrapper::energyHcal_"
                     type="member"/>
            <typemap name="type_"
                     value="pftools::CandidateWrapper::type_"
                     type="member"/>

        </class>

        <class name="Calibratable"
               fullname="pftools::Calibratable"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular">
            <comment>
 \class Calibratable
 \brief Wraps essential single particle calibration data ready for export to a Root file.

 Note that a Reflex dictionary must be produced for this class, for the Root branching mechanisms to work.

 \author Jamie Ballin
 \date   May 2008
            </comment>

            <section name="public">
                <constructor name="Calibratable"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Calibratable();
                </constructor>

                <destructor name="~Calibratable"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Calibratable();
                </destructor>

                <method1 name="reset"
                         return="virtual void"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual void reset();
                </method1>

                <member>
double sim_energyEvent_, sim_eta_, sim_phi_;
                    <comment>
	  truth first
                    </comment>
                </member>

                <member>
double sim_energyEcal_, sim_energyHcal_;
                </member>

                <member>
double sim_etaEcal_, sim_etaHcal_, sim_phiEcal_, sim_phiHcal_;
                </member>

                <member>
int sim_numEvent_;
                </member>

                <member>
bool sim_isMC_;
                    <comment>
	  set to true if this event is not real data
                    </comment>
                </member>

                <member>
bool tb_isTB_;
                    <comment>
	  test beam specific
                    </comment>
                </member>

                <member>
double tb_eta_, tb_phi_;
                </member>

                <member>
int tb_run_, tb_pdg_;
                </member>

                <member>
double tb_tof_, tb_ck3_, tb_ck2_;
                </member>

                <member>
char tb_vetosPassed_;
                </member>

                <member>
double tb_energyEvent_, tb_energyEcal_, tb_energyHcal_;
                </member>

                <member>
std::vector&lt;CalibratableElement&gt; tb_ecal_, tb_hcal_;
                </member>

                <member>
int tb_numEcal_, tb_numHcal_;
                </member>

                <member>
CalibratableElement tb_meanEcal_, tb_meanHcal_;
                </member>

                <member>
double recotrk_numHits_, recotrk_quality_, recotrk_charge_;
                    <comment>
	  leading track
                    </comment>
                </member>

                <member>
double recotrk_etaEcal_, recotrk_phiEcal_;
                </member>

                <member>
double recotrk_deltaRWithSim_;
                    <comment>
	  delta phi between sim particle and leading track
                    </comment>
                </member>

                <member>
math::XYZTLorentzVector recotrk_momentum_;
                </member>

                <member>
double cluster_energyEvent_, cluster_energyEcal_, cluster_energyHcal_;
                    <comment>
	  clusters
                    </comment>
                </member>

                <member>
std::vector&lt;CalibratableElement&gt; cluster_ecal_, cluster_hcal_;
                </member>

                <member>
int cluster_numEcal_, cluster_numHcal_;
                </member>

                <member>
CalibratableElement cluster_meanEcal_, cluster_meanHcal_;
                </member>

                <member>
double rechits_energyEvent_, rechits_energyEcal_, rechits_energyHcal_;
                    <comment>
	  rechits
                    </comment>
                </member>

                <member>
std::vector&lt;CalibratableElement&gt; rechits_ecal_, rechits_hcal_;
                </member>

                <member>
int rechits_numEcal_, rechits_numHcal_;
                </member>

                <member>
CalibratableElement rechits_meanEcal_, rechits_meanHcal_;
                </member>

                <member>
std::vector&lt;CandidateWrapper&gt; cands_;
                    <comment>
	  pf candidates
                    </comment>
                </member>

                <member>
CandidateWrapper cands_mean_;
                </member>

                <member>
int cands_num_;
                </member>

                <member>
double cand_energyEvent_, cand_energyEcal_, cand_energyHcal_, cand_eta_, 
   cand_phi_;
                </member>

                <member>
int cand_type_;
                </member>

                <member>
std::vector&lt;CalibrationResultWrapper&gt; calibrations_;
                </member>

                <method1 name="recompute"
                         return="virtual void"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual void recompute();
                    <comment>
	  Recomputes cluster and rechit averages using the vectors of DepositDiets
	  Users should call this before filling the tree.
                    </comment>
                </method1>

                <method2 name="computeMean"
                         return="virtual CalibratableElement"
                         args="['const std::vector&lt;CalibratableElement&gt;&amp;']"
                         vars="['diets']"
                         qual="">
virtual CalibratableElement computeMean(    const std::vector&lt;CalibratableElement&gt;&amp; diets);
                </method2>

                <method2 name="computeMean"
                         return="virtual CandidateWrapper"
                         args="['const std::vector&lt;CandidateWrapper&gt;&amp;']"
                         vars="['wrappers']"
                         qual="">
virtual CandidateWrapper computeMean(    const std::vector&lt;CandidateWrapper&gt;&amp; wrappers);
                </method2>

            </section>

            <typemap name="calibrations_"
                     value="pftools::Calibratable::calibrations_"
                     type="member"/>
            <typemap name="cand_phi_"
                     value="pftools::Calibratable::cand_phi_"
                     type="member"/>
            <typemap name="cand_type_"
                     value="pftools::Calibratable::cand_type_"
                     type="member"/>
            <typemap name="cands_"
                     value="pftools::Calibratable::cands_"
                     type="member"/>
            <typemap name="cands_mean_"
                     value="pftools::Calibratable::cands_mean_"
                     type="member"/>
            <typemap name="cands_num_"
                     value="pftools::Calibratable::cands_num_"
                     type="member"/>
            <typemap name="cluster_energyHcal_"
                     value="pftools::Calibratable::cluster_energyHcal_"
                     type="member"/>
            <typemap name="cluster_hcal_"
                     value="pftools::Calibratable::cluster_hcal_"
                     type="member"/>
            <typemap name="cluster_meanHcal_"
                     value="pftools::Calibratable::cluster_meanHcal_"
                     type="member"/>
            <typemap name="cluster_numHcal_"
                     value="pftools::Calibratable::cluster_numHcal_"
                     type="member"/>
            <typemap name="rechits_energyHcal_"
                     value="pftools::Calibratable::rechits_energyHcal_"
                     type="member"/>
            <typemap name="rechits_hcal_"
                     value="pftools::Calibratable::rechits_hcal_"
                     type="member"/>
            <typemap name="rechits_meanHcal_"
                     value="pftools::Calibratable::rechits_meanHcal_"
                     type="member"/>
            <typemap name="rechits_numHcal_"
                     value="pftools::Calibratable::rechits_numHcal_"
                     type="member"/>
            <typemap name="recotrk_charge_"
                     value="pftools::Calibratable::recotrk_charge_"
                     type="member"/>
            <typemap name="recotrk_deltaRWithSim_"
                     value="pftools::Calibratable::recotrk_deltaRWithSim_"
                     type="member"/>
            <typemap name="recotrk_momentum_"
                     value="pftools::Calibratable::recotrk_momentum_"
                     type="member"/>
            <typemap name="recotrk_phiEcal_"
                     value="pftools::Calibratable::recotrk_phiEcal_"
                     type="member"/>
            <typemap name="sim_energyHcal_"
                     value="pftools::Calibratable::sim_energyHcal_"
                     type="member"/>
            <typemap name="sim_isMC_"
                     value="pftools::Calibratable::sim_isMC_"
                     type="member"/>
            <typemap name="sim_numEvent_"
                     value="pftools::Calibratable::sim_numEvent_"
                     type="member"/>
            <typemap name="sim_phiHcal_"
                     value="pftools::Calibratable::sim_phiHcal_"
                     type="member"/>
            <typemap name="sim_phi_"
                     value="pftools::Calibratable::sim_phi_"
                     type="member"/>
            <typemap name="tb_ck2_"
                     value="pftools::Calibratable::tb_ck2_"
                     type="member"/>
            <typemap name="tb_energyHcal_"
                     value="pftools::Calibratable::tb_energyHcal_"
                     type="member"/>
            <typemap name="tb_hcal_"
                     value="pftools::Calibratable::tb_hcal_"
                     type="member"/>
            <typemap name="tb_isTB_"
                     value="pftools::Calibratable::tb_isTB_"
                     type="member"/>
            <typemap name="tb_meanHcal_"
                     value="pftools::Calibratable::tb_meanHcal_"
                     type="member"/>
            <typemap name="tb_numHcal_"
                     value="pftools::Calibratable::tb_numHcal_"
                     type="member"/>
            <typemap name="tb_pdg_"
                     value="pftools::Calibratable::tb_pdg_"
                     type="member"/>
            <typemap name="tb_phi_"
                     value="pftools::Calibratable::tb_phi_"
                     type="member"/>
            <typemap name="tb_vetosPassed_"
                     value="pftools::Calibratable::tb_vetosPassed_"
                     type="member"/>

        </class>
        <typedef name="CalibratablePtr"
                 value="boost::shared_ptr&lt;Calibratable&gt;">
typedef boost::shared_ptr&lt;Calibratable&gt; CalibratablePtr;
        </typedef>

        <operator name="operator&lt;&lt;"
                  return="std::ostream&amp;"
                  args="['std::ostream&amp;','const Calibratable&amp;']"
                  vars="['s','calib_']"
                  qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Calibratable&amp; calib_);
        </operator>

    </namespace>

    <type name="CalibratableElement"/>
    <type name="CalibratableElement cluster_meanEcal_,"/>
    <type name="CalibratableElement rechits_meanEcal_,"/>
    <type name="CalibratableElement tb_meanEcal_,"/>
    <type name="CandidateWrapper"/>
    <type name="bool"/>
    <type name="char"/>
    <type name="const CalibratableElement&amp;"/>
    <type name="const std::vector&lt;CalibratableElement&gt;&amp;"/>
    <type name="const std::vector&lt;CandidateWrapper&gt;&amp;"/>
    <type name="double"/>
    <type name="double cand_energyEvent_, cand_energyEcal_, cand_energyHcal_, cand_eta_,"/>
    <type name="double cluster_energyEvent_, cluster_energyEcal_,"/>
    <type name="double energy_, eta_,"/>
    <type name="double energy_, eta_, phi_, energyEcal_,"/>
    <type name="double rechits_energyEvent_, rechits_energyEcal_,"/>
    <type name="double recotrk_etaEcal_,"/>
    <type name="double recotrk_numHits_, recotrk_quality_,"/>
    <type name="double sim_energyEcal_,"/>
    <type name="double sim_energyEvent_, sim_eta_,"/>
    <type name="double sim_etaEcal_, sim_etaHcal_, sim_phiEcal_,"/>
    <type name="double tb_energyEvent_, tb_energyEcal_,"/>
    <type name="double tb_eta_,"/>
    <type name="double tb_tof_, tb_ck3_,"/>
    <type name="int"/>
    <type name="int cluster_numEcal_,"/>
    <type name="int rechits_numEcal_,"/>
    <type name="int tb_numEcal_,"/>
    <type name="int tb_run_,"/>
    <type name="math::XYZTLorentzVector"/>
    <type name="pftools::Calibratable"/>
    <type name="pftools::CalibratableElement"/>
    <type name="pftools::CandidateWrapper"/>
    <type name="std::vector&lt;CalibratableElement&gt; cluster_ecal_,"/>
    <type name="std::vector&lt;CalibratableElement&gt; rechits_ecal_,"/>
    <type name="std::vector&lt;CalibratableElement&gt; tb_ecal_,"/>
    <type name="std::vector&lt;CalibrationResultWrapper&gt;"/>
    <type name="std::vector&lt;CandidateWrapper&gt;"/>
    <type name="void"/>
</header>
