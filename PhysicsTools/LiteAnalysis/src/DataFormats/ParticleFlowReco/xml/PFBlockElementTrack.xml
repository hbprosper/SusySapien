<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFBlockElementTrack.xml
  Created:  Thu Jan 14 22:47:56 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowReco/interface/PFBlockElementTrack.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/ParticleFlowReco/interface/PFBlockElementTrack.h">

    <include name="&lt;iostream&gt;"/>
    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFBlockElement.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFRecTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>

    <namespace name="reco">

        <class name="PFBlockElementTrack"
               fullname="reco::PFBlockElementTrack"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular">
            <baseclass name="public PFBlockElement"/>
            <comment>
      this class contains a reference to a PFRecTrack
            </comment>

            <section name="public">
                <constructor name="PFBlockElementTrack"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PFBlockElementTrack();
                </constructor>

                <constructor name="PFBlockElementTrack"
                             return=""
                             args="['const PFRecTrackRef&amp;']"
                             vars="['ref']"
                             qual="">
PFBlockElementTrack(const PFRecTrackRef&amp; ref);
                </constructor>

                <method1 name="clone"
                         return="PFBlockElement*"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFBlockElement* clone() const;
                </method1>

                <method1 name="Dump"
                         return="void"
                         args="['std::ostream&amp;=std::cout','const char*=&quot; &quot;']"
                         vars="['out','tab']"
                         qual="const">
void Dump(std::ostream&amp; out=std::cout, const char* tab=&quot; &quot;) const;
                </method1>

                <method1 name="trackType"
                         return="virtual bool"
                         args="['TrackType']"
                         vars="['trType']"
                         qual="const">
virtual bool trackType(TrackType trType) const;
                    <comment>
        \return tracktype
                    </comment>
                </method1>

                <method1 name="setTrackType"
                         return="virtual void"
                         args="['TrackType','bool']"
                         vars="['trType','value']"
                         qual="">
virtual void setTrackType(TrackType trType, bool value);
                    <comment>
        \set the trackType
                    </comment>
                </method1>

                <method1 name="setPositionAtECALEntrance"
                         return="void"
                         args="['float','float','float']"
                         vars="['x','y','z']"
                         qual="">
void setPositionAtECALEntrance(float x, float y, float z);
                    <comment>
        set position at ECAL entrance
                    </comment>
                </method1>

                <method1 name="positionAtECALEntrance"
                         return="const math::XYZPointF&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const math::XYZPointF&amp; positionAtECALEntrance() const;
                    <comment>
        \return position at ECAL entrance
                    </comment>
                </method1>

                <method1 name="trackRefPF"
                         return="PFRecTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
PFRecTrackRef trackRefPF() const;
                    <comment>
        please do not use this function after the block production stage!
                    </comment>
                </method1>

                <method1 name="trackRef"
                         return="reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::TrackRef trackRef() const;
                    <comment>
        \return reference to the corresponding Track
                    </comment>
                </method1>

                <method1 name="isSecondary"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isSecondary() const;
                    <comment>
        check if the track is secondary
                    </comment>
                </method1>

                <method1 name="nuclearRef"
                         return="NuclearInteractionRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
NuclearInteractionRef nuclearRef() const;
                    <comment>
        \return the nuclear interaction associated
                    </comment>
                </method1>

                <method1 name="setNuclearRef"
                         return="void"
                         args="['const NuclearInteractionRef&amp;','TrackType']"
                         vars="['niref','trType']"
                         qual="">
void setNuclearRef(const NuclearInteractionRef&amp; niref, TrackType trType);
                    <comment>
        \set the ref to the nuclear interaction
                    </comment>
                </method1>

                <method1 name="muonRef"
                         return="reco::MuonRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::MuonRef muonRef() const;
                    <comment>
        \return reference to the corresponding Muon
                    </comment>
                </method1>

                <method1 name="setMuonRef"
                         return="void"
                         args="['const MuonRef&amp;']"
                         vars="['muref']"
                         qual="">
void setMuonRef(const MuonRef&amp; muref);
                    <comment>
        \set reference to the Muon
                    </comment>
                </method1>

                <method1 name="convRef"
                         return="ConversionRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
ConversionRef convRef() const;
                    <comment>
        \return ref to original recoConversion
                    </comment>
                </method1>

                <method1 name="setConversionRef"
                         return="void"
                         args="['const ConversionRef&amp;','TrackType']"
                         vars="['convRef','trType']"
                         qual="">
void setConversionRef(const ConversionRef&amp; convRef, TrackType trType);
                    <comment>
        \set the ref to  gamma conversion
                    </comment>
                </method1>

                <method1 name="V0Ref"
                         return="VertexCompositeCandidateRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
VertexCompositeCandidateRef V0Ref() const;
                    <comment>
        \return ref to original V0
                    </comment>
                </method1>

                <method1 name="setV0Ref"
                         return="void"
                         args="['const VertexCompositeCandidateRef&amp;','TrackType']"
                         vars="['V0Ref','trType']"
                         qual="">
void setV0Ref(const VertexCompositeCandidateRef&amp; V0Ref, TrackType trType);
                    <comment>
        \set the ref to  V0
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>

    <type name="ConversionRef"/>
    <type name="NuclearInteractionRef"/>
    <type name="PFBlockElement"/>
    <type name="PFBlockElement*"/>
    <type name="PFRecTrackRef"/>
    <type name="TrackType"/>
    <type name="VertexCompositeCandidateRef"/>
    <type name="bool"/>
    <type name="const ConversionRef&amp;"/>
    <type name="const MuonRef&amp;"/>
    <type name="const NuclearInteractionRef&amp;"/>
    <type name="const PFRecTrackRef&amp;"/>
    <type name="const VertexCompositeCandidateRef&amp;"/>
    <type name="const char*"/>
    <type name="const math::XYZPointF&amp;"/>
    <type name="float"/>
    <type name="reco::MuonRef"/>
    <type name="reco::PFBlockElementTrack"/>
    <type name="reco::TrackRef"/>
    <type name="std::ostream&amp;"/>
    <type name="void"/>
</header>
