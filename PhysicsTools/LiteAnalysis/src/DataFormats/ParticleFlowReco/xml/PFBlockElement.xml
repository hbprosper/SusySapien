<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFBlockElement.xml
  Created:  Thu Jan 14 22:47:53 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowReco/interface/PFBlockElement.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/ParticleFlowReco/interface/PFBlockElement.h">

    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFRecTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFNuclearInteraction.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/MuonReco/interface/MuonFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaCandidates/interface/Conversion.h&quot;"/>
    <include name="&quot;DataFormats/EgammaCandidates/interface/ConversionFwd.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/VertexCompositeCandidate.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/VertexCompositeCandidateFwd.h&quot;"/>
    <include name="&lt;iostream&gt;"/>

    <namespace name="reco">
        <forward name="PFBlockElementCluster"/>
        <forward name="PFBlockElementTrack"/>

        <class name="PFBlockElement"
               fullname="reco::PFBlockElement"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="abstract regular printable">
            <comment>
      PFClusterRef, depending on the type of the element
            </comment>

            <section name="public">
                <constant name="nTypes_"
                          type="static const unsigned"
                          value=""/>
                <enum name="Type">
enum Type {

      NONE=0, 
      TRACK, 
      PS1, 
      PS2, 
      ECAL, 
      HCAL, 
      GSF, 
      BREM
    };
                    <field name="NONE" value="0"/>
                    <field name="TRACK" value=""/>
                    <field name="PS1" value=""/>
                    <field name="PS2" value=""/>
                    <field name="ECAL" value=""/>
                    <field name="HCAL" value=""/>
                    <field name="GSF" value=""/>
                    <field name="BREM" value=""/>
                    <comment>
        possible types for the element
                    </comment>
                </enum>

                <enum name="TrackType">
enum TrackType {

      DEFAULT=0, 
      T_FROM_NUCL, 
      T_TO_NUCL, 
      T_FROM_GAMMACONV, 
      MUON, 
      T_FROM_V0
    };
                    <field name="DEFAULT" value="0"/>
                    <field name="T_FROM_NUCL" value=""/>
                    <field name="T_TO_NUCL" value=""/>
                    <field name="T_FROM_GAMMACONV" value=""/>
                    <field name="MUON" value=""/>
                    <field name="T_FROM_V0" value=""/>
                </enum>

                <constructor name="PFBlockElement"
                             return=""
                             args="['Type=NONE']"
                             vars="['type']"
                             qual="">
PFBlockElement(Type type=NONE);
                    <comment>
        standard constructor
                    </comment>
                </constructor>

                <destructor name="~PFBlockElement"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~PFBlockElement();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="Dump"
                         return="virtual void"
                         args="['std::ostream&amp;=std::cout','const char*=&quot; &quot;']"
                         vars="['out','tab']"
                         qual="const">
virtual void Dump(std::ostream&amp; out=std::cout, const char* tab=&quot; &quot;) const;
                    <comment>
        print the object inside the element
                    </comment>
                </method1>

                <method1 name="clone"
                         return="virtual PFBlockElement*"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual PFBlockElement* clone() const=0;
                    <comment>
        necessary to have the edm::OwnVector&lt;PFBlockElement&gt; working
                    </comment>
                </method1>

                <method1 name="lock"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void lock();
                    <comment>
        lock element
                    </comment>
                </method1>

                <method1 name="unLock"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void unLock();
                    <comment>
        unlock element
                    </comment>
                </method1>

                <method1 name="type"
                         return="Type"
                         args="['void']"
                         vars="['']"
                         qual="const">
Type type() const;
                    <comment>
        \return type
                    </comment>
                </method1>

                <method1 name="trackType"
                         return="virtual bool"
                         args="['TrackType']"
                         vars="['trType']"
                         qual="const">
virtual bool trackType(TrackType trType) const;
                    <comment>
        \return tracktype
                    </comment>
                </method1>

                <method1 name="setTrackType"
                         return="virtual void"
                         args="['TrackType','bool']"
                         vars="['trType','value']"
                         qual="">
virtual void setTrackType(TrackType trType, bool value);
                    <comment>
        \set the trackType
                    </comment>
                </method1>

                <method1 name="locked"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool locked() const;
                    <comment>
        locked ?
                    </comment>
                </method1>

                <method1 name="setIndex"
                         return="void"
                         args="['unsigned']"
                         vars="['index']"
                         qual="">
void setIndex(unsigned index);
                    <comment>
        set index
                    </comment>
                </method1>

                <method1 name="index"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned index() const;
                    <comment>
        \return index
                    </comment>
                </method1>

                <method1 name="trackRef"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef trackRef() const;
                </method1>

                <method1 name="trackRefPF"
                         return="virtual PFRecTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual PFRecTrackRef trackRefPF() const;
                </method1>

                <method1 name="clusterRef"
                         return="virtual PFClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual PFClusterRef clusterRef() const;
                </method1>

                <method1 name="nuclearRef"
                         return="virtual NuclearInteractionRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual NuclearInteractionRef nuclearRef() const;
                </method1>

                <method1 name="convRef"
                         return="virtual ConversionRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual ConversionRef convRef() const;
                </method1>

                <method1 name="muonRef"
                         return="virtual MuonRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual MuonRef muonRef() const;
                </method1>

                <method1 name="V0Ref"
                         return="virtual VertexCompositeCandidateRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual VertexCompositeCandidateRef V0Ref() const;
                </method1>

                <method1 name="setNuclearRef"
                         return="virtual void"
                         args="['const NuclearInteractionRef&amp;','TrackType']"
                         vars="['niref','trType']"
                         qual="">
virtual void setNuclearRef(const NuclearInteractionRef&amp; niref, TrackType trType);
                </method1>

                <method1 name="setConversionRef"
                         return="virtual void"
                         args="['const ConversionRef&amp;','TrackType']"
                         vars="['convRef','trType']"
                         qual="">
virtual void setConversionRef(const ConversionRef&amp; convRef, TrackType trType);
                </method1>

                <method1 name="setMuonRef"
                         return="virtual void"
                         args="['const MuonRef&amp;']"
                         vars="['muref']"
                         qual="">
virtual void setMuonRef(const MuonRef&amp; muref);
                </method1>

                <method1 name="setV0Ref"
                         return="virtual void"
                         args="['const VertexCompositeCandidateRef&amp;','TrackType']"
                         vars="['v0ref','trType']"
                         qual="">
virtual void setV0Ref(const VertexCompositeCandidateRef&amp; v0ref, TrackType trType);
                </method1>

                <method1 name="isSecondary"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isSecondary() const;
                </method1>

                <operator name="operator&lt;&lt;"
                          return="friend std::ostream&amp;"
                          args="['std::ostream&amp;','const PFBlockElement&amp;']"
                          vars="['out','element']"
                          qual="">
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const PFBlockElement&amp; element);
                </operator>

            </section>

            <typemap name="BREM"
                     value="reco::PFBlockElement::BREM"
                     type="enum"/>
            <typemap name="DEFAULT"
                     value="reco::PFBlockElement::DEFAULT"
                     type="enum"/>
            <typemap name="ECAL"
                     value="reco::PFBlockElement::ECAL"
                     type="enum"/>
            <typemap name="GSF"
                     value="reco::PFBlockElement::GSF"
                     type="enum"/>
            <typemap name="HCAL"
                     value="reco::PFBlockElement::HCAL"
                     type="enum"/>
            <typemap name="MUON"
                     value="reco::PFBlockElement::MUON"
                     type="enum"/>
            <typemap name="NONE"
                     value="reco::PFBlockElement::NONE"
                     type="enum"/>
            <typemap name="PS1"
                     value="reco::PFBlockElement::PS1"
                     type="enum"/>
            <typemap name="PS2"
                     value="reco::PFBlockElement::PS2"
                     type="enum"/>
            <typemap name="TRACK"
                     value="reco::PFBlockElement::TRACK"
                     type="enum"/>
            <typemap name="T_FROM_GAMMACONV"
                     value="reco::PFBlockElement::T_FROM_GAMMACONV"
                     type="enum"/>
            <typemap name="T_FROM_NUCL"
                     value="reco::PFBlockElement::T_FROM_NUCL"
                     type="enum"/>
            <typemap name="T_FROM_V0"
                     value="reco::PFBlockElement::T_FROM_V0"
                     type="enum"/>
            <typemap name="T_TO_NUCL"
                     value="reco::PFBlockElement::T_TO_NUCL"
                     type="enum"/>
            <typemap name="TrackType"
                     value="reco::PFBlockElement::TrackType"
                     type="enum"/>
            <typemap name="Type"
                     value="reco::PFBlockElement::Type"
                     type="enum"/>

        </class>
    </namespace>

    <type name="ConversionRef"/>
    <type name="MuonRef"/>
    <type name="NuclearInteractionRef"/>
    <type name="PFBlockElement*"/>
    <type name="PFClusterRef"/>
    <type name="PFRecTrackRef"/>
    <type name="TrackType"/>
    <type name="Type"/>
    <type name="VertexCompositeCandidateRef"/>
    <type name="bool"/>
    <type name="const ConversionRef&amp;"/>
    <type name="const MuonRef&amp;"/>
    <type name="const NuclearInteractionRef&amp;"/>
    <type name="const PFBlockElement&amp;"/>
    <type name="const VertexCompositeCandidateRef&amp;"/>
    <type name="const char*"/>
    <type name="enum TrackType"/>
    <type name="enum Type"/>
    <type name="reco::PFBlockElement"/>
    <type name="reco::TrackRef"/>
    <type name="std::ostream&amp;"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
