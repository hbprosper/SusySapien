<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PFRecTrack.xml
  Created:  Thu Jan 14 22:48:03 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowReco/interface/PFRecTrack.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/ParticleFlowReco/interface/PFRecTrack.h">

    <include name="&quot;DataFormats/ParticleFlowReco/interface/PFTrack.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&lt;iostream&gt;"/>

    <namespace name="reco">

        <class name="PFRecTrack"
               fullname="reco::PFRecTrack"
               module="DataFormats.ParticleFlowReco"
               project=""
               type="regular printable">
            <baseclass name="public PFTrack"/>
            <comment>
     \class PFRecTrack
     \brief reconstructed track used as an input to particle flow

     Additional information w/r to PFTrack:
     - algorithm used to reconstruct the track
     - track ID, soon to be replaced by a RefToBase to the corresponding Track

     \author Renaud Bruneliere, Michele Pioppi
     \date   July 2006
            </comment>

            <section name="public">
                <enum name="AlgoType_t">
enum AlgoType_t {

      Unknown=0, 
      KF=1, 
      GSF=2, 
      KF_ELCAND=3
    };
                    <field name="Unknown" value="0"/>
                    <field name="KF" value="1"/>
                    <field name="GSF" value="2"/>
                    <field name="KF_ELCAND" value="3"/>
                    <comment>
        different types of fitting algorithms
                    </comment>
                </enum>

                <constructor name="PFRecTrack"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PFRecTrack();
                </constructor>

                <destructor name="~PFRecTrack"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~PFRecTrack();
                </destructor>

                <constructor name="PFRecTrack"
                             return=""
                             args="['double','AlgoType_t','int','const reco::TrackRef&amp;']"
                             vars="['charge','algoType','trackId','trackref']"
                             qual="">
PFRecTrack(double charge, AlgoType_t algoType, int trackId, const reco::TrackRef&amp; trackref);
                </constructor>

                <constructor name="PFRecTrack"
                             return=""
                             args="['double','AlgoType_t']"
                             vars="['charge','algoType']"
                             qual="">
PFRecTrack(double charge, AlgoType_t algoType);
                </constructor>

                <method1 name="algoType"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int algoType() const;
                    <comment>
        \return type of algorithm
                    </comment>
                </method1>

                <method1 name="trackId"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int trackId() const;
                    <comment>
        \return id
                    </comment>
                </method1>

                <method1 name="trackRef"
                         return="const reco::TrackRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::TrackRef&amp;       trackRef() const;
                    <comment>
        \return reference to corresponding track
                    </comment>
                </method1>

                <operator name="operator&lt;&lt;"
                          return="friend std::ostream&amp;"
                          args="['std::ostream&amp;','const PFRecTrack&amp;']"
                          vars="['out','track']"
                          qual="">
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const PFRecTrack&amp; track);
                </operator>

            </section>

            <typemap name="AlgoType_t"
                     value="reco::PFRecTrack::AlgoType_t"
                     type="enum"/>
            <typemap name="GSF "
                     value="reco::PFRecTrack::GSF "
                     type="enum"/>
            <typemap name="KF "
                     value="reco::PFRecTrack::KF "
                     type="enum"/>
            <typemap name="KF_ELCAND"
                     value="reco::PFRecTrack::KF_ELCAND"
                     type="enum"/>
            <typemap name="Unknown "
                     value="reco::PFRecTrack::Unknown "
                     type="enum"/>

        </class>
    </namespace>

    <type name="AlgoType_t"/>
    <type name="PFTrack"/>
    <type name="const PFRecTrack&amp;"/>
    <type name="const reco::TrackRef&amp;"/>
    <type name="double"/>
    <type name="enum AlgoType_t"/>
    <type name="int"/>
    <type name="reco::PFRecTrack"/>
    <type name="std::ostream&amp;"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
