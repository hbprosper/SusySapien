<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PileUpPFCandidate.xml
  Created:  Fri Jan 15 20:46:55 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/ParticleFlowCandidate/interface/PileUpPFCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/ParticleFlowCandidate/interface/PileUpPFCandidate.h">

    <include name="&lt;iostream&gt;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidate.h&quot;"/>
    <include name="&quot;DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/VertexReco/interface/VertexFwd.h&quot;"/>

    <namespace name="reco">

        <class name="PileUpPFCandidate"
               fullname="reco::PileUpPFCandidate"
               module="DataFormats.ParticleFlowCandidate"
               project=""
               type="regular printable">
            <baseclass name="public PFCandidate"/>
            <comment>
     \class PileUpPFCandidate
     \brief Particle reconstructed by the particle flow algorithm.

     \author Colin Bernet
     \date   February 2007
            </comment>

            <section name="public">
                <constructor name="PileUpPFCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PileUpPFCandidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="PileUpPFCandidate"
                             return=""
                             args="['const PFCandidatePtr&amp;','const VertexRef&amp;']"
                             vars="['candidatePtr','vertexRef']"
                             qual="">
PileUpPFCandidate(const PFCandidatePtr&amp; candidatePtr, const VertexRef&amp; vertexRef);
                </constructor>

                <destructor name="~PileUpPFCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~PileUpPFCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual PileUpPFCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual PileUpPFCandidate* clone() const;
                    <comment>
        return a clone
                    </comment>
                </method1>

                <method1 name="vertexRef"
                         return="const VertexRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const VertexRef&amp; vertexRef() const;
                    <comment>
        return reference to the associated vertex
                    </comment>
                </method1>

                <operator name="operator&lt;&lt;"
                          return="friend std::ostream&amp;"
                          args="['std::ostream&amp;','const PileUpPFCandidate&amp;']"
                          vars="['out','c']"
                          qual="">
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const PileUpPFCandidate&amp; c);
                </operator>

            </section>

        </class>
    </namespace>

    <type name="PFCandidate"/>
    <type name="PileUpPFCandidate*"/>
    <type name="const PFCandidatePtr&amp;"/>
    <type name="const PileUpPFCandidate&amp;"/>
    <type name="const VertexRef&amp;"/>
    <type name="reco::PileUpPFCandidate"/>
    <type name="std::ostream&amp;"/>
    <type name="void"/>
</header>
