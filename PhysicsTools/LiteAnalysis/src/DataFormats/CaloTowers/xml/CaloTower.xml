<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CaloTower.xml
  Created:  Thu Jan 14 22:45:46 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/CaloTowers/interface/CaloTower.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/CaloTowers/interface/CaloTower.h">

    <include name="&quot;DataFormats/Candidate/interface/LeafCandidate.h&quot;"/>
    <include name="&quot;DataFormats/DetId/interface/DetId.h&quot;"/>
    <include name="&quot;DataFormats/CaloTowers/interface/CaloTowerDetId.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;Rtypes.h&quot;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;cmath&gt;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>

    <class name="CaloTower"
           fullname="CaloTower"
           module="DataFormats.CaloTowers"
           project=""
           type="regular">
        <baseclass name="public reco::LeafCandidate"/>
        <comment>
   Original author: J. Mans - Minnesota

   Modified: Anton Anastassov (Northwestern)
      Make CaloTower inherit from LeafCandidate,
      add new members and accessors.
        </comment>

        <section name="public">
            <typedef name="key_type"
                     value="CaloTowerDetId">
typedef CaloTowerDetId key_type;
            </typedef>

            <constructor name="CaloTower"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
CaloTower();
                <comment>
     Default constructor
                </comment>
            </constructor>

            <constructor name="CaloTower"
                         return=""
                         args="['const CaloTowerDetId&amp;','double','double','double','int','int','const PolarLorentzVector','GlobalPoint','GlobalPoint']"
                         vars="['id','emE','hadE','outerE','ecal_tp','hcal_tp','p4','emPosition','hadPosition']"
                         qual="">
CaloTower(const CaloTowerDetId&amp; id, double emE, double hadE, double outerE, int ecal_tp, int hcal_tp, const PolarLorentzVector p4, GlobalPoint emPosition, GlobalPoint hadPosition);
                <comment>
     Constructors from values
                </comment>
            </constructor>

            <constructor name="CaloTower"
                         return=""
                         args="['const CaloTowerDetId&amp;','double','double','double','int','int','const LorentzVector','GlobalPoint','GlobalPoint']"
                         vars="['id','emE','hadE','outerE','ecal_tp','hcal_tp','p4','emPosition','hadPosition']"
                         qual="">
CaloTower(const CaloTowerDetId&amp; id, double emE, double hadE, double outerE, int ecal_tp, int hcal_tp, const LorentzVector p4, GlobalPoint emPosition, GlobalPoint hadPosition);
            </constructor>

            <method1 name="addConstituent"
                     return="void"
                     args="['DetId']"
                     vars="['id']"
                     qual="">
void addConstituent(DetId id);
                <comment>
      setters
                </comment>
            </method1>

            <method2 name="addConstituents"
                     return="void"
                     args="['const std::vector&lt;DetId&gt;&amp;']"
                     vars="['ids']"
                     qual="">
void addConstituents(const std::vector&lt;DetId&gt;&amp; ids);
            </method2>

            <method1 name="setEcalTime"
                     return="void"
                     args="['int']"
                     vars="['t']"
                     qual="">
void setEcalTime(int t);
            </method1>

            <method1 name="setHcalTime"
                     return="void"
                     args="['int']"
                     vars="['t']"
                     qual="">
void setHcalTime(int t);
            </method1>

            <method1 name="id"
                     return="CaloTowerDetId"
                     args="['void']"
                     vars="['']"
                     qual="const">
CaloTowerDetId id() const;
                <comment>
     getters
                </comment>
            </method1>

            <method2 name="constituents"
                     return="const std::vector&lt;DetId&gt;&amp;"
                     args="['void']"
                     vars="['']"
                     qual="const">
const std::vector&lt;DetId&gt;&amp; constituents() const;
            </method2>

            <method1 name="constituentsSize"
                     return="size_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
size_t constituentsSize() const;
            </method1>

            <method1 name="constituent"
                     return="DetId"
                     args="['size_t']"
                     vars="['i']"
                     qual="const">
DetId constituent(size_t i) const;
            </method1>

            <method1 name="emEnergy"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double emEnergy() const;
            </method1>

            <method1 name="hadEnergy"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double hadEnergy() const;
            </method1>

            <method1 name="outerEnergy"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double outerEnergy() const;
            </method1>

            <method1 name="emEt"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double emEt() const;
            </method1>

            <method1 name="hadEt"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double hadEt() const;
            </method1>

            <method1 name="outerEt"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double outerEt() const;
            </method1>

            <method1 name="emPosition"
                     return="const GlobalPoint&amp;"
                     args="['void']"
                     vars="['']"
                     qual="const">
const GlobalPoint&amp; emPosition() const;
            </method1>

            <method1 name="hadPosition"
                     return="const GlobalPoint&amp;"
                     args="['void']"
                     vars="['']"
                     qual="const">
const GlobalPoint&amp; hadPosition() const;
            </method1>

            <method1 name="emLvl1"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int emLvl1() const;
            </method1>

            <method1 name="hadLv11"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int hadLv11() const;
            </method1>

            <method1 name="hadEnergyHeOuterLayer"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double hadEnergyHeOuterLayer() const;
            </method1>

            <method1 name="hadEnergyHeInnerLayer"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double hadEnergyHeInnerLayer() const;
            </method1>

            <method1 name="ecalTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float ecalTime() const;
            </method1>

            <method1 name="hcalTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float hcalTime() const;
            </method1>

            <method1 name="ieta"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int ieta() const;
            </method1>

            <method1 name="ietaAbs"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int ietaAbs() const;
            </method1>

            <method1 name="iphi"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int iphi() const;
            </method1>

            <method1 name="zside"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int zside() const;
            </method1>

            <method1 name="numCrystals"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int numCrystals() const;
            </method1>

        </section>

        <typemap name="key_type"
                 value="CaloTowerDetId"
                 type="typedef"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const CaloTower&amp;']"
              vars="['s','ct']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const CaloTower&amp; ct);
    </operator>

    <operator name="operator=="
              return="inline bool"
              args="['const CaloTower&amp;','const CaloTower&amp;']"
              vars="['t1','t2']"
              qual="">
inline bool operator==(const CaloTower&amp; t1, const CaloTower&amp; t2);
    </operator>


    <type name="CaloTower"/>
    <type name="CaloTowerDetId"/>
    <type name="DetId"/>
    <type name="GlobalPoint"/>
    <type name="const CaloTowerDetId&amp;"/>
    <type name="const GlobalPoint&amp;"/>
    <type name="const LorentzVector"/>
    <type name="const PolarLorentzVector"/>
    <type name="const std::vector&lt;DetId&gt;&amp;"/>
    <type name="double"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::LeafCandidate"/>
    <type name="size_t"/>
    <type name="void"/>
</header>
