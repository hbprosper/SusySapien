<?xml version="1.0"?>
<!--
==============================================================================
  XML File: GenParticle.xml
  Created:  Thu Jan 14 22:49:01 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HepMCCandidate/interface/GenParticle.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/HepMCCandidate/interface/GenParticle.h">

    <include name="&quot;DataFormats/Candidate/interface/CompositeRefCandidateT.h&quot;"/>
    <include name="&quot;DataFormats/HepMCCandidate/interface/GenParticleFwd.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="HepMC">
        <forward name="GenParticle"/>
    </namespace>

    <namespace name="reco">

        <class name="GenParticle"
               fullname="reco::GenParticle"
               module="DataFormats.HepMCCandidate"
               project=""
               type="regular">
            <baseclass name="public CompositeRefCandidateT&lt;GenParticleRefVector&gt;"/>

            <section name="public">
                <constructor name="GenParticle"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
GenParticle();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="GenParticle"
                             return=""
                             args="['const Particle&amp;']"
                             vars="['p']"
                             qual="">
GenParticle(const Particle&amp; p);
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="GenParticle"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;','int','int','bool']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
GenParticle(Charge q, const LorentzVector&amp; p4, const Point&amp; vtx, int pdgId, int status, bool integerCharge);
                    <comment>
        constrocturo from values
                    </comment>
                </constructor>

                <constructor name="GenParticle"
                             return=""
                             args="['Charge','const PolarLorentzVector&amp;','const Point&amp;','int','int','bool']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
GenParticle(Charge q, const PolarLorentzVector&amp; p4, const Point&amp; vtx, int pdgId, int status, bool integerCharge);
                    <comment>
        constrocturo from values
                    </comment>
                </constructor>

                <destructor name="~GenParticle"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~GenParticle();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="GenParticle*"
                         args="['void']"
                         vars="['']"
                         qual="const">
GenParticle* clone() const;
                    <comment>
        return a clone
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>

    <type name="Charge"/>
    <type name="CompositeRefCandidateT&lt;GenParticleRefVector&gt;"/>
    <type name="GenParticle*"/>
    <type name="bool"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Particle&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="int"/>
    <type name="reco::GenParticle"/>
    <type name="void"/>
</header>
