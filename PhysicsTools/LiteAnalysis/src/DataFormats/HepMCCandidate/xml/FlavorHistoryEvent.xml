<?xml version="1.0"?>
<!--
==============================================================================
  XML File: FlavorHistoryEvent.xml
  Created:  Fri Jan 15 20:47:45 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HepMCCandidate/interface/FlavorHistoryEvent.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/HepMCCandidate/interface/FlavorHistoryEvent.h">

    <include name="&quot;DataFormats/Common/interface/Ptr.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/OwnVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Handle.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/View.h&quot;"/>
    <include name="&quot;DataFormats/HepMCCandidate/interface/FlavorHistory.h&quot;"/>
    <include name="&lt;fstream&gt;"/>

    <namespace name="reco">

        <namespace name="helpers">

            <class name="FlavorHistoryEventHelper"
                   fullname="reco::helpers::FlavorHistoryEventHelper"
                   module="DataFormats.HepMCCandidate"
                   project=""
                   type="regular struct printable">
                <comment>
       Helper class to decide which type of event this should be classified as.

       Decision is based on a priority weighting of:
        1. flavor (5 &gt; 4)
        2. type:
            2a. Flavor decay
            2b. Matrix element
            2c. Flavor excitation
            2d. Gluon splitting
        3. delta R (if applicable)
                </comment>

                <section>
                    <constructor name="FlavorHistoryEventHelper"
                                 return=""
                                 args="['int','FlavorHistory::FLAVOR_T','double']"
                                 vars="['iflavor','iflavorSource','idR']"
                                 qual="">
FlavorHistoryEventHelper(int iflavor, FlavorHistory::FLAVOR_T iflavorSource, double idR);
                    </constructor>

                    <destructor name="~FlavorHistoryEventHelper"
                                return=""
                                args="['void']"
                                vars="['']"
                                qual="">
~FlavorHistoryEventHelper();
                    </destructor>

                    <member>
int flavor;
                        <comment>
         Data members
                        </comment>
                    </member>

                    <member>
FlavorHistory::FLAVOR_T flavorSource;
                    </member>

                    <member>
double dR;
                    </member>

                    <operator name="operator&lt;"
                              return="bool"
                              args="['FlavorHistoryEventHelper const&amp;']"
                              vars="['right']"
                              qual="const">
bool operator&lt;(FlavorHistoryEventHelper const&amp; right) const;
                        <comment>
         Comparison operators
                        </comment>
                    </operator>

                    <operator name="operator=="
                              return="bool"
                              args="['FlavorHistoryEventHelper const&amp;']"
                              vars="['right']"
                              qual="const">
bool operator==(FlavorHistoryEventHelper const&amp; right) const;
                    </operator>

                    <operator name="operator&lt;&lt;"
                              return="friend std::ostream&amp;"
                              args="['std::ostream&amp;','FlavorHistoryEventHelper']"
                              vars="['out','helper']"
                              qual="">
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, FlavorHistoryEventHelper helper);
                    </operator>

                </section>

                <typemap name="dR"
                         value="reco::helpers::FlavorHistoryEventHelper::dR"
                         type="member"/>
                <typemap name="flavor"
                         value="reco::helpers::FlavorHistoryEventHelper::flavor"
                         type="member"/>
                <typemap name="flavorSource"
                         value="reco::helpers::FlavorHistoryEventHelper::flavorSource"
                         type="member"/>

            </class>
        </namespace>

        <class name="FlavorHistoryEvent"
               fullname="reco::FlavorHistoryEvent"
               module="DataFormats.HepMCCandidate"
               project=""
               type="regular">

            <section name="public">
                <typedef name="value_type"
                         value="FlavorHistory">
typedef FlavorHistory value_type;
                    <comment>
     convenient typedefs
                    </comment>
                </typedef>

                <typedef name="collection_type"
                         value="std::vector&lt;value_type&gt;">
typedef std::vector&lt;value_type&gt; collection_type;
                </typedef>

                <typedef name="size_type"
                         value="collection_type::size_type">
typedef collection_type::size_type size_type;
                </typedef>

                <typedef name="iterator"
                         value="collection_type::iterator">
typedef collection_type::iterator iterator;
                </typedef>

                <typedef name="const_iterator"
                         value="collection_type::const_iterator">
typedef collection_type::const_iterator const_iterator;
                </typedef>

                <typedef name="reverse_iterator"
                         value="collection_type::reverse_iterator">
typedef collection_type::reverse_iterator reverse_iterator;
                </typedef>

                <typedef name="const_reverse_iterator"
                         value="collection_type::const_reverse_iterator">
typedef collection_type::const_reverse_iterator const_reverse_iterator;
                </typedef>

                <typedef name="pointer"
                         value="collection_type::pointer">
typedef collection_type::pointer pointer;
                </typedef>

                <typedef name="const_pointer"
                         value="collection_type::const_pointer">
typedef collection_type::const_pointer const_pointer;
                </typedef>

                <typedef name="reference"
                         value="collection_type::reference">
typedef collection_type::reference reference;
                </typedef>

                <typedef name="const_reference"
                         value="collection_type::const_reference">
typedef collection_type::const_reference const_reference;
                </typedef>

                <typedef name="flavor_type"
                         value="FlavorHistory::FLAVOR_T">
typedef FlavorHistory::FLAVOR_T flavor_type;
                </typedef>

                <constructor name="FlavorHistoryEvent"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
FlavorHistoryEvent();
                </constructor>

                <destructor name="~FlavorHistoryEvent"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~FlavorHistoryEvent();
                </destructor>

                <method1 name="cache"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void cache();
                    <comment>
     Set up the heavy flavor content
                    </comment>
                </method1>

                <method1 name="isCached"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isCached() const;
                </method1>

                <method1 name="nb"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nb() const;
                    <comment>
     Accessors to heavy flavor content
                    </comment>
                </method1>

                <method1 name="nc"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nc() const;
                </method1>

                <method1 name="deltaR"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double deltaR() const;
                    <comment>
     Accessor to maximum delta R between highest flavor constituents
                    </comment>
                </method1>

                <method1 name="highestFlavor"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int highestFlavor() const;
                </method1>

                <method1 name="flavorSource"
                         return="flavor_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
flavor_type flavorSource() const;
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                    <comment>
     vector interface.. when mutable, make sure cache is set to false.
     only allow const access via begin, end, rbegin, rend
                    </comment>
                </method1>

                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>

                <method1 name="rbegin"
                         return="const_reverse_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reverse_iterator rbegin() const;
                </method1>

                <method1 name="rend"
                         return="const_reverse_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_reverse_iterator rend() const;
                </method1>

                <method1 name="push_back"
                         return="void"
                         args="['value_type']"
                         vars="['v']"
                         qual="">
void push_back(value_type v);
                    <comment>
     here is the proper mutable interface... this is done so that the cache is
     set by us, not the user
                    </comment>
                </method1>

                <method1 name="resize"
                         return="void"
                         args="['size_t']"
                         vars="['n']"
                         qual="">
void resize(size_t n);
                </method1>

                <method1 name="clear"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clear();
                </method1>

            </section>

            <typemap name="collection_type"
                     value="std::vector&lt;FlavorHistory&gt;"
                     type="typedef"/>
            <typemap name="const_iterator"
                     value="std::vector&lt;FlavorHistory&gt;::const_iterator"
                     type="typedef"/>
            <typemap name="const_pointer"
                     value="std::vector&lt;FlavorHistory&gt;::const_pointer"
                     type="typedef"/>
            <typemap name="const_reference"
                     value="std::vector&lt;FlavorHistory&gt;::const_reference"
                     type="typedef"/>
            <typemap name="const_reverse_iterator"
                     value="std::vector&lt;FlavorHistory&gt;::const_reverse_iterator"
                     type="typedef"/>
            <typemap name="flavor_type"
                     value="FlavorHistory::FLAVOR_T"
                     type="typedef"/>
            <typemap name="iterator"
                     value="std::vector&lt;FlavorHistory&gt;::iterator"
                     type="typedef"/>
            <typemap name="pointer"
                     value="std::vector&lt;FlavorHistory&gt;::pointer"
                     type="typedef"/>
            <typemap name="reference"
                     value="std::vector&lt;FlavorHistory&gt;::reference"
                     type="typedef"/>
            <typemap name="reverse_iterator"
                     value="std::vector&lt;FlavorHistory&gt;::reverse_iterator"
                     type="typedef"/>
            <typemap name="size_type"
                     value="std::vector&lt;FlavorHistory&gt;::size_type"
                     type="typedef"/>
            <typemap name="value_type"
                     value="FlavorHistory"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="FlavorHistory::FLAVOR_T"/>
    <type name="FlavorHistoryEventHelper"/>
    <type name="FlavorHistoryEventHelper const&amp;"/>
    <type name="bool"/>
    <type name="const_iterator"/>
    <type name="const_reverse_iterator"/>
    <type name="double"/>
    <type name="flavor_type"/>
    <type name="int"/>
    <type name="reco::FlavorHistoryEvent"/>
    <type name="reco::helpers::FlavorHistoryEventHelper"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="std::ostream&amp;"/>
    <type name="unsigned int"/>
    <type name="value_type"/>
    <type name="void"/>
</header>
