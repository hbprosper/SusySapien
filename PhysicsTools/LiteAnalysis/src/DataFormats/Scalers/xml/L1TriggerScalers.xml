<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1TriggerScalers.xml
  Created:  Fri Jan 15 20:47:29 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Scalers/interface/L1TriggerScalers.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Scalers/interface/L1TriggerScalers.h">

    <include name="&quot;DataFormats/Scalers/interface/TimeSpec.h&quot;"/>
    <include name="&lt;ctime&gt;"/>
    <include name="&lt;iosfwd&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>

    <class name="L1TriggerScalers"
           fullname="L1TriggerScalers"
           module="DataFormats.Scalers"
           project=""
           type="regular">
        <comment>
    \brief Persistable copy of L1 Trigger Scalers
        </comment>

        <section name="public">
            <enum name="">
enum
  {

    nL1Triggers=128, 
    nL1TestTriggers=64
  };
                <field name="nL1Triggers" value="128"/>
                <field name="nL1TestTriggers" value="64"/>
            </enum>

            <constructor name="L1TriggerScalers"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1TriggerScalers();
            </constructor>

            <constructor name="L1TriggerScalers"
                         return=""
                         args="['const unsigned char*']"
                         vars="['rawData']"
                         qual="">
L1TriggerScalers(const unsigned char* rawData);
            </constructor>

            <destructor name="~L1TriggerScalers"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~L1TriggerScalers();
            </destructor>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method (= false)
                </comment>
            </method1>

            <method1 name="version"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int version() const;
                <comment>
     Data accessor methods
                </comment>
            </method1>

            <method1 name="trigType"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int trigType() const;
            </method1>

            <method1 name="eventID"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int eventID() const;
            </method1>

            <method1 name="sourceID"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int sourceID() const;
            </method1>

            <method1 name="bunchNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int bunchNumber() const;
            </method1>

            <method1 name="collectionTimeSpecial"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
timespec collectionTimeSpecial() const;
            </method1>

            <method1 name="orbitNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int orbitNumber() const;
            </method1>

            <method1 name="luminositySection"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int luminositySection() const;
            </method1>

            <method1 name="bunchCrossingErrors"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int bunchCrossingErrors() const;
            </method1>

            <method1 name="collectionTimeSummary"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
timespec collectionTimeSummary() const;
            </method1>

            <method1 name="triggerNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int triggerNumber() const;
            </method1>

            <method1 name="eventNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int eventNumber() const;
            </method1>

            <method1 name="finalTriggersDistributed"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int finalTriggersDistributed() const;
            </method1>

            <method1 name="calibrationTriggers"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int calibrationTriggers() const;
            </method1>

            <method1 name="randomTriggers"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int randomTriggers() const;
            </method1>

            <method1 name="totalTestTriggers"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int totalTestTriggers() const;
            </method1>

            <method1 name="finalTriggersGenerated"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int finalTriggersGenerated() const;
            </method1>

            <method1 name="finalTriggersInvalidBC"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int finalTriggersInvalidBC() const;
            </method1>

            <method1 name="deadTime"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTime() const;
            </method1>

            <method1 name="lostFinalTriggers"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long lostFinalTriggers() const;
            </method1>

            <method1 name="deadTimeActive"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActive() const;
            </method1>

            <method1 name="lostFinalTriggersActive"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long lostFinalTriggersActive() const;
            </method1>

            <method1 name="deadTimeActivePrivate"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActivePrivate() const;
            </method1>

            <method1 name="deadTimeActivePartition"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActivePartition() const;
            </method1>

            <method1 name="deadTimeActiveThrottle"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActiveThrottle() const;
            </method1>

            <method1 name="deadTimeActiveCalibration"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActiveCalibration() const;
            </method1>

            <method1 name="deadTimeActiveTimeSlot"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deadTimeActiveTimeSlot() const;
            </method1>

            <method1 name="numberResets"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int numberResets() const;
            </method1>

            <method1 name="collectionTimeDetails"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
timespec collectionTimeDetails() const;
            </method1>

            <method2 name="triggers"
                     return="std::vector&lt;unsigned int&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;unsigned int&gt; triggers() const;
            </method2>

            <method2 name="testTriggers"
                     return="std::vector&lt;unsigned int&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;unsigned int&gt; testTriggers() const;
            </method2>

            <operator name="operator=="
                      return="int"
                      args="['const L1TriggerScalers&amp;']"
                      vars="['e']"
                      qual="const">
int operator==(const L1TriggerScalers&amp; e) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const L1TriggerScalers&amp;']"
                      vars="['e']"
                      qual="const">
int operator!=(const L1TriggerScalers&amp; e) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="nL1TestTriggers "
                 value="L1TriggerScalers::nL1TestTriggers "
                 type="enum"/>
        <typemap name="nL1Triggers "
                 value="L1TriggerScalers::nL1Triggers "
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1TriggerScalers&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1TriggerScalers&amp; c);
        <comment>
    Pretty-print operator for L1TriggerScalers
        </comment>
    </operator>

    <typedef name="L1TriggerScalersCollection"
             value="std::vector&lt;L1TriggerScalers&gt;">
typedef std::vector&lt;L1TriggerScalers&gt; L1TriggerScalersCollection;
    </typedef>


    <type name="L1TriggerScalers"/>
    <type name="bool"/>
    <type name="const L1TriggerScalers&amp;"/>
    <type name="const unsigned char*"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="std::string"/>
    <type name="std::vector&lt;unsigned int&gt;"/>
    <type name="timespec"/>
    <type name="unsigned int"/>
    <type name="unsigned long long"/>
    <type name="void"/>
</header>
