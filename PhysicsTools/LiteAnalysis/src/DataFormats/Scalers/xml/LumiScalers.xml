<?xml version="1.0"?>
<!--
==============================================================================
  XML File: LumiScalers.xml
  Created:  Thu Jan 14 22:48:35 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Scalers/interface/LumiScalers.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Scalers/interface/LumiScalers.h">

    <include name="&lt;ostream&gt;"/>
    <include name="&lt;vector&gt;"/>

    <class name="LumiScalers"
           fullname="LumiScalers"
           module="DataFormats.Scalers"
           project=""
           type="regular">
        <comment>
    \brief Persistable copy of HF Lumi Scalers
        </comment>

        <section name="public">
            <constructor name="LumiScalers"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
LumiScalers();
            </constructor>

            <constructor name="LumiScalers"
                         return=""
                         args="['const unsigned char*']"
                         vars="['rawData']"
                         qual="">
LumiScalers(const unsigned char* rawData);
            </constructor>

            <destructor name="~LumiScalers"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~LumiScalers();
            </destructor>

            <enum name="">
enum
  {

    nOcc=2
  };
                <field name="nOcc" value="2"/>
            </enum>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method (= false)
                </comment>
            </method1>

            <method1 name="trigType"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int trigType() const;
            </method1>

            <method1 name="eventID"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int eventID() const;
            </method1>

            <method1 name="sourceID"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int sourceID() const;
            </method1>

            <method1 name="bunchNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int bunchNumber() const;
            </method1>

            <method1 name="version"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int version() const;
            </method1>

            <method1 name="collectionTime"
                     return="struct timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
struct timespec collectionTime() const;
            </method1>

            <method1 name="normalization"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float normalization() const;
            </method1>

            <method1 name="deadTimeNormalization"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float deadTimeNormalization() const;
            </method1>

            <method1 name="lumiFill"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float lumiFill() const;
            </method1>

            <method1 name="lumiRun"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float lumiRun() const;
            </method1>

            <method1 name="liveLumiFill"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float liveLumiFill() const;
            </method1>

            <method1 name="liveLumiRun"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float liveLumiRun() const;
            </method1>

            <method1 name="instantLumi"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float instantLumi() const;
            </method1>

            <method1 name="instantLumiErr"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float instantLumiErr() const;
            </method1>

            <method1 name="instantLumiQlty"
                     return="unsigned char"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned char instantLumiQlty() const;
            </method1>

            <method1 name="lumiETFill"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float lumiETFill() const;
            </method1>

            <method1 name="lumiETRun"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float lumiETRun() const;
            </method1>

            <method1 name="liveLumiETFill"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float liveLumiETFill() const;
            </method1>

            <method1 name="liveLumiETRun"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float liveLumiETRun() const;
            </method1>

            <method1 name="instantETLumi"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float instantETLumi() const;
            </method1>

            <method1 name="instantETLumiErr"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float instantETLumiErr() const;
            </method1>

            <method1 name="instantETLumiQlty"
                     return="unsigned char"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned char instantETLumiQlty() const;
            </method1>

            <method2 name="lumiOccFill"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; lumiOccFill() const;
            </method2>

            <method2 name="lumiOccRun"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; lumiOccRun() const;
            </method2>

            <method2 name="liveLumiOccFill"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; liveLumiOccFill() const;
            </method2>

            <method2 name="liveLumiOccRun"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; liveLumiOccRun() const;
            </method2>

            <method2 name="instantOccLumi"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; instantOccLumi() const;
            </method2>

            <method2 name="instantOccLumiErr"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; instantOccLumiErr() const;
            </method2>

            <method2 name="instantOccLumiQlty"
                     return="std::vector&lt;unsigned char&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;unsigned char&gt; instantOccLumiQlty() const;
            </method2>

            <method2 name="lumiNoise"
                     return="std::vector&lt;float&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;float&gt; lumiNoise() const;
            </method2>

            <method1 name="sectionNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int sectionNumber() const;
            </method1>

            <method1 name="startOrbit"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int startOrbit() const;
            </method1>

            <method1 name="numOrbits"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int numOrbits() const;
            </method1>

            <operator name="operator=="
                      return="int"
                      args="['const LumiScalers&amp;']"
                      vars="['e']"
                      qual="const">
int operator==(const LumiScalers&amp; e) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const LumiScalers&amp;']"
                      vars="['e']"
                      qual="const">
int operator!=(const LumiScalers&amp; e) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="nOcc "
                 value="LumiScalers::nOcc "
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const LumiScalers&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const LumiScalers&amp; c);
        <comment>
    Pretty-print operator for LumiScalers
        </comment>
    </operator>

    <typedef name="LumiScalersCollection"
             value="std::vector&lt;LumiScalers&gt;">
typedef std::vector&lt;LumiScalers&gt; LumiScalersCollection;
    </typedef>


    <type name="LumiScalers"/>
    <type name="bool"/>
    <type name="const LumiScalers&amp;"/>
    <type name="const unsigned char*"/>
    <type name="enum"/>
    <type name="float"/>
    <type name="int"/>
    <type name="std::string"/>
    <type name="std::vector&lt;float&gt;"/>
    <type name="std::vector&lt;unsigned char&gt;"/>
    <type name="struct timespec"/>
    <type name="unsigned char"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
