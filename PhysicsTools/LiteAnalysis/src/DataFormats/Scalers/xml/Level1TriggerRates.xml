<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Level1TriggerRates.xml
  Created:  Fri Jan 15 20:47:29 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Scalers/interface/Level1TriggerRates.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Scalers/interface/Level1TriggerRates.h">

    <include name="&quot;DataFormats/Scalers/interface/TimeSpec.h&quot;"/>
    <include name="&lt;ctime&gt;"/>
    <include name="&lt;iosfwd&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <forward name="Level1TriggerScalers"/>

    <class name="Level1TriggerRates"
           fullname="Level1TriggerRates"
           module="DataFormats.Scalers"
           project=""
           type="regular">

        <section name="public">
            <enum name="">
enum
  {

    N_BX=3654, 
    N_BX_ACTIVE=2808
  };
                <field name="N_BX" value="3654"/>
                <field name="N_BX_ACTIVE" value="2808"/>
            </enum>

            <constructor name="Level1TriggerRates"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
Level1TriggerRates();
            </constructor>

            <constructor name="Level1TriggerRates"
                         return=""
                         args="['Level1TriggerScalers const&amp;']"
                         vars="['s']"
                         qual="">
Level1TriggerRates(Level1TriggerScalers const&amp; s);
            </constructor>

            <constructor name="Level1TriggerRates"
                         return=""
                         args="['Level1TriggerScalers const&amp;','Level1TriggerScalers const&amp;']"
                         vars="['s1','s2']"
                         qual="">
Level1TriggerRates(Level1TriggerScalers const&amp; s1, Level1TriggerScalers const&amp; s2);
            </constructor>

            <destructor name="~Level1TriggerRates"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~Level1TriggerRates();
            </destructor>

            <method1 name="computeRates"
                     return="void"
                     args="['Level1TriggerScalers const&amp;']"
                     vars="['t1']"
                     qual="">
void computeRates(Level1TriggerScalers const&amp; t1);
            </method1>

            <method1 name="computeRates"
                     return="void"
                     args="['Level1TriggerScalers const&amp;','Level1TriggerScalers const&amp;']"
                     vars="['t1','t2']"
                     qual="">
void computeRates(Level1TriggerScalers const&amp; t1, Level1TriggerScalers const&amp; t2);
            </method1>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method (= false)
                </comment>
            </method1>

            <method1 name="version"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int version() const;
                <comment>
      get the data
                </comment>
            </method1>

            <method1 name="collectionTime"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="">
timespec collectionTime();
            </method1>

            <method1 name="deltaNS"
                     return="unsigned long long"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned long long deltaNS() const;
            </method1>

            <method1 name="deltaT"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deltaT() const;
            </method1>

            <method1 name="gtTriggersRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double gtTriggersRate() const;
            </method1>

            <method1 name="gtEventsRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double gtEventsRate() const;
            </method1>

            <method1 name="collectionTimeLumiSeg"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="">
timespec collectionTimeLumiSeg();
            </method1>

            <method1 name="triggersPhysicsGeneratedFDLRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double triggersPhysicsGeneratedFDLRate() const;
            </method1>

            <method1 name="triggersPhysicsLostRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double triggersPhysicsLostRate() const;
            </method1>

            <method1 name="triggersPhysicsLostBeamActiveRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double triggersPhysicsLostBeamActiveRate() const;
            </method1>

            <method1 name="triggersPhysicsLostBeamInactiveRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double triggersPhysicsLostBeamInactiveRate() const;
            </method1>

            <method1 name="l1AsPhysicsRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double l1AsPhysicsRate() const;
            </method1>

            <method1 name="l1AsRandomRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double l1AsRandomRate() const;
            </method1>

            <method1 name="l1AsTestRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double l1AsTestRate() const;
            </method1>

            <method1 name="l1AsCalibrationRate"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double l1AsCalibrationRate() const;
            </method1>

            <method1 name="deadtimePercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimePercent() const;
            </method1>

            <method1 name="deadtimeBeamActivePercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActivePercent() const;
            </method1>

            <method1 name="deadtimeBeamActiveTriggerRulesPercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActiveTriggerRulesPercent() const;
            </method1>

            <method1 name="deadtimeBeamActiveCalibrationPercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActiveCalibrationPercent() const;
            </method1>

            <method1 name="deadtimeBeamActivePrivateOrbitPercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActivePrivateOrbitPercent() const;
            </method1>

            <method1 name="deadtimeBeamActivePartitionControllerPercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActivePartitionControllerPercent() const;
            </method1>

            <method1 name="deadtimeBeamActiveTimeSlotPercent"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double deadtimeBeamActiveTimeSlotPercent() const;
            </method1>

            <method1 name="collectionTime"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
timespec collectionTime() const;
            </method1>

            <method1 name="collectionTimeLumiSeg"
                     return="timespec"
                     args="['void']"
                     vars="['']"
                     qual="const">
timespec collectionTimeLumiSeg() const;
            </method1>

            <method2 name="gtAlgoCountsRate"
                     return="std::vector&lt;double&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;double&gt; gtAlgoCountsRate() const;
            </method2>

            <method2 name="gtTechCountsRate"
                     return="std::vector&lt;double&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::vector&lt;double&gt; gtTechCountsRate() const;
            </method2>

            <operator name="operator=="
                      return="int"
                      args="['const Level1TriggerRates&amp;']"
                      vars="['e']"
                      qual="const">
int operator==(const Level1TriggerRates&amp; e) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const Level1TriggerRates&amp;']"
                      vars="['e']"
                      qual="const">
int operator!=(const Level1TriggerRates&amp; e) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="N_BX "
                 value="Level1TriggerRates::N_BX "
                 type="enum"/>
        <typemap name="N_BX_ACTIVE "
                 value="Level1TriggerRates::N_BX_ACTIVE "
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const Level1TriggerRates&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Level1TriggerRates&amp; c);
        <comment>
    Pretty-print operator for Level1TriggerRates
        </comment>
    </operator>

    <typedef name="Level1TriggerRatesCollection"
             value="std::vector&lt;Level1TriggerRates&gt;">
typedef std::vector&lt;Level1TriggerRates&gt; Level1TriggerRatesCollection;
    </typedef>


    <type name="Level1TriggerRates"/>
    <type name="Level1TriggerScalers const&amp;"/>
    <type name="bool"/>
    <type name="const Level1TriggerRates&amp;"/>
    <type name="double"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="std::string"/>
    <type name="std::vector&lt;double&gt;"/>
    <type name="timespec"/>
    <type name="unsigned long long"/>
    <type name="void"/>
</header>
