<?xml version="1.0"?>
<!--
==============================================================================
  XML File: L1AcceptBunchCrossing.xml
  Created:  Fri Jan 15 20:47:28 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Scalers/interface/L1AcceptBunchCrossing.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Scalers/interface/L1AcceptBunchCrossing.h">

    <include name="&lt;ostream&gt;"/>
    <include name="&lt;vector&gt;"/>

    <class name="L1AcceptBunchCrossing"
           fullname="L1AcceptBunchCrossing"
           module="DataFormats.Scalers"
           project=""
           type="regular">
        <comment>
    \brief Persistable copy of Scalers L1Accept bunch crossing info
        </comment>

        <section name="public">
            <constructor name="L1AcceptBunchCrossing"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
L1AcceptBunchCrossing();
            </constructor>

            <constructor name="L1AcceptBunchCrossing"
                         return=""
                         args="['const int','const unsigned int','const unsigned int','const unsigned int']"
                         vars="['l1AcceptOffset__','orbitNumber__','bunchCrossing__','eventType__']"
                         qual="">
L1AcceptBunchCrossing(const int l1AcceptOffset__, const unsigned int orbitNumber__, const unsigned int bunchCrossing__, const unsigned int eventType__);
            </constructor>

            <constructor name="L1AcceptBunchCrossing"
                         return=""
                         args="['const int','const unsigned long long']"
                         vars="['index','data']"
                         qual="">
L1AcceptBunchCrossing(const int index, const unsigned long long data);
            </constructor>

            <destructor name="~L1AcceptBunchCrossing"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~L1AcceptBunchCrossing();
            </destructor>

            <enum name="">
enum
  {

    ORBIT_NUMBER_SHIFT=32ULL, 
    ORBIT_NUMBER_MASK=0xFFFFFFFFULL, 
    BUNCH_CROSSING_SHIFT=4ULL, 
    BUNCH_CROSSING_MASK=0xFFFULL, 
    EVENT_TYPE_SHIFT=0, 
    EVENT_TYPE_MASK=0xFULL
  };
                <field name="ORBIT_NUMBER_SHIFT" value="32ULL"/>
                <field name="ORBIT_NUMBER_MASK" value="0xFFFFFFFFULL"/>
                <field name="BUNCH_CROSSING_SHIFT" value="4ULL"/>
                <field name="BUNCH_CROSSING_MASK" value="0xFFFULL"/>
                <field name="EVENT_TYPE_SHIFT" value="0"/>
                <field name="EVENT_TYPE_MASK" value="0xFULL"/>
            </enum>

            <method1 name="name"
                     return="std::string"
                     args="['void']"
                     vars="['']"
                     qual="const">
std::string name() const;
                <comment>
      name method
                </comment>
            </method1>

            <method1 name="empty"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool empty() const;
                <comment>
      empty method (= false)
                </comment>
            </method1>

            <method1 name="l1AcceptOffset"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int l1AcceptOffset() const;
            </method1>

            <method1 name="orbitNumber"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int orbitNumber() const;
            </method1>

            <method1 name="bunchCrossing"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int bunchCrossing() const;
            </method1>

            <method1 name="eventType"
                     return="unsigned int"
                     args="['void']"
                     vars="['']"
                     qual="const">
unsigned int eventType() const;
            </method1>

            <operator name="operator=="
                      return="int"
                      args="['const L1AcceptBunchCrossing&amp;']"
                      vars="['e']"
                      qual="const">
int operator==(const L1AcceptBunchCrossing&amp; e) const;
                <comment>
      equality operator
                </comment>
            </operator>

            <operator name="operator!="
                      return="int"
                      args="['const L1AcceptBunchCrossing&amp;']"
                      vars="['e']"
                      qual="const">
int operator!=(const L1AcceptBunchCrossing&amp; e) const;
                <comment>
      inequality operator
                </comment>
            </operator>

        </section>

        <typemap name="BUNCH_CROSSING_MASK "
                 value="L1AcceptBunchCrossing::BUNCH_CROSSING_MASK "
                 type="enum"/>
        <typemap name="BUNCH_CROSSING_SHIFT "
                 value="L1AcceptBunchCrossing::BUNCH_CROSSING_SHIFT "
                 type="enum"/>
        <typemap name="EVENT_TYPE_MASK "
                 value="L1AcceptBunchCrossing::EVENT_TYPE_MASK "
                 type="enum"/>
        <typemap name="EVENT_TYPE_SHIFT "
                 value="L1AcceptBunchCrossing::EVENT_TYPE_SHIFT "
                 type="enum"/>
        <typemap name="ORBIT_NUMBER_MASK "
                 value="L1AcceptBunchCrossing::ORBIT_NUMBER_MASK "
                 type="enum"/>
        <typemap name="ORBIT_NUMBER_SHIFT "
                 value="L1AcceptBunchCrossing::ORBIT_NUMBER_SHIFT "
                 type="enum"/>

    </class>
    <operator name="operator&lt;&lt;"
              return="std::ostream&amp;"
              args="['std::ostream&amp;','const L1AcceptBunchCrossing&amp;']"
              vars="['s','c']"
              qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const L1AcceptBunchCrossing&amp; c);
        <comment>
    Pretty-print operator for L1AcceptBunchCrossings
        </comment>
    </operator>

    <typedef name="L1AcceptBunchCrossingCollection"
             value="std::vector&lt;L1AcceptBunchCrossing&gt;">
typedef std::vector&lt;L1AcceptBunchCrossing&gt; L1AcceptBunchCrossingCollection;
    </typedef>


    <type name="L1AcceptBunchCrossing"/>
    <type name="bool"/>
    <type name="const L1AcceptBunchCrossing&amp;"/>
    <type name="const int"/>
    <type name="const unsigned int"/>
    <type name="const unsigned long long"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="std::string"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
