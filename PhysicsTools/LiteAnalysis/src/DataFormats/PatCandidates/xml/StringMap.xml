<?xml version="1.0"?>
<!--
==============================================================================
  XML File: StringMap.xml
  Created:  Thu Jan 14 22:48:19 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/StringMap.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/StringMap.h">

    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;algorithm&gt;"/>

    <class name="StringMap"
           fullname="StringMap"
           module="DataFormats.PatCandidates"
           project=""
           type="regular">

        <section name="public">
            <typedef name="value_type"
                     value="std::pair&lt;std::string, int32_t&gt;">
typedef std::pair&lt;std::string, int32_t&gt; value_type;
            </typedef>

            <typedef name="vector_type"
                     value="std::vector&lt;value_type&gt;">
typedef std::vector&lt;value_type&gt; vector_type;
            </typedef>

            <typedef name="const_iterator"
                     value="vector_type::const_iterator">
typedef vector_type::const_iterator const_iterator;
            </typedef>

            <method1 name="add"
                     return="void"
                     args="['const std::string&amp;','int32_t']"
                     vars="['string','value']"
                     qual="">
void add(const std::string&amp; string, int32_t value);
            </method1>

            <method1 name="sort"
                     return="void"
                     args="['void']"
                     vars="['']"
                     qual="">
void sort();
            </method1>

            <method1 name="clear"
                     return="void"
                     args="['void']"
                     vars="['']"
                     qual="">
void clear();
            </method1>

            <operator name="operator[]"
                      return="int32_t"
                      args="['const std::string&amp;']"
                      vars="['string']"
                      qual="const">
int32_t operator[](const std::string&amp; string) const;
                <comment>
            note: works only after it's sorted
                </comment>
            </operator>

            <operator name="operator[]"
                      return="const std::string&amp;"
                      args="['int32_t']"
                      vars="['number']"
                      qual="const">
const std::string&amp; operator[](int32_t number) const;
                <comment>
            note: works only after it's sorted
                </comment>
            </operator>

            <method1 name="find"
                     return="const_iterator"
                     args="['const std::string&amp;']"
                     vars="['string']"
                     qual="const">
const_iterator find(const std::string&amp; string) const;
            </method1>

            <method1 name="find"
                     return="const_iterator"
                     args="['int32_t']"
                     vars="['number']"
                     qual="const">
const_iterator find(int32_t number) const;
            </method1>

            <method1 name="begin"
                     return="const_iterator"
                     args="['void']"
                     vars="['']"
                     qual="const">
const_iterator begin() const;
            </method1>

            <method1 name="end"
                     return="const_iterator"
                     args="['void']"
                     vars="['']"
                     qual="const">
const_iterator end() const;
            </method1>

            <method1 name="size"
                     return="size_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
size_t size() const;
            </method1>

        </section>
        <section name="private">

            <class name="MatchByString"
                   fullname="StringMap::MatchByString"
                   module="DataFormats.PatCandidates"
                   project=""
                   type="regular">

                <section name="public">
                    <constructor name="MatchByString"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
MatchByString();
                    </constructor>

                    <operator name="operator()"
                              return="bool"
                              args="['const value_type&amp;','const std::string&amp;']"
                              vars="['val','string']"
                              qual="const">
bool operatorPP(const value_type&amp; val, const std::string&amp; string) const;
                        <comment>
                  MatchByString(const std::string &amp;string) : string_(string) {}
                        </comment>
                    </operator>

                </section>

                <typemap name="MatchByString"
                         value="StringMap::MatchByString"
                         type="class"/>

            </class>

            <class name="MatchByNumber"
                   fullname="StringMap::MatchByNumber"
                   module="DataFormats.PatCandidates"
                   project=""
                   type="regular">

                <section name="public">
                    <constructor name="MatchByNumber"
                                 return=""
                                 args="['int32_t']"
                                 vars="['number']"
                                 qual="">
MatchByNumber(int32_t number);
                    </constructor>

                    <operator name="operator()"
                              return="bool"
                              args="['const value_type&amp;']"
                              vars="['val']"
                              qual="const">
bool operatorPP(const value_type&amp; val) const;
                    </operator>

                </section>

                <typemap name="MatchByNumber"
                         value="StringMap::MatchByNumber"
                         type="class"/>

            </class>
        </section>

        <typemap name="const_iterator"
                 value="std::vector&lt;std::pair&lt;std::string, int32_t&gt; &gt;::const_iterator"
                 type="typedef"/>
        <typemap name="value_type"
                 value="std::pair&lt;std::string, int32_t&gt;"
                 type="typedef"/>
        <typemap name="vector_type"
                 value="std::vector&lt;std::pair&lt;std::string, int32_t&gt; &gt;"
                 type="typedef"/>

    </class>

    <type name="StringMap"/>
    <type name="StringMap::MatchByNumber"/>
    <type name="StringMap::MatchByString"/>
    <type name="bool"/>
    <type name="const std::string&amp;"/>
    <type name="const value_type&amp;"/>
    <type name="const_iterator"/>
    <type name="int32_t"/>
    <type name="size_t"/>
    <type name="void"/>
</header>
