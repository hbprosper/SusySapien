<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CandKinResolution.xml
  Created:  Thu Jan 14 22:48:07 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/CandKinResolution.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/CandKinResolution.h">

    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/CLHEP/interface/AlgebraicObjects.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/CandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ValueMap.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/BoolCache.h&quot;"/>

    <namespace name="pat">

        <class name="CandKinResolution"
               fullname="pat::CandKinResolution"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">

            <section name="public">
                <typedef name="LorentzVector"
                         value="math::XYZTLorentzVector">
typedef math::XYZTLorentzVector LorentzVector;
                </typedef>

                <typedef name="Scalar"
                         value="float">
typedef float Scalar;
                </typedef>

                <enum name="Parametrization">
enum Parametrization {
 Invalid=0, 

                Cart=0x04, 
                ECart=0x14, 
                Spher=0x24, 
                ESpher=0x34, 
                MomDev=0x44, 
                EMomDev=0x54, 

                MCCart=0x03, 
                MCSpher=0x13, 
                MCPInvSpher=0x23, 
                EtEtaPhi=0x33, 
                EtThetaPhi=0x43, 
                MCMomDev=0x53, 
                EScaledMomDev=0x63
                };
                    <field name="Invalid" value="0"/>
                    <field name="Cart" value="0x04"/>
                    <field name="ECart" value="0x14"/>
                    <field name="Spher" value="0x24"/>
                    <field name="ESpher" value="0x34"/>
                    <field name="MomDev" value="0x44"/>
                    <field name="EMomDev" value="0x54"/>
                    <field name="MCCart" value="0x03"/>
                    <field name="MCSpher" value="0x13"/>
                    <field name="MCPInvSpher" value="0x23"/>
                    <field name="EtEtaPhi" value="0x33"/>
                    <field name="EtThetaPhi" value="0x43"/>
                    <field name="MCMomDev" value="0x53"/>
                    <field name="EScaledMomDev" value="0x63"/>
                </enum>

                <constructor name="CandKinResolution"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CandKinResolution();
                </constructor>

                <constructor name="CandKinResolution"
                             return=""
                             args="['Parametrization','const std::vector&lt;Scalar&gt;&amp;','const std::vector&lt;Scalar&gt;&amp;=std::vector&lt;Scalar&gt;()']"
                             vars="['parametrization','covariances','constraints']"
                             qual="">
CandKinResolution(Parametrization parametrization, const std::vector&lt;Scalar&gt;&amp; covariances, const std::vector&lt;Scalar&gt;&amp; constraints=std::vector&lt;Scalar&gt;());
                    <comment>
            works (N = 3 or 4)
                    </comment>
                </constructor>

                <constructor name="CandKinResolution"
                             return=""
                             args="['Parametrization','const AlgebraicSymMatrix44&amp;','const std::vector&lt;Scalar&gt;&amp;=std::vector&lt;Scalar&gt;()']"
                             vars="['parametrization','covariance','constraints']"
                             qual="">
CandKinResolution(Parametrization parametrization, const AlgebraicSymMatrix44&amp; covariance, const std::vector&lt;Scalar&gt;&amp; constraints=std::vector&lt;Scalar&gt;());
                    <comment>
            Fill in a cresolution object given a parametrization code, a covariance matrix and a vector of constraints.
                    </comment>
                </constructor>

                <destructor name="~CandKinResolution"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~CandKinResolution();
                </destructor>

                <method1 name="parametrization"
                         return="Parametrization"
                         args="['void']"
                         vars="['']"
                         qual="const">
Parametrization parametrization() const;
                    <comment>
            Return the code of the parametrization used in this object
                    </comment>
                </method1>

                <method1 name="dimension"
                         return="uint32_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
uint32_t dimension() const;
                    <comment>
            Returns the number of free parameters in this parametrization
                    </comment>
                </method1>

                <method1 name="covariance"
                         return="const AlgebraicSymMatrix44&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const AlgebraicSymMatrix44&amp; covariance() const;
                    <comment>
            Returns the full covariance matrix
                    </comment>
                </method1>

                <method2 name="constraints"
                         return="const std::vector&lt;Scalar&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;Scalar&gt;&amp; constraints() const;
                    <comment>
            The constraints associated with this parametrization
                    </comment>
                </method2>

                <method1 name="resolEta"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolEta(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on eta, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolTheta"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolTheta(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on theta, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPhi"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPhi(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on phi, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolE"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolE(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on energy, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolEt"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolEt(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on et, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolM"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolM(const LorentzVector&amp; p4) const;
                    <comment>
            Warning: returns 0 for mass-constrained parametrizations.
                    </comment>
                </method1>

                <method1 name="resolP"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolP(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on p, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPt"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPt(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on pt, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPInv"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPInv(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on 1/p, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPx"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPx(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on px, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPy"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPy(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on py, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

                <method1 name="resolPz"
                         return="double"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="const">
double resolPz(const LorentzVector&amp; p4) const;
                    <comment>
            Resolution on pz, given the 4-momentum of the associated Candidate
                    </comment>
                </method1>

            </section>

            <typemap name="Cart "
                     value="pat::CandKinResolution::Cart "
                     type="enum"/>
            <typemap name="ECart "
                     value="pat::CandKinResolution::ECart "
                     type="enum"/>
            <typemap name="EMomDev "
                     value="pat::CandKinResolution::EMomDev "
                     type="enum"/>
            <typemap name="EScaledMomDev "
                     value="pat::CandKinResolution::EScaledMomDev "
                     type="enum"/>
            <typemap name="ESpher "
                     value="pat::CandKinResolution::ESpher "
                     type="enum"/>
            <typemap name="EtEtaPhi "
                     value="pat::CandKinResolution::EtEtaPhi "
                     type="enum"/>
            <typemap name="EtThetaPhi "
                     value="pat::CandKinResolution::EtThetaPhi "
                     type="enum"/>
            <typemap name="Invalid"
                     value="pat::CandKinResolution::Invalid"
                     type="enum"/>
            <typemap name="LorentzVector"
                     value="math::XYZTLorentzVector"
                     type="typedef"/>
            <typemap name="MCCart "
                     value="pat::CandKinResolution::MCCart "
                     type="enum"/>
            <typemap name="MCMomDev "
                     value="pat::CandKinResolution::MCMomDev "
                     type="enum"/>
            <typemap name="MCPInvSpher "
                     value="pat::CandKinResolution::MCPInvSpher "
                     type="enum"/>
            <typemap name="MCSpher "
                     value="pat::CandKinResolution::MCSpher "
                     type="enum"/>
            <typemap name="MomDev "
                     value="pat::CandKinResolution::MomDev "
                     type="enum"/>
            <typemap name="Parametrization"
                     value="pat::CandKinResolution::Parametrization"
                     type="enum"/>
            <typemap name="Scalar"
                     value="float"
                     type="typedef"/>
            <typemap name="Spher "
                     value="pat::CandKinResolution::Spher "
                     type="enum"/>

        </class>
        <typedef name="CandKinResolutionCollection"
                 value="std::vector&lt;CandKinResolution&gt;">
typedef std::vector&lt;CandKinResolution&gt; CandKinResolutionCollection;
        </typedef>

        <typedef name="CandKinResolutionValueMap"
                 value="edm::ValueMap&lt;CandKinResolution&gt;">
typedef edm::ValueMap&lt;CandKinResolution&gt; CandKinResolutionValueMap;
        </typedef>

    </namespace>

    <type name="Parametrization"/>
    <type name="const AlgebraicSymMatrix44&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const std::vector&lt;Scalar&gt;&amp;"/>
    <type name="double"/>
    <type name="enum Parametrization"/>
    <type name="pat::CandKinResolution"/>
    <type name="uint32_t"/>
    <type name="void"/>
</header>
