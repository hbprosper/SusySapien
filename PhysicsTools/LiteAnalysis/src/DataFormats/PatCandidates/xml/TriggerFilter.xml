<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TriggerFilter.xml
  Created:  Fri Jan 15 20:47:19 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/TriggerFilter.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/TriggerFilter.h">

    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;FWCore/Utilities/interface/InputTag.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVectorIterator.h&quot;"/>

    <namespace name="pat">

        <class name="TriggerFilter"
               fullname="pat::TriggerFilter"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">

            <section>
                <member>
std::string label_;
                    <comment>
          data members
                    </comment>
                </member>

                <member>
std::string type_;
                </member>

                <member>
std::vector&lt;unsigned &gt; objectKeys_;
                </member>

                <member>
std::vector&lt;int &gt; objectIds_;
                </member>

                <member>
int status_;
                </member>

            </section>
            <section name="public">
                <constructor name="TriggerFilter"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TriggerFilter();
                    <comment>
          constructors and desctructor
                    </comment>
                </constructor>

                <constructor name="TriggerFilter"
                             return=""
                             args="['const std::string&amp;','int=-1']"
                             vars="['label','status']"
                             qual="">
TriggerFilter(const std::string&amp; label, int status=-1);
                </constructor>

                <constructor name="TriggerFilter"
                             return=""
                             args="['const edm::InputTag&amp;','int=-1']"
                             vars="['tag','status']"
                             qual="">
TriggerFilter(const edm::InputTag&amp; tag, int status=-1);
                </constructor>

                <destructor name="~TriggerFilter"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TriggerFilter();
                </destructor>

                <method1 name="setLabel"
                         return="void"
                         args="['const std::string&amp;']"
                         vars="['label']"
                         qual="">
void setLabel(const std::string&amp; label);
                    <comment>
          setters &amp; getters
                    </comment>
                </method1>

                <method1 name="setType"
                         return="void"
                         args="['const std::string&amp;']"
                         vars="['type']"
                         qual="">
void setType(const std::string&amp; type);
                </method1>

                <method1 name="addObjectKey"
                         return="void"
                         args="['unsigned']"
                         vars="['objectKey']"
                         qual="">
void addObjectKey(unsigned objectKey);
                </method1>

                <method1 name="addObjectId"
                         return="void"
                         args="['int']"
                         vars="['objectId']"
                         qual="">
void addObjectId(int objectId);
                </method1>

                <method1 name="setStatus"
                         return="bool"
                         args="['int']"
                         vars="['status']"
                         qual="">
bool setStatus(int status);
                </method1>

                <method1 name="label"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string label() const;
                </method1>

                <method1 name="type"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string type() const;
                </method1>

                <method2 name="objectKeys"
                         return="std::vector&lt;unsigned &gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;unsigned &gt; objectKeys() const;
                </method2>

                <method2 name="objectIds"
                         return="std::vector&lt;int &gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;int &gt; objectIds() const;
                </method2>

                <method1 name="status"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int status() const;
                </method1>

                <method1 name="hasObjectKey"
                         return="bool"
                         args="['unsigned']"
                         vars="['objectKey']"
                         qual="const">
bool hasObjectKey(unsigned objectKey) const;
                </method1>

                <method1 name="hasObjectId"
                         return="bool"
                         args="['int']"
                         vars="['objectId']"
                         qual="const">
bool hasObjectId(int objectId) const;
                </method1>

            </section>

            <typemap name="label_"
                     value="pat::TriggerFilter::label_"
                     type="member"/>
            <typemap name="objectIds_"
                     value="pat::TriggerFilter::objectIds_"
                     type="member"/>
            <typemap name="objectKeys_"
                     value="pat::TriggerFilter::objectKeys_"
                     type="member"/>
            <typemap name="status_"
                     value="pat::TriggerFilter::status_"
                     type="member"/>
            <typemap name="type_"
                     value="pat::TriggerFilter::type_"
                     type="member"/>

        </class>
        <typedef name="TriggerFilterCollection"
                 value="std::vector&lt;TriggerFilter &gt;">
typedef std::vector&lt;TriggerFilter &gt; TriggerFilterCollection;
            <comment>
      collection of TriggerFilter
            </comment>
        </typedef>

        <typedef name="TriggerFilterRef"
                 value="edm::Ref&lt;TriggerFilterCollection &gt;">
typedef edm::Ref&lt;TriggerFilterCollection &gt; TriggerFilterRef;
            <comment>
      persistent reference to an item in a TriggerFilterCollection
            </comment>
        </typedef>

        <typedef name="TriggerFilterRefProd"
                 value="edm::RefProd&lt;TriggerFilterCollection &gt;">
typedef edm::RefProd&lt;TriggerFilterCollection &gt; TriggerFilterRefProd;
            <comment>
      persistent reference to a TriggerFilterCollection product
            </comment>
        </typedef>

        <typedef name="TriggerFilterRefVector"
                 value="edm::RefVector&lt;TriggerFilterCollection &gt;">
typedef edm::RefVector&lt;TriggerFilterCollection &gt; TriggerFilterRefVector;
            <comment>
      vector of persistent references to items in the same TriggerFilterCollection
            </comment>
        </typedef>

        <typedef name="TriggerFilterRefVectorIterator"
                 value="edm::RefVectorIterator&lt;TriggerFilterCollection &gt;">
typedef edm::RefVectorIterator&lt;TriggerFilterCollection &gt; TriggerFilterRefVectorIterator;
            <comment>
      const iterator over vector of persistent references to items in the same TriggerFilterCollection
            </comment>
        </typedef>

    </namespace>

    <type name="bool"/>
    <type name="const edm::InputTag&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="int"/>
    <type name="pat::TriggerFilter"/>
    <type name="std::string"/>
    <type name="std::vector&lt;int &gt;"/>
    <type name="std::vector&lt;unsigned &gt;"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
