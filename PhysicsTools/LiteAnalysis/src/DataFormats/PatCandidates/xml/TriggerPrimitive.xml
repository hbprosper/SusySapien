<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TriggerPrimitive.xml
  Created:  Thu Jan 14 22:48:24 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/TriggerPrimitive.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/TriggerPrimitive.h">

    <include name="&lt;string&gt;"/>
    <include name="&quot;DataFormats/Candidate/interface/LeafCandidate.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/OwnVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Association.h&quot;"/>

    <namespace name="pat">

        <class name="TriggerPrimitive"
               fullname="pat::TriggerPrimitive"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">
            <baseclass name="public reco::LeafCandidate"/>

            <section name="public">
                <constructor name="TriggerPrimitive"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TriggerPrimitive();
                </constructor>

                <constructor name="TriggerPrimitive"
                             return=""
                             args="['const reco::Particle::LorentzVector&amp;','const std::string=&quot;&quot;','const int=0','const int=0']"
                             vars="['aVec','aFilt','aType','id']"
                             qual="">
TriggerPrimitive(const reco::Particle::LorentzVector&amp; aVec, const std::string aFilt=&quot;&quot;, const int aType=0, const int id=0);
                </constructor>

                <constructor name="TriggerPrimitive"
                             return=""
                             args="['const reco::Particle::PolarLorentzVector&amp;','const std::string=&quot;&quot;','const int=0','const int=0']"
                             vars="['aVec','aFilt','aType','id']"
                             qual="">
TriggerPrimitive(const reco::Particle::PolarLorentzVector&amp; aVec, const std::string aFilt=&quot;&quot;, const int aType=0, const int id=0);
                </constructor>

                <destructor name="~TriggerPrimitive"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TriggerPrimitive();
                </destructor>

                <method1 name="clone"
                         return="virtual TriggerPrimitive*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual TriggerPrimitive* clone() const;
                </method1>

                <method1 name="filterName"
                         return="const std::string&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::string&amp; filterName() const;
                </method1>

                <method1 name="triggerObjectType"
                         return="const int"
                         args="['void']"
                         vars="['']"
                         qual="const">
const int triggerObjectType() const;
                </method1>

                <method1 name="triggerObjectId"
                         return="const int"
                         args="['void']"
                         vars="['']"
                         qual="const">
const int triggerObjectId() const;
                </method1>

                <method1 name="setFilterName"
                         return="void"
                         args="['const std::string']"
                         vars="['aFilt']"
                         qual="">
void setFilterName(const std::string aFilt);
                </method1>

                <method1 name="setTriggerObjectType"
                         return="void"
                         args="['const int']"
                         vars="['aType']"
                         qual="">
void setTriggerObjectType(const int aType);
                </method1>

                <method1 name="setTriggerObjectId"
                         return="void"
                         args="['const int']"
                         vars="['id']"
                         qual="">
void setTriggerObjectId(const int id);
                </method1>

            </section>

        </class>
        <typedef name="TriggerPrimitiveCollection"
                 value="edm::OwnVector&lt;TriggerPrimitive&gt;">
typedef edm::OwnVector&lt;TriggerPrimitive&gt; TriggerPrimitiveCollection;
            <comment>
      collection of TriggerPrimitive
            </comment>
        </typedef>

        <typedef name="TriggerPrimitiveRef"
                 value="edm::Ref&lt;TriggerPrimitiveCollection&gt;">
typedef edm::Ref&lt;TriggerPrimitiveCollection&gt; TriggerPrimitiveRef;
            <comment>
      persistent reference to a TriggerPrimitive
            </comment>
        </typedef>

        <typedef name="TriggerPrimitiveRefProd"
                 value="edm::RefProd&lt;TriggerPrimitiveCollection&gt;">
typedef edm::RefProd&lt;TriggerPrimitiveCollection&gt; TriggerPrimitiveRefProd;
            <comment>
      persistent reference to a TriggerPrimitiveCollection
            </comment>
        </typedef>

        <typedef name="TriggerPrimitiveRefVector"
                 value="edm::RefVector&lt;TriggerPrimitiveCollection&gt;">
typedef edm::RefVector&lt;TriggerPrimitiveCollection&gt; TriggerPrimitiveRefVector;
            <comment>
      vector of reference to TriggerPrimitive in the same collection
            </comment>
        </typedef>

        <typedef name="TriggerPrimitiveMatch"
                 value="edm::Association&lt;TriggerPrimitiveCollection&gt;">
typedef edm::Association&lt;TriggerPrimitiveCollection&gt; TriggerPrimitiveMatch;
            <comment>
      vector of reference to TriggerPrimitive in the same collection
            </comment>
        </typedef>

    </namespace>

    <type name="TriggerPrimitive*"/>
    <type name="const int"/>
    <type name="const reco::Particle::LorentzVector&amp;"/>
    <type name="const reco::Particle::PolarLorentzVector&amp;"/>
    <type name="const std::string"/>
    <type name="const std::string&amp;"/>
    <type name="pat::TriggerPrimitive"/>
    <type name="reco::LeafCandidate"/>
    <type name="void"/>
</header>
