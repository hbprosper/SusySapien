<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Lepton.xml
  Created:  Fri Jan 15 20:47:12 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/Lepton.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/Lepton.h">

    <include name="&quot;DataFormats/Candidate/interface/Particle.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/PATObject.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/Isolation.h&quot;"/>

    <namespace name="pat">

        <class name="Lepton"
               fullname="pat::Lepton&lt;LeptonType&gt;"
               module="DataFormats.PatCandidates"
               project=""
               type="template"
               template="template&lt;class LeptonType&gt;">
            <baseclass name="public PATObject&lt;LeptonType&gt;"/>

            <section name="public">
                <constructor name="Lepton"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Lepton();
                </constructor>

                <constructor name="Lepton"
                             return=""
                             args="['const LeptonType&amp;']"
                             vars="['aLepton']"
                             qual="">
Lepton(const LeptonType&amp; aLepton);
                </constructor>

                <constructor name="Lepton"
                             return=""
                             args="['const edm::RefToBase&lt;LeptonType&gt;&amp;']"
                             vars="['aLeptonRef']"
                             qual="">
Lepton(const edm::RefToBase&lt;LeptonType&gt;&amp; aLeptonRef);
                </constructor>

                <constructor name="Lepton"
                             return=""
                             args="['const edm::Ptr&lt;LeptonType&gt;&amp;']"
                             vars="['aLeptonRef']"
                             qual="">
Lepton(const edm::Ptr&lt;LeptonType&gt;&amp; aLeptonRef);
                </constructor>

                <destructor name="~Lepton"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Lepton();
                </destructor>

                <method2 name="clone"
                         return="virtual Lepton&lt;LeptonType&gt;*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual Lepton&lt;LeptonType&gt;* clone() const;
                </method2>

                <method1 name="genLepton"
                         return="const reco::GenParticle*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::GenParticle* genLepton() const;
                </method1>

                <method1 name="setGenLepton"
                         return="void"
                         args="['const reco::GenParticleRef&amp;','bool=false']"
                         vars="['gl','embed']"
                         qual="">
void setGenLepton(const reco::GenParticleRef&amp; gl, bool embed=false);
                </method1>

                <method1 name="userIsolation"
                         return="float"
                         args="['IsolationKeys']"
                         vars="['key']"
                         qual="const">
float userIsolation(IsolationKeys key) const;
                    <comment>
          pseudo-key like CaloIso), or -1.0 if not available
                    </comment>
                </method1>

                <method1 name="setIsolation"
                         return="void"
                         args="['IsolationKeys','float']"
                         vars="['key','value']"
                         qual="">
void setIsolation(IsolationKeys key, float value);
                    <comment>
          like CaloIso
                    </comment>
                </method1>

                <method1 name="trackIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float trackIso() const;
                    <comment>
          objects)
                    </comment>
                </method1>

                <method1 name="caloIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloIso() const;
                    <comment>
          available from the derived objects)
                    </comment>
                </method1>

                <method1 name="ecalIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalIso() const;
                    <comment>
          derived objects)
                    </comment>
                </method1>

                <method1 name="hcalIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalIso() const;
                    <comment>
          derived objects)
                    </comment>
                </method1>

                <method1 name="particleIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float particleIso() const;
                    <comment>
          Returns the isolation calculated with all the PFCandidates
                    </comment>
                </method1>

                <method1 name="chargedHadronIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float chargedHadronIso() const;
                    <comment>
          PFCandidates
                    </comment>
                </method1>

                <method1 name="neutralHadronIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float neutralHadronIso() const;
                    <comment>
          PFCandidates
                    </comment>
                </method1>

                <method1 name="photonIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float photonIso() const;
                    <comment>
          PFCandidates
                    </comment>
                </method1>

                <method1 name="userIso"
                         return="float"
                         args="['uint8_t=0']"
                         vars="['index']"
                         qual="const">
float userIso(uint8_t index=0) const;
                    <comment>
          stored in this object when produced, or -1.0 if there is none
                    </comment>
                </method1>

                <method1 name="setTrackIso"
                         return="void"
                         args="['float']"
                         vars="['trackIso']"
                         qual="">
void setTrackIso(float trackIso);
                    <comment>
          Sets tracker isolation variable
                    </comment>
                </method1>

                <method1 name="setEcalIso"
                         return="void"
                         args="['float']"
                         vars="['caloIso']"
                         qual="">
void setEcalIso(float caloIso);
                    <comment>
          Sets ecal isolation variable
                    </comment>
                </method1>

                <method1 name="setHcalIso"
                         return="void"
                         args="['float']"
                         vars="['caloIso']"
                         qual="">
void setHcalIso(float caloIso);
                    <comment>
          Sets hcal isolation variable
                    </comment>
                </method1>

                <method1 name="setUserIso"
                         return="void"
                         args="['float','uint8_t=0']"
                         vars="['value','index']"
                         qual="">
void setUserIso(float value, uint8_t index=0);
                    <comment>
          Sets user isolation variable #index
                    </comment>
                </method1>

                <method1 name="isoDeposit"
                         return="const IsoDeposit*"
                         args="['IsolationKeys']"
                         vars="['key']"
                         qual="const">
const IsoDeposit* isoDeposit(IsolationKeys key) const;
                    <comment>
          Returns the IsoDeposit associated with some key, or a null pointer if it is not available
                    </comment>
                </method1>

                <method1 name="setIsoDeposit"
                         return="void"
                         args="['IsolationKeys','const IsoDeposit&amp;']"
                         vars="['key','dep']"
                         qual="">
void setIsoDeposit(IsolationKeys key, const IsoDeposit&amp; dep);
                    <comment>
          Sets the IsoDeposit associated with some key; if it is already existent, it is overwritten.
                    </comment>
                </method1>

                <method1 name="trackIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* trackIsoDeposit() const;
                    <comment>
         ---- specific getters ----
                    </comment>
                </method1>

                <method1 name="ecalIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* ecalIsoDeposit() const;
                </method1>

                <method1 name="hcalIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* hcalIsoDeposit() const;
                </method1>

                <method1 name="userIsoDeposit"
                         return="const IsoDeposit*"
                         args="['uint8_t=0']"
                         vars="['index']"
                         qual="const">
const IsoDeposit* userIsoDeposit(uint8_t index=0) const;
                </method1>

                <method1 name="trackIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void trackIsoDeposit(const IsoDeposit&amp; dep);
                    <comment>
         ---- specific setters ----
                    </comment>
                </method1>

                <method1 name="ecalIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void ecalIsoDeposit(const IsoDeposit&amp; dep);
                </method1>

                <method1 name="hcalIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void hcalIsoDeposit(const IsoDeposit&amp; dep);
                </method1>

                <method1 name="userIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;','uint8_t=0']"
                         vars="['dep','index']"
                         qual="">
void userIsoDeposit(const IsoDeposit&amp; dep, uint8_t index=0);
                </method1>

            </section>

        </class>
    </namespace>

    <type name="IsolationKeys"/>
    <type name="Lepton&lt;LeptonType&gt;*"/>
    <type name="PATObject&lt;LeptonType&gt;"/>
    <type name="bool"/>
    <type name="const IsoDeposit&amp;"/>
    <type name="const IsoDeposit*"/>
    <type name="const edm::Ptr&lt;LeptonType&gt;&amp;"/>
    <type name="const edm::RefToBase&lt;LeptonType&gt;&amp;"/>
    <type name="const reco::GenParticle*"/>
    <type name="const reco::GenParticleRef&amp;"/>
    <type name="float"/>
    <type name="pat::Lepton&lt;LeptonType&gt;"/>
    <type name="uint8_t"/>
    <type name="void"/>
</header>
