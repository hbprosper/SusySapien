<?xml version="1.0"?>
<!--
==============================================================================
  XML File: GenericParticle.xml
  Created:  Fri Jan 15 20:47:09 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/GenericParticle.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/GenericParticle.h">

    <include name="&quot;DataFormats/PatCandidates/interface/PATObject.h&quot;"/>
    <include name="&quot;DataFormats/RecoCandidate/interface/RecoCandidate.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperCluster.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrack.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/Isolation.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/Vertexing.h&quot;"/>
    <include name="&quot;DataFormats/HepMCCandidate/interface/GenParticle.h&quot;"/>

    <namespace name="pat">
        <comment>
   Define typedefs for convenience
        </comment>
        <forward name="GenericParticle"/>
        <typedef name="GenericParticleCollection"
                 value="std::vector&lt;GenericParticle&gt;">
typedef std::vector&lt;GenericParticle&gt; GenericParticleCollection;
        </typedef>

        <typedef name="GenericParticleRef"
                 value="edm::Ref&lt;GenericParticleCollection&gt;">
typedef edm::Ref&lt;GenericParticleCollection&gt; GenericParticleRef;
        </typedef>

        <typedef name="GenericParticleRefVector"
                 value="edm::RefVector&lt;GenericParticleCollection&gt;">
typedef edm::RefVector&lt;GenericParticleCollection&gt; GenericParticleRefVector;
        </typedef>

    </namespace>

    <namespace name="pat">
        <comment>
   Class definition
        </comment>

        <class name="GenericParticle"
               fullname="pat::GenericParticle"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">
            <baseclass name="public PATObject&lt;reco::RecoCandidate&gt;"/>

            <section name="public">
                <constructor name="GenericParticle"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
GenericParticle();
                    <comment>
          default constructor
                    </comment>
                </constructor>

                <constructor name="GenericParticle"
                             return=""
                             args="['const reco::Candidate&amp;']"
                             vars="['aGenericParticle']"
                             qual="">
GenericParticle(const reco::Candidate&amp; aGenericParticle);
                    <comment>
          constructor from Candidate
                    </comment>
                </constructor>

                <constructor name="GenericParticle"
                             return=""
                             args="['const edm::RefToBase&lt;reco::Candidate&gt;&amp;']"
                             vars="['aGenericParticleRef']"
                             qual="">
GenericParticle(const edm::RefToBase&lt;reco::Candidate&gt;&amp; aGenericParticleRef);
                    <comment>
          constructor from ref to Candidate
                    </comment>
                </constructor>

                <constructor name="GenericParticle"
                             return=""
                             args="['const edm::Ptr&lt;reco::Candidate&gt;&amp;']"
                             vars="['aGenericParticleRef']"
                             qual="">
GenericParticle(const edm::Ptr&lt;reco::Candidate&gt;&amp; aGenericParticleRef);
                    <comment>
          constructor from ref to Candidate
                    </comment>
                </constructor>

                <destructor name="~GenericParticle"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~GenericParticle();
                    <comment>
          destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual GenericParticle*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual GenericParticle* clone() const;
                    <comment>
          required reimplementation of the Candidate's clone method
                    </comment>
                </method1>

                <method1 name="overlap"
                         return="virtual bool"
                         args="['const Candidate&amp;']"
                         vars="['']"
                         qual="const">
virtual bool overlap(const Candidate&amp;) const;
                    <comment>
          NOTE: It won't work with embedded references
                    </comment>
                </method1>

                <method1 name="track"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef track() const;
                    <comment>
          returns null ref if there is no master track
                    </comment>
                </method1>

                <method1 name="track"
                         return="virtual reco::TrackRef"
                         args="['size_t']"
                         vars="['idx']"
                         qual="const">
virtual reco::TrackRef track(size_t idx) const;
                    <comment>
          throws exception if idx &gt;= numberOfTracks()
                    </comment>
                </method1>

                <method1 name="numberOfTracks"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfTracks() const;
                    <comment>
          number of multiple tracks (not including the master one)
                    </comment>
                </method1>

                <method1 name="gsfTrack"
                         return="virtual reco::GsfTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::GsfTrackRef gsfTrack() const;
                    <comment>
          returns null ref if there is no gsf track
                    </comment>
                </method1>

                <method1 name="standAloneMuon"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef standAloneMuon() const;
                    <comment>
          returns null ref if there is no stand-alone muon track
                    </comment>
                </method1>

                <method1 name="combinedMuon"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef combinedMuon() const;
                    <comment>
          returns null ref if there is no combined muon track
                    </comment>
                </method1>

                <method1 name="superCluster"
                         return="virtual reco::SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::SuperClusterRef superCluster() const;
                    <comment>
          returns null ref if there is no supercluster
                    </comment>
                </method1>

                <method1 name="caloTower"
                         return="virtual CaloTowerRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CaloTowerRef caloTower() const;
                    <comment>
          returns null ref if there is no calotower
                    </comment>
                </method1>

                <method1 name="setTrack"
                         return="virtual void"
                         args="['const reco::TrackRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setTrack(const reco::TrackRef&amp; ref, bool embed=false);
                    <comment>
          sets master track reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="setTracks"
                         return="virtual void"
                         args="['const reco::TrackRefVector&amp;','bool=false']"
                         vars="['refs','embed']"
                         qual="">
virtual void setTracks(const reco::TrackRefVector&amp; refs, bool embed=false);
                    <comment>
          sets multiple track references (or even embed the tracks into the object - whatch out for disk size issues!)
                    </comment>
                </method1>

                <method1 name="setStandAloneMuon"
                         return="virtual void"
                         args="['const reco::TrackRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setStandAloneMuon(const reco::TrackRef&amp; ref, bool embed=false);
                    <comment>
          sets stand-alone muon track reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="setCombinedMuon"
                         return="virtual void"
                         args="['const reco::TrackRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setCombinedMuon(const reco::TrackRef&amp; ref, bool embed=false);
                    <comment>
          sets combined muon track reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="setGsfTrack"
                         return="virtual void"
                         args="['const reco::GsfTrackRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setGsfTrack(const reco::GsfTrackRef&amp; ref, bool embed=false);
                    <comment>
          sets gsf track reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="setSuperCluster"
                         return="virtual void"
                         args="['const reco::SuperClusterRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setSuperCluster(const reco::SuperClusterRef&amp; ref, bool embed=false);
                    <comment>
          sets supercluster reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="setCaloTower"
                         return="virtual void"
                         args="['const CaloTowerRef&amp;','bool=false']"
                         vars="['ref','embed']"
                         qual="">
virtual void setCaloTower(const CaloTowerRef&amp; ref, bool embed=false);
                    <comment>
          sets calotower reference (or even embed it into the object)
                    </comment>
                </method1>

                <method1 name="embedTrack"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedTrack();
                    <comment>
          embeds the master track instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="embedTracks"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedTracks();
                    <comment>
          embeds the other tracks instead of keeping references
                    </comment>
                </method1>

                <method1 name="embedStandalone"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedStandalone();
                    <comment>
          embeds the stand-alone track instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="embedCombined"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedCombined();
                    <comment>
          embeds the combined track instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="embedGsfTrack"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedGsfTrack();
                    <comment>
          embeds the gsf track instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="embedSuperCluster"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedSuperCluster();
                    <comment>
          embeds the supercluster instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="embedCaloTower"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedCaloTower();
                    <comment>
          embeds the calotower instead of keeping a reference to it
                    </comment>
                </method1>

                <method1 name="quality"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="">
float quality();
                    <comment>
          returns a user defined quality value, if set by the user to some meaningful value
                    </comment>
                </method1>

                <method1 name="setQuality"
                         return="void"
                         args="['float']"
                         vars="['quality']"
                         qual="">
void setQuality(float quality);
                    <comment>
          sets a user defined quality value
                    </comment>
                </method1>

                <method1 name="isolation"
                         return="float"
                         args="['IsolationKeys']"
                         vars="['key']"
                         qual="const">
float isolation(IsolationKeys key) const;
                    <comment>
          Returns the isolation variable for a specifc key (or pseudo-key like CaloIso), or -1.0 if not available
                    </comment>
                </method1>

                <method1 name="setIsolation"
                         return="void"
                         args="['IsolationKeys','float']"
                         vars="['key','value']"
                         qual="">
void setIsolation(IsolationKeys key, float value);
                    <comment>
          Note that you can't set isolation for a pseudo-key like CaloIso
                    </comment>
                </method1>

                <method1 name="trackIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float trackIso() const;
                    <comment>
          Return the tracker isolation variable that was stored in this object when produced, or -1.0 if there is none
                    </comment>
                </method1>

                <method1 name="caloIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloIso() const;
                    <comment>
          Return the sum of ecal and hcal isolation variable that were stored in this object when produced, or -1.0 if at least one is missing
                    </comment>
                </method1>

                <method1 name="ecalIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalIso() const;
                    <comment>
          Return the ecal isolation variable that was stored in this object when produced, or -1.0 if there is none
                    </comment>
                </method1>

                <method1 name="hcalIso"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalIso() const;
                    <comment>
          Return the hcal isolation variable that was stored in this object when produced, or -1.0 if there is none
                    </comment>
                </method1>

                <method1 name="userIso"
                         return="float"
                         args="['uint8_t=0']"
                         vars="['index']"
                         qual="const">
float userIso(uint8_t index=0) const;
                    <comment>
          Return the user defined isolation variable #index that was stored in this object when produced, or -1.0 if there is none
                    </comment>
                </method1>

                <method1 name="setTrackIso"
                         return="void"
                         args="['float']"
                         vars="['trackIso']"
                         qual="">
void setTrackIso(float trackIso);
                    <comment>
          Sets tracker isolation variable
                    </comment>
                </method1>

                <method1 name="setEcalIso"
                         return="void"
                         args="['float']"
                         vars="['caloIso']"
                         qual="">
void setEcalIso(float caloIso);
                    <comment>
          Sets ecal isolation variable
                    </comment>
                </method1>

                <method1 name="setHcalIso"
                         return="void"
                         args="['float']"
                         vars="['caloIso']"
                         qual="">
void setHcalIso(float caloIso);
                    <comment>
          Sets hcal isolation variable
                    </comment>
                </method1>

                <method1 name="setUserIso"
                         return="void"
                         args="['float','uint8_t=0']"
                         vars="['value','index']"
                         qual="">
void setUserIso(float value, uint8_t index=0);
                    <comment>
          Sets user isolation variable #index
                    </comment>
                </method1>

                <method1 name="isoDeposit"
                         return="const IsoDeposit*"
                         args="['IsolationKeys']"
                         vars="['key']"
                         qual="const">
const IsoDeposit* isoDeposit(IsolationKeys key) const;
                    <comment>
          Returns the IsoDeposit associated with some key, or a null pointer if it is not available
                    </comment>
                </method1>

                <method1 name="setIsoDeposit"
                         return="void"
                         args="['IsolationKeys','const IsoDeposit&amp;']"
                         vars="['key','dep']"
                         qual="">
void setIsoDeposit(IsolationKeys key, const IsoDeposit&amp; dep);
                    <comment>
          Sets the IsoDeposit associated with some key; if it is already existent, it is overwritten.
                    </comment>
                </method1>

                <method1 name="trackIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* trackIsoDeposit() const;
                    <comment>
         ---- specific getters ----
                    </comment>
                </method1>

                <method1 name="ecalIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* ecalIsoDeposit() const;
                </method1>

                <method1 name="hcalIsoDeposit"
                         return="const IsoDeposit*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsoDeposit* hcalIsoDeposit() const;
                </method1>

                <method1 name="userIsoDeposit"
                         return="const IsoDeposit*"
                         args="['uint8_t=0']"
                         vars="['index']"
                         qual="const">
const IsoDeposit* userIsoDeposit(uint8_t index=0) const;
                </method1>

                <method1 name="trackIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void trackIsoDeposit(const IsoDeposit&amp; dep);
                    <comment>
         ---- specific setters ----
                    </comment>
                </method1>

                <method1 name="ecalIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void ecalIsoDeposit(const IsoDeposit&amp; dep);
                </method1>

                <method1 name="hcalIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;']"
                         vars="['dep']"
                         qual="">
void hcalIsoDeposit(const IsoDeposit&amp; dep);
                </method1>

                <method1 name="userIsoDeposit"
                         return="void"
                         args="['const IsoDeposit&amp;','uint8_t=0']"
                         vars="['dep','index']"
                         qual="">
void userIsoDeposit(const IsoDeposit&amp; dep, uint8_t index=0);
                </method1>

                <method1 name="vertexAssociation"
                         return="const pat::VertexAssociation*"
                         args="['size_t=0']"
                         vars="['index']"
                         qual="const">
const pat::VertexAssociation* vertexAssociation(size_t index=0) const;
                    <comment>
          Vertex association (or associations, if any). Return null pointer if none has been set
                    </comment>
                </method1>

                <method2 name="vertexAssociations"
                         return="const std::vector&lt;pat::VertexAssociation&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;pat::VertexAssociation&gt;&amp; vertexAssociations() const;
                    <comment>
          Vertex associations. Can be empty if it was not enabled in the config file
                    </comment>
                </method2>

                <method1 name="setVertexAssociation"
                         return="void"
                         args="['const pat::VertexAssociation&amp;']"
                         vars="['assoc']"
                         qual="">
void setVertexAssociation(const pat::VertexAssociation&amp; assoc);
                    <comment>
          Set a single vertex association
                    </comment>
                </method1>

                <method2 name="setVertexAssociations"
                         return="void"
                         args="['const std::vector&lt;pat::VertexAssociation&gt;&amp;']"
                         vars="['assocs']"
                         qual="">
void setVertexAssociations(const std::vector&lt;pat::VertexAssociation&gt;&amp; assocs);
                    <comment>
          Set multiple vertex associations
                    </comment>
                </method2>

            </section>

        </class>
    </namespace>

    <type name="CaloTowerRef"/>
    <type name="GenericParticle*"/>
    <type name="IsolationKeys"/>
    <type name="PATObject&lt;reco::RecoCandidate&gt;"/>
    <type name="bool"/>
    <type name="const CaloTowerRef&amp;"/>
    <type name="const Candidate&amp;"/>
    <type name="const IsoDeposit&amp;"/>
    <type name="const IsoDeposit*"/>
    <type name="const edm::Ptr&lt;reco::Candidate&gt;&amp;"/>
    <type name="const edm::RefToBase&lt;reco::Candidate&gt;&amp;"/>
    <type name="const pat::VertexAssociation&amp;"/>
    <type name="const pat::VertexAssociation*"/>
    <type name="const reco::Candidate&amp;"/>
    <type name="const reco::GsfTrackRef&amp;"/>
    <type name="const reco::SuperClusterRef&amp;"/>
    <type name="const reco::TrackRef&amp;"/>
    <type name="const reco::TrackRefVector&amp;"/>
    <type name="const std::vector&lt;pat::VertexAssociation&gt;&amp;"/>
    <type name="float"/>
    <type name="pat::GenericParticle"/>
    <type name="reco::GsfTrackRef"/>
    <type name="reco::SuperClusterRef"/>
    <type name="reco::TrackRef"/>
    <type name="size_t"/>
    <type name="uint8_t"/>
    <type name="void"/>
</header>
