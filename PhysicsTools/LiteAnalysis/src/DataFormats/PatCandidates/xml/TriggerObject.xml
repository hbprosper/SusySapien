<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TriggerObject.xml
  Created:  Thu Jan 14 22:48:22 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/TriggerObject.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/TriggerObject.h">

    <include name="&quot;DataFormats/Candidate/interface/LeafCandidate.h&quot;"/>
    <include name="&lt;map&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/HLTReco/interface/TriggerObject.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Association.h&quot;"/>

    <namespace name="pat">

        <class name="TriggerObject"
               fullname="pat::TriggerObject"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">
            <baseclass name="public reco::LeafCandidate"/>

            <section>
                <member>
std::string collection_;
                    <comment>
          data members
                    </comment>
                </member>

                <member>
std::vector&lt;unsigned &gt; filterIds_;
                </member>

            </section>
            <section name="public">
                <constructor name="TriggerObject"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TriggerObject();
                    <comment>
          constructors and desctructor
                    </comment>
                </constructor>

                <constructor name="TriggerObject"
                             return=""
                             args="['const reco::Particle::LorentzVector&amp;','int=0']"
                             vars="['vec','id']"
                             qual="">
TriggerObject(const reco::Particle::LorentzVector&amp; vec, int id=0);
                </constructor>

                <constructor name="TriggerObject"
                             return=""
                             args="['const reco::Particle::PolarLorentzVector&amp;','int=0']"
                             vars="['vec','id']"
                             qual="">
TriggerObject(const reco::Particle::PolarLorentzVector&amp; vec, int id=0);
                </constructor>

                <constructor name="TriggerObject"
                             return=""
                             args="['const trigger::TriggerObject&amp;']"
                             vars="['aTrigObj']"
                             qual="">
TriggerObject(const trigger::TriggerObject&amp; aTrigObj);
                </constructor>

                <destructor name="~TriggerObject"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TriggerObject();
                </destructor>

                <method1 name="setCollection"
                         return="void"
                         args="['const std::string&amp;']"
                         vars="['collection']"
                         qual="">
void setCollection(const std::string&amp; collection);
                    <comment>
          setters &amp; getters
                    </comment>
                </method1>

                <method1 name="addFilterId"
                         return="void"
                         args="['unsigned']"
                         vars="['filterId']"
                         qual="">
void addFilterId(unsigned filterId);
                </method1>

                <method1 name="collection"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string collection() const;
                </method1>

                <method2 name="filterIds"
                         return="std::vector&lt;unsigned &gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;unsigned &gt; filterIds() const;
                </method2>

                <method1 name="hasFilterId"
                         return="bool"
                         args="['unsigned']"
                         vars="['filterId']"
                         qual="const">
bool hasFilterId(unsigned filterId) const;
                </method1>

            </section>

            <typemap name="collection_"
                     value="pat::TriggerObject::collection_"
                     type="member"/>
            <typemap name="filterIds_"
                     value="pat::TriggerObject::filterIds_"
                     type="member"/>

        </class>
        <typedef name="TriggerObjectCollection"
                 value="std::vector&lt;TriggerObject &gt;">
typedef std::vector&lt;TriggerObject &gt; TriggerObjectCollection;
            <comment>
      collection of TriggerObject
            </comment>
        </typedef>

        <typedef name="TriggerObjectRef"
                 value="edm::Ref&lt;TriggerObjectCollection &gt;">
typedef edm::Ref&lt;TriggerObjectCollection &gt; TriggerObjectRef;
            <comment>
      persistent reference to an item in a TriggerObjectCollection
            </comment>
        </typedef>

        <typedef name="TriggerObjectMatchMap"
                 value="std::map&lt;std::string, TriggerObjectRef &gt;">
typedef std::map&lt;std::string, TriggerObjectRef &gt; TriggerObjectMatchMap;
            <comment>
      container to store match references from different producers (for one PAT object)
            </comment>
        </typedef>

        <typedef name="TriggerObjectRefProd"
                 value="edm::RefProd&lt;TriggerObjectCollection &gt;">
typedef edm::RefProd&lt;TriggerObjectCollection &gt; TriggerObjectRefProd;
            <comment>
      persistent reference to a TriggerObjectCollection product
            </comment>
        </typedef>

        <typedef name="TriggerObjectRefVector"
                 value="edm::RefVector&lt;TriggerObjectCollection &gt;">
typedef edm::RefVector&lt;TriggerObjectCollection &gt; TriggerObjectRefVector;
            <comment>
      vector of persistent references to items in the same TriggerObjectCollection
            </comment>
        </typedef>

        <typedef name="TriggerObjectMatch"
                 value="edm::Association&lt;TriggerObjectCollection &gt;">
typedef edm::Association&lt;TriggerObjectCollection &gt; TriggerObjectMatch;
            <comment>
      association of TriggerObjects to store matches to Candidates
            </comment>
        </typedef>

        <typedef name="TriggerObjectMatchRefProd"
                 value="edm::RefProd&lt;TriggerObjectMatch &gt;">
typedef edm::RefProd&lt;TriggerObjectMatch &gt; TriggerObjectMatchRefProd;
            <comment>
      persistent reference to a TriggerObjectMatch product
            </comment>
        </typedef>

        <typedef name="TriggerObjectMatchContainer"
                 value="std::map&lt;std::string, TriggerObjectMatchRefProd &gt;">
typedef std::map&lt;std::string, TriggerObjectMatchRefProd &gt; TriggerObjectMatchContainer;
            <comment>
      container to store references to matches from different producers in the trigger event
            </comment>
        </typedef>

    </namespace>

    <type name="bool"/>
    <type name="const reco::Particle::LorentzVector&amp;"/>
    <type name="const reco::Particle::PolarLorentzVector&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="const trigger::TriggerObject&amp;"/>
    <type name="int"/>
    <type name="pat::TriggerObject"/>
    <type name="reco::LeafCandidate"/>
    <type name="std::string"/>
    <type name="std::vector&lt;unsigned &gt;"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
