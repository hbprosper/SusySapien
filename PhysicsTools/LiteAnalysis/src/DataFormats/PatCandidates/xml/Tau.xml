<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Tau.xml
  Created:  Thu Jan 14 22:48:20 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/Tau.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/Tau.h">

    <include name="&quot;DataFormats/TauReco/interface/BaseTau.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/Track.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/Lepton.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/GenJetCollection.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/BoolCache.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/TauPFSpecific.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/TauCaloSpecific.h&quot;"/>

    <namespace name="pat">
        <comment>
   Define typedefs for convenience
        </comment>
        <forward name="Tau"/>
        <typedef name="TauCollection"
                 value="std::vector&lt;Tau&gt;">
typedef std::vector&lt;Tau&gt; TauCollection;
        </typedef>

        <typedef name="TauRef"
                 value="edm::Ref&lt;TauCollection&gt;">
typedef edm::Ref&lt;TauCollection&gt; TauRef;
        </typedef>

        <typedef name="TauRefVector"
                 value="edm::RefVector&lt;TauCollection&gt;">
typedef edm::RefVector&lt;TauCollection&gt; TauRefVector;
        </typedef>

    </namespace>

    <namespace name="pat">
        <comment>
   Class definition
        </comment>
        <typedef name="TauType"
                 value="reco::BaseTau">
typedef reco::BaseTau TauType;
        </typedef>


        <class name="Tau"
               fullname="pat::Tau"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">
            <baseclass name="public Lepton&lt;TauType&gt;"/>

            <section name="public">
                <typedef name="IdPair"
                         value="std::pair&lt;std::string, float&gt;">
typedef std::pair&lt;std::string, float&gt; IdPair;
                </typedef>

                <constructor name="Tau"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Tau();
                    <comment>
          default constructor
                    </comment>
                </constructor>

                <constructor name="Tau"
                             return=""
                             args="['const TauType&amp;']"
                             vars="['aTau']"
                             qual="">
Tau(const TauType&amp; aTau);
                    <comment>
          constructor from a reco tau
                    </comment>
                </constructor>

                <constructor name="Tau"
                             return=""
                             args="['const edm::RefToBase&lt;TauType&gt;&amp;']"
                             vars="['aTauRef']"
                             qual="">
Tau(const edm::RefToBase&lt;TauType&gt;&amp; aTauRef);
                    <comment>
          constructor from a RefToBase to a reco tau (to be superseded by Ptr counterpart)
                    </comment>
                </constructor>

                <constructor name="Tau"
                             return=""
                             args="['const edm::Ptr&lt;TauType&gt;&amp;']"
                             vars="['aTauRef']"
                             qual="">
Tau(const edm::Ptr&lt;TauType&gt;&amp; aTauRef);
                    <comment>
          constructor from a Ptr to a reco tau
                    </comment>
                </constructor>

                <destructor name="~Tau"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Tau();
                    <comment>
          destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual Tau*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual Tau* clone() const;
                    <comment>
          required reimplementation of the Candidate's clone method
                    </comment>
                </method1>

                <method1 name="isolationTracks"
                         return="const reco::TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::TrackRefVector&amp; isolationTracks() const;
                    <comment>
          override the TauType::isolationTracks method, to access the internal storage of the track
                    </comment>
                </method1>

                <method1 name="leadTrack"
                         return="reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::TrackRef leadTrack() const;
                    <comment>
          override the TauType::track method, to access the internal storage of the track
                    </comment>
                </method1>

                <method1 name="signalTracks"
                         return="const reco::TrackRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::TrackRefVector&amp; signalTracks() const;
                    <comment>
          override the TauType::track method, to access the internal storage of the track
                    </comment>
                </method1>

                <method1 name="embedIsolationTracks"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedIsolationTracks();
                    <comment>
          method to store the isolation tracks internally
                    </comment>
                </method1>

                <method1 name="embedLeadTrack"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedLeadTrack();
                    <comment>
          method to store the leading track internally
                    </comment>
                </method1>

                <method1 name="embedSignalTracks"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void embedSignalTracks();
                    <comment>
          method to store the signal tracks internally
                    </comment>
                </method1>

                <method1 name="genJet"
                         return="const reco::GenJet*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::GenJet* genJet() const;
                    <comment>
          return matched GenJet, built from the visible particles of a generated tau
                    </comment>
                </method1>

                <method1 name="setGenJet"
                         return="void"
                         args="['const reco::GenJetRef&amp;']"
                         vars="['ref']"
                         qual="">
void setGenJet(const reco::GenJetRef&amp; ref);
                    <comment>
          set the matched GenJet
                    </comment>
                </method1>

                <method1 name="isCaloTau"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isCaloTau() const;
                    <comment>
          Returns true if this pat::Tau was made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="caloSpecific"
                         return="const pat::tau::TauCaloSpecific&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const pat::tau::TauCaloSpecific&amp; caloSpecific() const;
                    <comment>
          return CaloTau info or throw exception 'not CaloTau'
                    </comment>
                </method1>

                <method1 name="caloTauTagInfoRef"
                         return="reco::CaloTauTagInfoRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::CaloTauTagInfoRef caloTauTagInfoRef() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="leadTracksignedSipt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTracksignedSipt() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="leadTrackHCAL3x3hitsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTrackHCAL3x3hitsEtSum() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="leadTrackHCAL3x3hottesthitDEta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadTrackHCAL3x3hottesthitDEta() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="signalTracksInvariantMass"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float signalTracksInvariantMass() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="TracksInvariantMass"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float TracksInvariantMass() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="isolationTracksPtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationTracksPtSum() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="isolationECALhitsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationECALhitsEtSum() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="maximumHCALhitEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float maximumHCALhitEt() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::CaloTau
                    </comment>
                </method1>

                <method1 name="isPFTau"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isPFTau() const;
                    <comment>
          Returns true if this pat::Tau was made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="pfSpecific"
                         return="const pat::tau::TauPFSpecific&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const pat::tau::TauPFSpecific&amp; pfSpecific() const;
                    <comment>
          return PFTau info or throw exception 'not PFTau'
                    </comment>
                </method1>

                <method1 name="pfTauTagInfoRef"
                         return="const reco::PFTauTagInfoRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFTauTagInfoRef&amp; pfTauTagInfoRef() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="leadPFChargedHadrCand"
                         return="const reco::PFCandidateRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRef&amp; leadPFChargedHadrCand() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="leadPFChargedHadrCandsignedSipt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float leadPFChargedHadrCandsignedSipt() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="signalPFCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; signalPFCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="signalPFChargedHadrCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; signalPFChargedHadrCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="signalPFNeutrHadrCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; signalPFNeutrHadrCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="signalPFGammaCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; signalPFGammaCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; isolationPFCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFChargedHadrCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; isolationPFChargedHadrCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFNeutrHadrCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; isolationPFNeutrHadrCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFGammaCands"
                         return="const reco::PFCandidateRefVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::PFCandidateRefVector&amp; isolationPFGammaCands() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFChargedHadrCandsPtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationPFChargedHadrCandsPtSum() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="isolationPFGammaCandsEtSum"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationPFGammaCandsEtSum() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="maximumHCALPFClusterEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float maximumHCALPFClusterEt() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="emFraction"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float emFraction() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="hcalTotOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalTotOverPLead() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="hcalMaxOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalMaxOverPLead() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="hcal3x3OverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcal3x3OverPLead() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="ecalStripSumEOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalStripSumEOverPLead() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="bremsRecoveryEOverPLead"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float bremsRecoveryEOverPLead() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="electronPreIDTrack"
                         return="const reco::TrackRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::TrackRef&amp; electronPreIDTrack() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="electronPreIDOutput"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float electronPreIDOutput() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="electronPreIDDecision"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool electronPreIDDecision() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="caloComp"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloComp() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="segComp"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float segComp() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="muonDecision"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool muonDecision() const;
                    <comment>
          Throws an exception if this pat::Tau was not made from a reco::PFTau
                    </comment>
                </method1>

                <method1 name="decayMode"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int decayMode() const;
                    <comment>
          reconstructed tau decay mode (specific to PFTau)
                    </comment>
                </method1>

                <method1 name="setDecayMode"
                         return="void"
                         args="['int']"
                         vars="['']"
                         qual="">
void setDecayMode(int);
                    <comment>
          set decay mode
                    </comment>
                </method1>

                <method1 name="tauID"
                         return="float"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="const">
float tauID(const std::string&amp; name) const;
                    <comment>
          Note: an exception is thrown if the specified ID is not available
                    </comment>
                </method1>

                <method1 name="isTauIDAvailable"
                         return="bool"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="const">
bool isTauIDAvailable(const std::string&amp; name) const;
                    <comment>
          Returns true if a specific ID is available in this pat::Tau
                    </comment>
                </method1>

                <method2 name="tauIDs"
                         return="const std::vector&lt;IdPair&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;IdPair&gt;&amp; tauIDs() const;
                    <comment>
          The 'default' ID is the first in the list
                    </comment>
                </method2>

                <method2 name="setTauIDs"
                         return="void"
                         args="['const std::vector&lt;IdPair&gt;&amp;']"
                         vars="['ids']"
                         qual="">
void setTauIDs(const std::vector&lt;IdPair&gt;&amp; ids);
                    <comment>
          The first one in the list becomes the 'default' tau id
                    </comment>
                </method2>

            </section>

            <typemap name="IdPair"
                     value="std::pair&lt;std::string, float&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Lepton&lt;TauType&gt;"/>
    <type name="Tau*"/>
    <type name="bool"/>
    <type name="const TauType&amp;"/>
    <type name="const edm::Ptr&lt;TauType&gt;&amp;"/>
    <type name="const edm::RefToBase&lt;TauType&gt;&amp;"/>
    <type name="const pat::tau::TauCaloSpecific&amp;"/>
    <type name="const pat::tau::TauPFSpecific&amp;"/>
    <type name="const reco::GenJet*"/>
    <type name="const reco::GenJetRef&amp;"/>
    <type name="const reco::PFCandidateRef&amp;"/>
    <type name="const reco::PFCandidateRefVector&amp;"/>
    <type name="const reco::PFTauTagInfoRef&amp;"/>
    <type name="const reco::TrackRef&amp;"/>
    <type name="const reco::TrackRefVector&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="const std::vector&lt;IdPair&gt;&amp;"/>
    <type name="float"/>
    <type name="int"/>
    <type name="pat::Tau"/>
    <type name="reco::CaloTauTagInfoRef"/>
    <type name="reco::TrackRef"/>
    <type name="void"/>
</header>
