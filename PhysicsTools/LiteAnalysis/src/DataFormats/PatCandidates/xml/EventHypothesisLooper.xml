<?xml version="1.0"?>
<!--
==============================================================================
  XML File: EventHypothesisLooper.xml
  Created:  Thu Jan 14 22:48:10 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/EventHypothesisLooper.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/PatCandidates/interface/EventHypothesisLooper.h">

    <include name="&quot;DataFormats/Candidate/interface/CandidateFwd.h&quot;"/>
    <include name="&lt;algorithm&gt;"/>

    <namespace name="pat">

        <namespace name="eventhypothesis">

            <class name="DynCastCandPtr"
                   fullname="pat::eventhypothesis::DynCastCandPtr&lt;T&gt;"
                   module="DataFormats.PatCandidates"
                   project=""
                   type="template"
                   template="template&lt;typename T&gt;">

                <section name="public">
                    <method1 name="get"
                             return="const T*"
                             args="['const reco::Candidate*']"
                             vars="['ptr']"
                             qual="">
const T* get(const reco::Candidate* ptr);
                    </method1>

                    <method1 name="clearCache"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void clearCache();
                    </method1>

                    <method1 name="typeOk"
                             return="bool"
                             args="['const reco::Candidate*']"
                             vars="['ptr']"
                             qual="">
bool typeOk(const reco::Candidate* ptr);
                    </method1>

                </section>
                <section name="private">
                    <constant name="cachePtr_"
                              type="const T*"
                              value=""/>
                </section>

            </class>

            <class name="DynCastCandPtr&lt;reco::Candidate&gt;"
                   fullname="pat::eventhypothesis::DynCastCandPtr&lt;reco::Candidate&gt;"
                   module="DataFormats.PatCandidates"
                   project=""
                   type="specialized template struct"
                   template="template&lt;&gt;">

                <section>
                    <method1 name="get"
                             return="const reco::Candidate*"
                             args="['const reco::Candidate*']"
                             vars="['ptr']"
                             qual="">
const reco::Candidate* get(const reco::Candidate* ptr);
                    </method1>

                    <method1 name="clearCache"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void clearCache();
                    </method1>

                    <method1 name="typeOk"
                             return="bool"
                             args="['const reco::Candidate*']"
                             vars="['ptr']"
                             qual="">
bool typeOk(const reco::Candidate* ptr);
                    </method1>

                </section>

            </class>

            <class name="Looper"
                   fullname="pat::eventhypothesis::Looper&lt;T&gt;"
                   module="DataFormats.PatCandidates"
                   project=""
                   type="template"
                   template="template&lt;typename T&gt;">

                <section name="public">
                    <constructor name="Looper"
                                 return=""
                                 args="['const EventHypothesis&amp;','const ParticleFilter&amp;']"
                                 vars="['eh','filter']"
                                 qual="">
Looper(const EventHypothesis&amp; eh, const ParticleFilter&amp; filter);
                        <comment>
                    That is: MyFilter flt; Looper(eh, flt);
                        </comment>
                    </constructor>

                    <constructor name="Looper"
                                 return=""
                                 args="['const EventHypothesis&amp;','const ParticleFilter*']"
                                 vars="['eh','filter']"
                                 qual="">
Looper(const EventHypothesis&amp; eh, const ParticleFilter* filter);
                        <comment>
                    That is: Looper(eh, new MyFilter());
                        </comment>
                    </constructor>

                    <constructor name="Looper"
                                 return=""
                                 args="['const EventHypothesis&amp;','const ParticleFilterPtr&amp;']"
                                 vars="['eh','filter']"
                                 qual="">
Looper(const EventHypothesis&amp; eh, const ParticleFilterPtr&amp; filter);
                        <comment>
                    That is: Looper(eh, ParticleFilterPtr(new MyFilter()));
                        </comment>
                    </constructor>

                    <destructor name="~Looper"
                                return=""
                                args="['void']"
                                vars="['']"
                                qual="">
~Looper();
                    </destructor>

                    <operator name="operator*"
                              return="const T&amp;"
                              args="['void']"
                              vars="['']"
                              qual="const">
const T&amp; operator*() const;
                        <comment>
                    Accessor as if it was a const_iterator on a list of T
                        </comment>
                    </operator>

                    <operator name="operator-&gt;"
                              return="const T*"
                              args="['void']"
                              vars="['']"
                              qual="const">
const T* operator-&gt;() const;
                        <comment>
                    Accessor as if it was a const_iterator on a list of T
                        </comment>
                    </operator>

                    <method1 name="get"
                             return="const T*"
                             args="['void']"
                             vars="['']"
                             qual="const">
const T* get() const;
                        <comment>
                    Accessor as if it was a smart pointer to const T
                        </comment>
                    </method1>

                    <method1 name="isTypeOk"
                             return="bool"
                             args="['void']"
                             vars="['']"
                             qual="const">
bool isTypeOk() const;
                        <comment>
                    test if the type is correct
                        </comment>
                    </method1>

                    <method1 name="role"
                             return="const std::string&amp;"
                             args="['void']"
                             vars="['']"
                             qual="const">
const std::string&amp; role() const;
                        <comment>
                    Role of pointed item
                        </comment>
                    </method1>

                    <method1 name="ref"
                             return="const CandRefType&amp;"
                             args="['void']"
                             vars="['']"
                             qual="const">
const CandRefType&amp; ref () const;
                        <comment>
                    EDM Ref to pointed particle
                        </comment>
                    </method1>

                    <method1 name="cand"
                             return="const reco::Candidate&amp;"
                             args="['void']"
                             vars="['']"
                             qual="const">
const reco::Candidate&amp; cand () const;
                        <comment>
                    C++ reference to pointed particle
                        </comment>
                    </method1>

                    <method1 name="globalIndex"
                             return="size_t"
                             args="['void']"
                             vars="['']"
                             qual="">
size_t globalIndex();
                        <comment>
                    Index of this item in the full EventHypothesis
                        </comment>
                    </method1>

                    <method1 name="index"
                             return="size_t"
                             args="['void']"
                             vars="['']"
                             qual="const">
size_t index() const;
                        <comment>
                    Index of this item among those in the loop
                        </comment>
                    </method1>

                    <method1 name="size"
                             return="size_t"
                             args="['void']"
                             vars="['']"
                             qual="const">
size_t size() const;
                        <comment>
                    Number of particles in the loop
                        </comment>
                    </method1>

                    <operator name="operator++"
                              return="Looper&amp;"
                              args="['void']"
                              vars="['']"
                              qual="">
Looper&amp; operator++();
                        <comment>
                    iteration
                        </comment>
                    </operator>

                    <operator name="operator--"
                              return="Looper&amp;"
                              args="['void']"
                              vars="['']"
                              qual="">
Looper&amp; operator--();
                        <comment>
                    iteration
                        </comment>
                    </operator>

                    <method1 name="skip"
                             return="Looper&amp;"
                             args="['int']"
                             vars="['delta']"
                             qual="">
Looper&amp; skip(int delta);
                        <comment>
                    skip (might be slow)
                        </comment>
                    </method1>

                    <method1 name="reset"
                             return="Looper&amp;"
                             args="['int=0']"
                             vars="['item']"
                             qual="">
Looper&amp; reset(int item=0);
                        <comment>
                    might be slow, especially with negative items
                        </comment>
                    </method1>

                    <operator name="operator bool"
                              return=""
                              args="['void']"
                              vars="['']"
                              qual="const">
operator bool() const;
                        <comment>
                    It does NOT check if typeOk()
                        </comment>
                    </operator>

                    <operator name="operator=="
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator==(const Looper&lt;T2&gt;&amp; other) const;
                        <comment>
                    returns true if loopers point to the same record
                        </comment>
                    </operator>

                    <operator name="operator!="
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator!=(const Looper&lt;T2&gt;&amp; other) const;
                    </operator>

                    <operator name="operator&lt;="
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator&lt;=(const Looper&lt;T2&gt;&amp; other) const;
                    </operator>

                    <operator name="operator&gt;="
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator&gt;=(const Looper&lt;T2&gt;&amp; other) const;
                    </operator>

                    <operator name="operator&lt;"
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator&lt;(const Looper&lt;T2&gt;&amp; other) const;
                    </operator>

                    <operator name="operator&gt;"
                              return="template&lt;typename T2&gt; bool"
                              args="['const Looper&lt;T2&gt;&amp;']"
                              vars="['other']"
                              qual="const">
template&lt;typename T2&gt; bool operator&gt;(const Looper&lt;T2&gt;&amp; other) const;
                    </operator>

                </section>
                <section name="private">

                    <class name="null_deleter"
                           fullname="pat::eventhypothesis::Looper&lt;T&gt;::null_deleter"
                           module="DataFormats.PatCandidates"
                           project=""
                           type="regular struct">


                        <typemap name="null_deleter"
                                 value="pat::eventhypothesis::Looper&lt;T&gt;::null_deleter"
                                 type="class"/>

                    </class>
                    <constant name="eh_"
                              type="const EventHypothesis&amp;amp;"
                              value=""/>
                    <constant name="filter_"
                              type="const ParticleFilterPtr"
                              value=""/>
                </section>

            </class>
            <typedef name="CandLooper"
                     value="Looper&lt;reco::Candidate&gt;">
typedef Looper&lt;reco::Candidate&gt; CandLooper;
            </typedef>

        </namespace>
    </namespace>

    <type name="Looper&amp;"/>
    <type name="bool"/>
    <type name="const CandRefType&amp;"/>
    <type name="const EventHypothesis&amp;"/>
    <type name="const Looper&lt;T2&gt;&amp;"/>
    <type name="const ParticleFilter&amp;"/>
    <type name="const ParticleFilter*"/>
    <type name="const ParticleFilterPtr&amp;"/>
    <type name="const reco::Candidate&amp;"/>
    <type name="const reco::Candidate*"/>
    <type name="const std::string&amp;"/>
    <type name="int"/>
    <type name="pat::eventhypothesis::DynCastCandPtr&lt;T&gt;"/>
    <type name="pat::eventhypothesis::DynCastCandPtr&lt;reco::Candidate&gt;"/>
    <type name="pat::eventhypothesis::Looper&lt;T&gt;"/>
    <type name="pat::eventhypothesis::Looper&lt;T&gt;::null_deleter"/>
    <type name="size_t"/>
    <type name="template&lt;typename T2&gt; bool"/>
    <type name="void"/>
</header>
