<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TriggerPath.xml
  Created:  Fri Jan 15 20:47:21 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/TriggerPath.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/TriggerPath.h">

    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVectorIterator.h&quot;"/>

    <namespace name="pat">

        <class name="TriggerPath"
               fullname="pat::TriggerPath"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">

            <section>
                <member>
std::string name_;
                    <comment>
          data members
                    </comment>
                </member>

                <member>
unsigned index_;
                </member>

                <member>
unsigned prescale_;
                </member>

                <member>
bool run_;
                </member>

                <member>
bool accept_;
                </member>

                <member>
bool error_;
                </member>

                <member>
std::vector&lt;std::string &gt; modules_;
                </member>

                <member>
std::vector&lt;unsigned &gt; filterIndices_;
                </member>

                <member>
unsigned lastActiveFilterSlot_;
                </member>

            </section>
            <section name="public">
                <constructor name="TriggerPath"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TriggerPath();
                    <comment>
          constructors and desctructor
                    </comment>
                </constructor>

                <constructor name="TriggerPath"
                             return=""
                             args="['const std::string&amp;']"
                             vars="['name']"
                             qual="">
TriggerPath(const std::string&amp; name);
                </constructor>

                <constructor name="TriggerPath"
                             return=""
                             args="['const std::string&amp;','unsigned','unsigned','bool','bool','bool','unsigned']"
                             vars="['name','index','prescale','run','accept','error','lastActiveFilterSlot']"
                             qual="">
TriggerPath(const std::string&amp; name, unsigned index, unsigned prescale, bool run, bool accept, bool error, unsigned lastActiveFilterSlot);
                </constructor>

                <destructor name="~TriggerPath"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~TriggerPath();
                </destructor>

                <method1 name="setName"
                         return="void"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="">
void setName(const std::string&amp; name);
                    <comment>
          setters &amp; getters
                    </comment>
                </method1>

                <method1 name="setIndex"
                         return="void"
                         args="['unsigned']"
                         vars="['index']"
                         qual="">
void setIndex(unsigned index);
                </method1>

                <method1 name="setPrescale"
                         return="void"
                         args="['unsigned']"
                         vars="['prescale']"
                         qual="">
void setPrescale(unsigned prescale);
                </method1>

                <method1 name="setRun"
                         return="void"
                         args="['bool']"
                         vars="['run']"
                         qual="">
void setRun(bool run);
                </method1>

                <method1 name="setAccept"
                         return="void"
                         args="['bool']"
                         vars="['accept']"
                         qual="">
void setAccept(bool accept);
                </method1>

                <method1 name="setError"
                         return="void"
                         args="['bool']"
                         vars="['error']"
                         qual="">
void setError(bool error);
                </method1>

                <method1 name="setLastActiveFilterSlot"
                         return="void"
                         args="['unsigned']"
                         vars="['lastActiveFilterSlot']"
                         qual="">
void setLastActiveFilterSlot(unsigned lastActiveFilterSlot);
                </method1>

                <method1 name="addModule"
                         return="void"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="">
void addModule(const std::string&amp; name);
                </method1>

                <method1 name="addFilterIndex"
                         return="void"
                         args="['const unsigned']"
                         vars="['index']"
                         qual="">
void addFilterIndex(const unsigned index);
                </method1>

                <method1 name="name"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string name() const;
                </method1>

                <method1 name="index"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned index() const;
                </method1>

                <method1 name="prescale"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned prescale() const;
                </method1>

                <method1 name="wasRun"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool wasRun() const;
                </method1>

                <method1 name="wasAccept"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool wasAccept() const;
                </method1>

                <method1 name="wasError"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool wasError() const;
                </method1>

                <method1 name="lastActiveFilterSlot"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned lastActiveFilterSlot() const;
                </method1>

                <method2 name="modules"
                         return="std::vector&lt;std::string &gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;std::string &gt; modules() const;
                </method2>

                <method2 name="filterIndices"
                         return="std::vector&lt;unsigned &gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;unsigned &gt; filterIndices() const;
                </method2>

                <method1 name="indexModule"
                         return="int"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="const">
int indexModule(const std::string&amp; name) const;
                </method1>

            </section>

            <typemap name="accept_"
                     value="pat::TriggerPath::accept_"
                     type="member"/>
            <typemap name="error_"
                     value="pat::TriggerPath::error_"
                     type="member"/>
            <typemap name="filterIndices_"
                     value="pat::TriggerPath::filterIndices_"
                     type="member"/>
            <typemap name="index_"
                     value="pat::TriggerPath::index_"
                     type="member"/>
            <typemap name="lastActiveFilterSlot_"
                     value="pat::TriggerPath::lastActiveFilterSlot_"
                     type="member"/>
            <typemap name="modules_"
                     value="pat::TriggerPath::modules_"
                     type="member"/>
            <typemap name="name_"
                     value="pat::TriggerPath::name_"
                     type="member"/>
            <typemap name="prescale_"
                     value="pat::TriggerPath::prescale_"
                     type="member"/>
            <typemap name="run_"
                     value="pat::TriggerPath::run_"
                     type="member"/>

        </class>
        <typedef name="TriggerPathCollection"
                 value="std::vector&lt;TriggerPath &gt;">
typedef std::vector&lt;TriggerPath &gt; TriggerPathCollection;
            <comment>
      collection of TriggerPath
            </comment>
        </typedef>

        <typedef name="TriggerPathRef"
                 value="edm::Ref&lt;TriggerPathCollection &gt;">
typedef edm::Ref&lt;TriggerPathCollection &gt; TriggerPathRef;
            <comment>
      persistent reference to an item in a TriggerPathCollection
            </comment>
        </typedef>

        <typedef name="TriggerPathRefProd"
                 value="edm::RefProd&lt;TriggerPathCollection &gt;">
typedef edm::RefProd&lt;TriggerPathCollection &gt; TriggerPathRefProd;
            <comment>
      persistent reference to a TriggerPathCollection product
            </comment>
        </typedef>

        <typedef name="TriggerPathRefVector"
                 value="edm::RefVector&lt;TriggerPathCollection &gt;">
typedef edm::RefVector&lt;TriggerPathCollection &gt; TriggerPathRefVector;
            <comment>
      vector of persistent references to items in the same TriggerPathCollection
            </comment>
        </typedef>

        <typedef name="TriggerPathRefVectorIterator"
                 value="edm::RefVectorIterator&lt;TriggerPathCollection &gt;">
typedef edm::RefVectorIterator&lt;TriggerPathCollection &gt; TriggerPathRefVectorIterator;
            <comment>
      const iterator over vector of persistent references to items in the same TriggerPathCollection
            </comment>
        </typedef>

    </namespace>

    <type name="bool"/>
    <type name="const std::string&amp;"/>
    <type name="const unsigned"/>
    <type name="int"/>
    <type name="pat::TriggerPath"/>
    <type name="std::string"/>
    <type name="std::vector&lt;std::string &gt;"/>
    <type name="std::vector&lt;unsigned &gt;"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
