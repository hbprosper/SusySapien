<?xml version="1.0"?>
<!--
==============================================================================
  XML File: JetCorrFactors.xml
  Created:  Fri Jan 15 20:47:11 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/JetCorrFactors.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/JetCorrFactors.h">

    <include name="&lt;vector&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;math.h&gt;"/>

    <namespace name="pat">

        <class name="JetCorrFactors"
               fullname="pat::JetCorrFactors"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">

            <section name="public">

                <class name="FlavourCorrections"
                       fullname="pat::JetCorrFactors::FlavourCorrections"
                       module="DataFormats.PatCandidates"
                       project=""
                       type="regular struct">
                    <comment>
              define a simple struct for flavour dependent corrections
                    </comment>

                    <section>
                        <constructor name="FlavourCorrections"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
FlavourCorrections();
                        </constructor>

                        <constructor name="FlavourCorrections"
                                     return=""
                                     args="['float','float','float','float']"
                                     vars="['corr_uds','corr_g','corr_c','corr_b']"
                                     qual="">
FlavourCorrections(float corr_uds, float corr_g, float corr_c, float corr_b);
                        </constructor>

                        <member>
float uds, g, c, b;
                        </member>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const float']"
                                  vars="['f']"
                                  qual="const">
bool operator!=(const float f) const;
                            <comment>
	        check if all are different from -1 (default), or 0
                            </comment>
                        </operator>

                    </section>

                    <typemap name="FlavourCorrections"
                             value="pat::JetCorrFactors::FlavourCorrections"
                             type="class"/>
                    <typemap name="b"
                             value="pat::JetCorrFactors::FlavourCorrections::b"
                             type="member"/>

                </class>
                <enum name="CorrStep">
enum CorrStep {
 Raw=0x0, L1=0x10, L2=0x20, L3=0x30, L4=0x40, 
                          L5g=0x50, L5uds=0x51, L5c=0x54, L5b=0x55, 
                          L6g=0x60, L6uds=0x61, L6c=0x64, L6b=0x65, 
                          L7g=0x70, L7uds=0x71, L7c=0x74, L7b=0x75
                 };
                    <field name="Raw" value="0x0"/>
                    <field name="L1" value="0x10"/>
                    <field name="L2" value="0x20"/>
                    <field name="L3" value="0x30"/>
                    <field name="L4" value="0x40"/>
                    <field name="L5g" value="0x50"/>
                    <field name="L5uds" value="0x51"/>
                    <field name="L5c" value="0x54"/>
                    <field name="L5b" value="0x55"/>
                    <field name="L6g" value="0x60"/>
                    <field name="L6uds" value="0x61"/>
                    <field name="L6c" value="0x64"/>
                    <field name="L6b" value="0x65"/>
                    <field name="L7g" value="0x70"/>
                    <field name="L7uds" value="0x71"/>
                    <field name="L7c" value="0x74"/>
                    <field name="L7b" value="0x75"/>
                    <comment>
               * &quot;up to L7, and the choice of flavour for L5 and L7 was 'b'&quot;
                    </comment>
                </enum>

                <constructor name="JetCorrFactors"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
JetCorrFactors();
                    <comment>
   	      default Constructor
                    </comment>
                </constructor>

                <constructor name="JetCorrFactors"
                             return=""
                             args="['const std::string&amp;','float','float','float','float','FlavourCorrections','FlavourCorrections','FlavourCorrections','const std::vector&lt;float&gt;&amp;']"
                             vars="['label','l1','l2','l3','l4','l5','l6','l7','uncert']"
                             qual="">
JetCorrFactors(const std::string&amp; label, float l1, float l2, float l3, float l4, FlavourCorrections l5, FlavourCorrections l6, FlavourCorrections l7, const std::vector&lt;float&gt;&amp; uncert);
                    <comment>
	      constructor by value
                    </comment>
                </constructor>

                <method1 name="scaleDefault"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scaleDefault() const;
                    <comment>
              default scale factor: Raw &amp; L1 &amp; L2 &amp; L3
                    </comment>
                </method1>

                <method1 name="correction"
                         return="float"
                         args="['CorrStep','CorrStep=Raw']"
                         vars="['step','begin']"
                         qual="const">
float correction(CorrStep step, CorrStep begin=Raw) const;
                    <comment>
              returns the correction for a jet up to a given step, starting from another step.
                    </comment>
                </method1>

                <method1 name="corrStep"
                         return="static CorrStep const"
                         args="['const std::string&amp;','const std::string&amp;=&quot;&quot;']"
                         vars="['step','flavour']"
                         qual="">
static CorrStep const corrStep(const std::string&amp; step, const std::string&amp; flavour=&quot;&quot;);
                    <comment>
              convert a string into a CorrStep
                    </comment>
                </method1>

                <method1 name="corrStep"
                         return="std::string"
                         args="['CorrStep']"
                         vars="['step']"
                         qual="const">
std::string corrStep(CorrStep step) const;
                    <comment>
              convert a CorrStep into a string
                    </comment>
                </method1>

                <method1 name="flavour"
                         return="std::string"
                         args="['CorrStep']"
                         vars="['step']"
                         qual="const">
std::string flavour (CorrStep step) const;
                    <comment>
              return flavour string
                    </comment>
                </method1>

                <method1 name="getLabel"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string getLabel() const;
                    <comment>
	      return label, i.e. the identifying name of this set of correction factors
                    </comment>
                </method1>

                <method1 name="clearLabel"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearLabel();
                    <comment>
	      clear label to save storage, if only one set of correction factors is used
                    </comment>
                </method1>

                <method1 name="print"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="const">
void print() const;
                    <comment>
	      print function for debugging
                    </comment>
                </method1>

                <enum name="UncertVar">
enum UncertVar {
up=0, down=1};
                    <field name="up" value="0"/>
                    <field name="down" value="1"/>
                </enum>

                <method1 name="uncertainty"
                         return="float"
                         args="['CorrStep','const std::string&amp;']"
                         vars="['step','direction']"
                         qual="const">
float uncertainty(CorrStep step, const std::string&amp; direction) const;
                    <comment>
	     relative jet correction factor uncertainty
                    </comment>
                </method1>

                <method1 name="uncertainty"
                         return="float"
                         args="['CorrStep','const UncertVar']"
                         vars="['step','direction']"
                         qual="const">
float uncertainty(CorrStep step, const UncertVar direction) const;
                    <comment>
	     relative jet correction factor uncertainty
                    </comment>
                </method1>

            </section>

            <typemap name="CorrStep"
                     value="pat::JetCorrFactors::CorrStep"
                     type="enum"/>
            <typemap name="L1 "
                     value="pat::JetCorrFactors::L1 "
                     type="enum"/>
            <typemap name="L2 "
                     value="pat::JetCorrFactors::L2 "
                     type="enum"/>
            <typemap name="L3 "
                     value="pat::JetCorrFactors::L3 "
                     type="enum"/>
            <typemap name="L4 "
                     value="pat::JetCorrFactors::L4 "
                     type="enum"/>
            <typemap name="L5b "
                     value="pat::JetCorrFactors::L5b "
                     type="enum"/>
            <typemap name="L5c "
                     value="pat::JetCorrFactors::L5c "
                     type="enum"/>
            <typemap name="L5g "
                     value="pat::JetCorrFactors::L5g "
                     type="enum"/>
            <typemap name="L5uds "
                     value="pat::JetCorrFactors::L5uds "
                     type="enum"/>
            <typemap name="L6b "
                     value="pat::JetCorrFactors::L6b "
                     type="enum"/>
            <typemap name="L6c "
                     value="pat::JetCorrFactors::L6c "
                     type="enum"/>
            <typemap name="L6g "
                     value="pat::JetCorrFactors::L6g "
                     type="enum"/>
            <typemap name="L6uds "
                     value="pat::JetCorrFactors::L6uds "
                     type="enum"/>
            <typemap name="L7b "
                     value="pat::JetCorrFactors::L7b "
                     type="enum"/>
            <typemap name="L7c "
                     value="pat::JetCorrFactors::L7c "
                     type="enum"/>
            <typemap name="L7g "
                     value="pat::JetCorrFactors::L7g "
                     type="enum"/>
            <typemap name="L7uds "
                     value="pat::JetCorrFactors::L7uds "
                     type="enum"/>
            <typemap name="Raw "
                     value="pat::JetCorrFactors::Raw "
                     type="enum"/>
            <typemap name="UncertVar"
                     value="pat::JetCorrFactors::UncertVar"
                     type="enum"/>
            <typemap name="down"
                     value="pat::JetCorrFactors::down"
                     type="enum"/>
            <typemap name="up"
                     value="pat::JetCorrFactors::up"
                     type="enum"/>

        </class>
    </namespace>

    <type name="CorrStep"/>
    <type name="CorrStep const"/>
    <type name="FlavourCorrections"/>
    <type name="bool"/>
    <type name="const UncertVar"/>
    <type name="const float"/>
    <type name="const std::string&amp;"/>
    <type name="const std::vector&lt;float&gt;&amp;"/>
    <type name="enum CorrStep"/>
    <type name="enum UncertVar"/>
    <type name="float"/>
    <type name="float uds, g, c,"/>
    <type name="pat::JetCorrFactors"/>
    <type name="pat::JetCorrFactors::FlavourCorrections"/>
    <type name="std::string"/>
    <type name="void"/>
</header>
