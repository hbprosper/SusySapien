<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CompositeCandidate.xml
  Created:  Fri Jan 15 20:47:07 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/PatCandidates/interface/CompositeCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/PatCandidates/interface/CompositeCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/CompositeCandidate.h&quot;"/>
    <include name="&quot;DataFormats/PatCandidates/interface/PATObject.h&quot;"/>

    <namespace name="pat">
        <comment>
   Define typedefs for convenience
        </comment>
        <forward name="CompositeCandidate"/>
        <typedef name="CompositeCandidateCollection"
                 value="std::vector&lt;CompositeCandidate&gt;">
typedef std::vector&lt;CompositeCandidate&gt; CompositeCandidateCollection;
        </typedef>

        <typedef name="CompositeCandidateRef"
                 value="edm::Ref&lt;CompositeCandidateCollection&gt;">
typedef edm::Ref&lt;CompositeCandidateCollection&gt; CompositeCandidateRef;
        </typedef>

        <typedef name="CompositeCandidateRefVector"
                 value="edm::RefVector&lt;CompositeCandidateCollection&gt;">
typedef edm::RefVector&lt;CompositeCandidateCollection&gt; CompositeCandidateRefVector;
        </typedef>

    </namespace>

    <namespace name="pat">
        <comment>
   Class definition
        </comment>

        <class name="CompositeCandidate"
               fullname="pat::CompositeCandidate"
               module="DataFormats.PatCandidates"
               project=""
               type="regular">
            <baseclass name="public PATObject&lt;reco::CompositeCandidate&gt;"/>

            <section name="public">
                <constructor name="CompositeCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CompositeCandidate();
                    <comment>
          default constructor
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return=""
                             args="['const reco::CompositeCandidate&amp;']"
                             vars="['aCompositeCandidate']"
                             qual="">
CompositeCandidate(const reco::CompositeCandidate&amp; aCompositeCandidate);
                    <comment>
          constructor from a composite candidate
                    </comment>
                </constructor>

                <destructor name="~CompositeCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CompositeCandidate();
                    <comment>
          destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual CompositeCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CompositeCandidate* clone() const;
                    <comment>
          required reimplementation of the Candidate's clone method
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>

    <type name="CompositeCandidate*"/>
    <type name="PATObject&lt;reco::CompositeCandidate&gt;"/>
    <type name="const reco::CompositeCandidate&amp;"/>
    <type name="pat::CompositeCandidate"/>
    <type name="void"/>
</header>
