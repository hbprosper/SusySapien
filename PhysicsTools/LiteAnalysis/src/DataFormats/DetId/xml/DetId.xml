<?xml version="1.0"?>
<!--
==============================================================================
  XML File: DetId.xml
  Created:  Thu Jan 14 22:49:07 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/DetId/interface/DetId.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/DetId/interface/DetId.h">

    <include name="&lt;ostream&gt;"/>

    <class name="DetId"
           fullname="DetId"
           module="DataFormats.DetId"
           project=""
           type="regular">
        <comment>
    \class DetId

Parent class for all detector ids in CMS.  The DetId is a 32-bit
unsigned integer.  The four most significant bits ([31:28]) identify
the large-scale detector (e.g. Tracker or Ecal) while the next three
bits ([27:25]) identify a part of the detector (such as HcalBarrel
(HB) for Hcal).

$Date: 2007/07/31 15:20:00 $
$Revision: 1.9 $
        </comment>

        <section name="public">
            <constant name="kDetOffset"
                      type="static const int"
                      value="28"/>
            <constant name="kSubdetOffset"
                      type="static const int"
                      value="25"/>
            <enum name="Detector">
enum Detector {
 Tracker=1, Muon=2, Ecal=3, Hcal=4, Calo=5 };
                <field name="Tracker" value="1"/>
                <field name="Muon" value="2"/>
                <field name="Ecal" value="3"/>
                <field name="Hcal" value="4"/>
                <field name="Calo" value="5"/>
            </enum>

            <constructor name="DetId"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
DetId();
                <comment>
      Create an empty or null id (also for persistence)
                </comment>
            </constructor>

            <constructor name="DetId"
                         return=""
                         args="['uint32_t']"
                         vars="['id']"
                         qual="">
DetId(uint32_t id);
                <comment>
      Create an id from a raw number
                </comment>
            </constructor>

            <constructor name="DetId"
                         return=""
                         args="['Detector','int']"
                         vars="['det','subdet']"
                         qual="">
DetId(Detector det, int subdet);
                <comment>
      Create an id, filling the detector and subdetector fields as specified
                </comment>
            </constructor>

            <method1 name="det"
                     return="Detector"
                     args="['void']"
                     vars="['']"
                     qual="const">
Detector det() const;
                <comment>
      get the detector field from this detid
                </comment>
            </method1>

            <method1 name="subdetId"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int subdetId() const;
                <comment>
      get the contents of the subdetector field (not cast into any detector's numbering enum)
                </comment>
            </method1>

            <operator name="operator()"
                      return="uint32_t"
                      args="['void']"
                      vars="['']"
                      qual="const">
uint32_t operatorPP() const;
            </operator>

            <operator name="operator uint32_t"
                      return=""
                      args="['void']"
                      vars="['']"
                      qual="const">
operator uint32_t() const;
            </operator>

            <method1 name="rawId"
                     return="uint32_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
uint32_t rawId() const;
                <comment>
      get the raw id
                </comment>
            </method1>

            <method1 name="null"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool null() const;
                <comment>
      is this a null id ?
                </comment>
            </method1>

            <operator name="operator=="
                      return="bool"
                      args="['DetId']"
                      vars="['id']"
                      qual="const">
bool operator==(DetId id) const;
                <comment>
      equality
                </comment>
            </operator>

            <operator name="operator!="
                      return="bool"
                      args="['DetId']"
                      vars="['id']"
                      qual="const">
bool operator!=(DetId id) const;
                <comment>
      inequality
                </comment>
            </operator>

            <operator name="operator&lt;"
                      return="bool"
                      args="['DetId']"
                      vars="['id']"
                      qual="const">
bool operator&lt;(DetId id) const;
                <comment>
      comparison
                </comment>
            </operator>

        </section>

        <typemap name="Calo"
                 value="DetId::Calo"
                 type="enum"/>
        <typemap name="Detector"
                 value="DetId::Detector"
                 type="enum"/>
        <typemap name="Ecal"
                 value="DetId::Ecal"
                 type="enum"/>
        <typemap name="Hcal"
                 value="DetId::Hcal"
                 type="enum"/>
        <typemap name="Muon"
                 value="DetId::Muon"
                 type="enum"/>
        <typemap name="Tracker"
                 value="DetId::Tracker"
                 type="enum"/>

    </class>
    <operator name="operator=="
              return="inline bool"
              args="['uint32_t','DetId']"
              vars="['i','id']"
              qual="">
inline bool operator==(uint32_t i, DetId id);
        <comment>
    equality
        </comment>
    </operator>

    <operator name="operator=="
              return="inline bool"
              args="['DetId','uint32_t']"
              vars="['id','i']"
              qual="">
inline bool operator==(DetId id, uint32_t i);
    </operator>

    <operator name="operator!="
              return="inline bool"
              args="['uint32_t','DetId']"
              vars="['i','id']"
              qual="">
inline bool operator!=(uint32_t i, DetId id);
        <comment>
    inequality
        </comment>
    </operator>

    <operator name="operator!="
              return="inline bool"
              args="['DetId','uint32_t']"
              vars="['id','i']"
              qual="">
inline bool operator!=(DetId id, uint32_t i);
    </operator>

    <operator name="operator&lt;"
              return="inline bool"
              args="['uint32_t','DetId']"
              vars="['i','id']"
              qual="">
inline bool operator&lt;(uint32_t i, DetId id);
        <comment>
    comparison
        </comment>
    </operator>

    <operator name="operator&lt;"
              return="inline bool"
              args="['DetId','uint32_t']"
              vars="['id','i']"
              qual="">
inline bool operator&lt;(DetId id, uint32_t i);
    </operator>


    <type name="DetId"/>
    <type name="Detector"/>
    <type name="bool"/>
    <type name="enum Detector"/>
    <type name="int"/>
    <type name="uint32_t"/>
    <type name="void"/>
</header>
