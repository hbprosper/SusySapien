<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CaloID.xml
  Created:  Fri Jan 15 20:46:05 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/CaloRecHit/interface/CaloID.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/CaloRecHit/interface/CaloID.h">

    <include name="&lt;iosfwd&gt;"/>

    <namespace name="reco">

        <class name="CaloID"
               fullname="reco::CaloID"
               module="DataFormats.CaloRecHit"
               project=""
               type="regular printable">

            <section name="public">
                <enum name="Detectors">
enum Detectors {

      DET_ECAL_BARREL=0, 
      DET_ECAL_ENDCAP, 
      DET_PS1, 
      DET_PS2, 
      DET_HCAL_BARREL, 
      DET_HCAL_ENDCAP, 
      DET_HF, 
      DET_HF_EM, 
      DET_HF_HAD, 
      DET_HO, 
      DET_NONE
    };
                    <field name="DET_ECAL_BARREL" value="0"/>
                    <field name="DET_ECAL_ENDCAP" value=""/>
                    <field name="DET_PS1" value=""/>
                    <field name="DET_PS2" value=""/>
                    <field name="DET_HCAL_BARREL" value=""/>
                    <field name="DET_HCAL_ENDCAP" value=""/>
                    <field name="DET_HF" value=""/>
                    <field name="DET_HF_EM" value=""/>
                    <field name="DET_HF_HAD" value=""/>
                    <field name="DET_HO" value=""/>
                    <field name="DET_NONE" value=""/>
                </enum>

                <constructor name="CaloID"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CaloID();
                    <comment>
        default constructor. Sets energy and position to zero
                    </comment>
                </constructor>

                <constructor name="CaloID"
                             return=""
                             args="['Detectors']"
                             vars="['det']"
                             qual="">
CaloID(Detectors det);
                </constructor>

                <destructor name="~CaloID"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CaloID();
                    <comment>
        abstract class
                    </comment>
                </destructor>

                <method1 name="setDetector"
                         return="void"
                         args="['CaloID::Detectors','bool']"
                         vars="['theDetector','value']"
                         qual="">
void setDetector(CaloID::Detectors theDetector, bool value);
                    <comment>
        tells the CaloID that it describes a given detector
                    </comment>
                </method1>

                <method1 name="detectors"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned detectors() const;
                    <comment>
        \return packed detector information
                    </comment>
                </method1>

                <method1 name="detector"
                         return="bool"
                         args="['CaloID::Detectors']"
                         vars="['theDetector']"
                         qual="const">
bool detector(CaloID::Detectors theDetector) const;
                    <comment>
        \return true if this CaloID is in a given detector
                    </comment>
                </method1>

                <method1 name="isSingleDetector"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isSingleDetector() const;
                    <comment>
        \return true if this CaloID describes a single detector
                    </comment>
                </method1>

                <method1 name="detector"
                         return="Detectors"
                         args="['void']"
                         vars="['']"
                         qual="const">
Detectors detector() const;
                    <comment>
        and DET_NONE otherwise.
                    </comment>
                </method1>

                <operator name="operator="
                          return="CaloID&amp;"
                          args="['const CaloID&amp;']"
                          vars="['rhs']"
                          qual="">
CaloID&amp; operator=(const CaloID&amp; rhs);
                </operator>

                <operator name="operator&lt;&lt;"
                          return="friend std::ostream&amp;"
                          args="['std::ostream&amp;','const CaloID&amp;']"
                          vars="['out','id']"
                          qual="">
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const CaloID&amp; id);
                </operator>

            </section>

            <typemap name="DET_ECAL_BARREL "
                     value="reco::CaloID::DET_ECAL_BARREL "
                     type="enum"/>
            <typemap name="DET_ECAL_ENDCAP"
                     value="reco::CaloID::DET_ECAL_ENDCAP"
                     type="enum"/>
            <typemap name="DET_HCAL_BARREL"
                     value="reco::CaloID::DET_HCAL_BARREL"
                     type="enum"/>
            <typemap name="DET_HCAL_ENDCAP"
                     value="reco::CaloID::DET_HCAL_ENDCAP"
                     type="enum"/>
            <typemap name="DET_HF"
                     value="reco::CaloID::DET_HF"
                     type="enum"/>
            <typemap name="DET_HF_EM"
                     value="reco::CaloID::DET_HF_EM"
                     type="enum"/>
            <typemap name="DET_HF_HAD"
                     value="reco::CaloID::DET_HF_HAD"
                     type="enum"/>
            <typemap name="DET_HO"
                     value="reco::CaloID::DET_HO"
                     type="enum"/>
            <typemap name="DET_NONE"
                     value="reco::CaloID::DET_NONE"
                     type="enum"/>
            <typemap name="DET_PS1"
                     value="reco::CaloID::DET_PS1"
                     type="enum"/>
            <typemap name="DET_PS2"
                     value="reco::CaloID::DET_PS2"
                     type="enum"/>
            <typemap name="Detectors"
                     value="reco::CaloID::Detectors"
                     type="enum"/>

        </class>
        <operator name="operator&lt;&lt;"
                  return="std::ostream&amp;"
                  args="['std::ostream&amp;','const CaloID&amp;']"
                  vars="['out','id']"
                  qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const CaloID&amp; id);
        </operator>

    </namespace>

    <type name="CaloID&amp;"/>
    <type name="CaloID::Detectors"/>
    <type name="Detectors"/>
    <type name="bool"/>
    <type name="const CaloID&amp;"/>
    <type name="enum Detectors"/>
    <type name="reco::CaloID"/>
    <type name="std::ostream&amp;"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
