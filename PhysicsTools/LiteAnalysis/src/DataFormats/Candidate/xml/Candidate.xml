<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Candidate.xml
  Created:  Fri Jan 15 20:46:06 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/Candidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Candidate/interface/Candidate.h">

    <include name="&quot;DataFormats/Candidate/interface/component.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/const_iterator.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/CandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Error.h&quot;"/>
    <include name="&quot;boost/iterator/filter_iterator.hpp&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/BoolCache.h&quot;"/>
    <include name="&quot;Rtypes.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/Particle.h&quot;"/>
    <forward name="OverlapChecker"/>

    <namespace name="reco">

        <class name="Candidate"
               fullname="reco::Candidate"
               module="DataFormats.Candidate"
               project=""
               type="abstract regular">

            <section name="public">
                <typedef name="size_type"
                         value="size_t">
typedef size_t size_type;
                </typedef>

                <typedef name="const_iterator"
                         value="candidate::const_iterator">
typedef candidate::const_iterator const_iterator;
                </typedef>

                <typedef name="iterator"
                         value="candidate::iterator">
typedef candidate::iterator iterator;
                </typedef>

                <typedef name="Charge"
                         value="int">
typedef int Charge;
                    <comment>
        electric charge type
                    </comment>
                </typedef>

                <typedef name="LorentzVector"
                         value="math::XYZTLorentzVector">
typedef math::XYZTLorentzVector LorentzVector;
                    <comment>
        Lorentz vector
                    </comment>
                </typedef>

                <typedef name="PolarLorentzVector"
                         value="math::PtEtaPhiMLorentzVector">
typedef math::PtEtaPhiMLorentzVector PolarLorentzVector;
                    <comment>
        Lorentz vector
                    </comment>
                </typedef>

                <typedef name="Point"
                         value="math::XYZPoint">
typedef math::XYZPoint Point;
                    <comment>
        point in the space
                    </comment>
                </typedef>

                <typedef name="Vector"
                         value="math::XYZVector">
typedef math::XYZVector Vector;
                    <comment>
        point in the space
                    </comment>
                </typedef>

                <enum name="">
enum {
 dimension=3 };
                    <field name="dimension" value="3"/>
                </enum>

                <typedef name="CovarianceMatrix"
                         value="math::Error&lt;dimension&gt;::type">
typedef math::Error&lt;dimension&gt;::type CovarianceMatrix;
                    <comment>
        covariance error matrix (3x3)
                    </comment>
                </typedef>

                <enum name="">
enum {
 size=dimension* (dimension+1)/2 };
                    <field name="size" value="dimension* (dimension+1)/2"/>
                    <comment>
        matix size
                    </comment>
                </enum>

                <typedef name="index"
                         value="unsigned int">
typedef unsigned int index;
                    <comment>
        index type
                    </comment>
                </typedef>

                <constructor name="Candidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Candidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <destructor name="~Candidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Candidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="charge"
                         return="virtual int"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual int charge() const=0;
                    <comment>
        electric charge
                    </comment>
                </method1>

                <method1 name="setCharge"
                         return="virtual void"
                         args="['Charge']"
                         vars="['q']"
                         qual="= 0">
virtual void setCharge(Charge q)=0;
                    <comment>
        set electric charge
                    </comment>
                </method1>

                <method1 name="threeCharge"
                         return="virtual int"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual int threeCharge() const=0;
                    <comment>
        electric charge
                    </comment>
                </method1>

                <method1 name="setThreeCharge"
                         return="virtual void"
                         args="['Charge']"
                         vars="['qx3']"
                         qual="= 0">
virtual void setThreeCharge(Charge qx3)=0;
                    <comment>
        set electric charge
                    </comment>
                </method1>

                <method1 name="p4"
                         return="virtual const LorentzVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const LorentzVector&amp; p4() const=0;
                    <comment>
        four-momentum Lorentz vector
                    </comment>
                </method1>

                <method1 name="polarP4"
                         return="virtual const PolarLorentzVector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const PolarLorentzVector&amp; polarP4() const=0;
                    <comment>
        four-momentum Lorentz vector
                    </comment>
                </method1>

                <method1 name="momentum"
                         return="virtual Vector"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual Vector momentum() const=0;
                    <comment>
        spatial momentum vector
                    </comment>
                </method1>

                <method1 name="boostToCM"
                         return="virtual Vector"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual Vector boostToCM() const=0;
                    <comment>
        to the particle center of mass system
                    </comment>
                </method1>

                <method1 name="p"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double p() const=0;
                    <comment>
        magnitude of momentum vector
                    </comment>
                </method1>

                <method1 name="energy"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double energy() const=0;
                    <comment>
        energy
                    </comment>
                </method1>

                <method1 name="et"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double et() const=0;
                    <comment>
        transverse energy
                    </comment>
                </method1>

                <method1 name="mass"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double mass() const=0;
                    <comment>
        mass
                    </comment>
                </method1>

                <method1 name="massSqr"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double massSqr() const=0;
                    <comment>
        mass squared
                    </comment>
                </method1>

                <method1 name="mt"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double mt() const=0;
                    <comment>
        transverse mass
                    </comment>
                </method1>

                <method1 name="mtSqr"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double mtSqr() const=0;
                    <comment>
        transverse mass squared
                    </comment>
                </method1>

                <method1 name="px"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double px() const=0;
                    <comment>
        x coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="py"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double py() const=0;
                    <comment>
        y coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="pz"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double pz() const=0;
                    <comment>
        z coordinate of momentum vector
                    </comment>
                </method1>

                <method1 name="pt"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double pt() const=0;
                    <comment>
        transverse momentum
                    </comment>
                </method1>

                <method1 name="phi"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double phi() const=0;
                    <comment>
        momentum azimuthal angle
                    </comment>
                </method1>

                <method1 name="theta"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double theta() const=0;
                    <comment>
        momentum polar angle
                    </comment>
                </method1>

                <method1 name="eta"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double eta() const=0;
                    <comment>
        momentum pseudorapidity
                    </comment>
                </method1>

                <method1 name="rapidity"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double rapidity() const=0;
                    <comment>
        rapidity
                    </comment>
                </method1>

                <method1 name="y"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double y() const=0;
                    <comment>
        rapidity
                    </comment>
                </method1>

                <method1 name="setP4"
                         return="virtual void"
                         args="['const LorentzVector&amp;']"
                         vars="['p4']"
                         qual="= 0">
virtual void setP4(const LorentzVector&amp; p4)=0;
                    <comment>
        set 4-momentum
                    </comment>
                </method1>

                <method1 name="setP4"
                         return="virtual void"
                         args="['const PolarLorentzVector&amp;']"
                         vars="['p4']"
                         qual="= 0">
virtual void setP4(const PolarLorentzVector&amp; p4)=0;
                    <comment>
        set 4-momentum
                    </comment>
                </method1>

                <method1 name="setMass"
                         return="virtual void"
                         args="['double']"
                         vars="['m']"
                         qual="= 0">
virtual void setMass(double m)=0;
                    <comment>
        set particle mass
                    </comment>
                </method1>

                <method1 name="setPz"
                         return="virtual void"
                         args="['double']"
                         vars="['pz']"
                         qual="= 0">
virtual void setPz(double pz)=0;
                </method1>

                <method1 name="vertex"
                         return="virtual const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const Point&amp; vertex() const=0;
                    <comment>
        vertex position
                    </comment>
                </method1>

                <method1 name="vx"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vx() const=0;
                    <comment>
        x coordinate of vertex position
                    </comment>
                </method1>

                <method1 name="vy"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vy() const=0;
                    <comment>
        y coordinate of vertex position
                    </comment>
                </method1>

                <method1 name="vz"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vz() const=0;
                    <comment>
        z coordinate of vertex position
                    </comment>
                </method1>

                <method1 name="setVertex"
                         return="virtual void"
                         args="['const Point&amp;']"
                         vars="['vertex']"
                         qual="= 0">
virtual void setVertex(const Point&amp; vertex)=0;
                    <comment>
        set vertex
                    </comment>
                </method1>

                <method1 name="pdgId"
                         return="virtual int"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual int pdgId() const=0;
                    <comment>
        PDG identifier
                    </comment>
                </method1>

                <method1 name="setPdgId"
                         return="virtual void"
                         args="['int']"
                         vars="['pdgId']"
                         qual="= 0">
virtual void setPdgId(int pdgId)=0;
                    <comment>
       set PDG identifier
                    </comment>
                </method1>

                <method1 name="status"
                         return="virtual int"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual int status() const=0;
                    <comment>
        status word
                    </comment>
                </method1>

                <method1 name="setStatus"
                         return="virtual void"
                         args="['int']"
                         vars="['status']"
                         qual="= 0">
virtual void setStatus(int status)=0;
                    <comment>
        set status word
                    </comment>
                </method1>

                <constant name="longLivedTag"
                          type="static const unsigned int"
                          value=""/>
                <method1 name="setLongLived"
                         return="virtual void"
                         args="['void']"
                         vars="['']"
                         qual="= 0">
virtual void setLongLived()=0;
                    <comment>
        set long lived flag
                    </comment>
                </method1>

                <method1 name="longLived"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool longLived() const=0;
                    <comment>
        is long lived?
                    </comment>
                </method1>

                <method1 name="setMassConstraint"
                         return="virtual void"
                         args="['void']"
                         vars="['']"
                         qual="= 0">
virtual void setMassConstraint()=0;
                    <comment>
        set mass constraint flag
                    </comment>
                </method1>

                <method1 name="massConstraint"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool massConstraint() const=0;
                    <comment>
        do mass constraint?
                    </comment>
                </method1>

                <method1 name="clone"
                         return="virtual Candidate*"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual Candidate* clone() const=0;
                    <comment>
        returns a clone of the Candidate object
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const_iterator begin() const=0;
                    <comment>
        first daughter const_iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const_iterator end() const=0;
                    <comment>
        last daughter const_iterator
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="= 0">
virtual iterator begin()=0;
                    <comment>
        first daughter iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="= 0">
virtual iterator end()=0;
                    <comment>
        last daughter iterator
                    </comment>
                </method1>

                <method1 name="numberOfDaughters"
                         return="virtual size_type"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual size_type numberOfDaughters() const=0;
                    <comment>
        number of daughters
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="const = 0">
virtual const Candidate* daughter(size_type i) const=0;
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1 (read only mode)
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="= 0">
virtual Candidate* daughter(size_type i)=0;
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="= 0">
virtual Candidate* daughter(const std::string&amp; s)=0;
                    <comment>
        return daughter with a specified role name
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="const = 0">
virtual const Candidate* daughter(const std::string&amp; s) const=0;
                    <comment>
        return daughter with a specified role name
                    </comment>
                </method1>

                <method1 name="numberOfMothers"
                         return="virtual size_type"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual size_type numberOfMothers() const=0;
                    <comment>
        number of mothers (zero or one in most of but not all the cases)
                    </comment>
                </method1>

                <method1 name="mother"
                         return="virtual const Candidate*"
                         args="['size_type=0']"
                         vars="['i']"
                         qual="const = 0">
virtual const Candidate* mother(size_type i=0) const=0;
                    <comment>
        return pointer to mother
                    </comment>
                </method1>

                <method1 name="numberOfSourceCandidatePtrs"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual size_t numberOfSourceCandidatePtrs() const=0;
                    <comment>
        ( the candidates used to construct this Candidate)
                    </comment>
                </method1>

                <method1 name="sourceCandidatePtr"
                         return="virtual CandidatePtr"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
virtual CandidatePtr sourceCandidatePtr(size_type i) const;
                    <comment>
        ( the candidates used to construct this Candidate)
                    </comment>
                </method1>

                <method1 name="setSourceCandidatePtr"
                         return="virtual void"
                         args="['const CandidatePtr&amp;']"
                         vars="['ptr']"
                         qual="">
virtual void setSourceCandidatePtr(const CandidatePtr&amp; ptr);
                    <comment>
        of the reconstruction history.
                    </comment>
                </method1>

                <method1 name="vertexChi2"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vertexChi2() const=0;
                    <comment>
        chi-squares
                    </comment>
                </method1>

                <method1 name="vertexNdof"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vertexNdof() const=0;
                    <comment>
        Number of degrees of freedom
        Meant to be Double32_t for soft-assignment fitters:
        tracks may contribute to the vertex with fractional weights.
        The ndof is then = to the sum of the track weights.
        see e.g. CMS NOTE-2006/032, CMS NOTE-2004/002
                    </comment>
                </method1>

                <method1 name="vertexNormalizedChi2"
                         return="virtual double"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual double vertexNormalizedChi2() const=0;
                    <comment>
        chi-squared divided by n.d.o.f.
                    </comment>
                </method1>

                <method1 name="vertexCovariance"
                         return="virtual double"
                         args="['int','int']"
                         vars="['i','j']"
                         qual="const = 0">
virtual double vertexCovariance(int i, int j) const=0;
                    <comment>
        (i, j)-th element of error matrix, i, j = 0, ... 2
                    </comment>
                </method1>

                <method1 name="vertexCovariance"
                         return="virtual CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CovarianceMatrix vertexCovariance() const;
                    <comment>
        fill SMatrix
                    </comment>
                </method1>

                <method1 name="fillVertexCovariance"
                         return="virtual void"
                         args="['CovarianceMatrix&amp;']"
                         vars="['v']"
                         qual="const = 0">
virtual void fillVertexCovariance(CovarianceMatrix&amp; v) const=0;
                </method1>

                <method1 name="hasMasterClone"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool hasMasterClone() const=0;
                    <comment>
        This only happens if the concrete Candidate type is ShallowCloneCandidate
                    </comment>
                </method1>

                <method1 name="masterClone"
                         return="virtual const CandidateBaseRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const CandidateBaseRef&amp; masterClone() const=0;
                    <comment>
        Throws an exception unless the concrete Candidate type is ShallowCloneCandidate
                    </comment>
                </method1>

                <method1 name="hasMasterClonePtr"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool hasMasterClonePtr() const=0;
                    <comment>
        This only happens if the concrete Candidate type is ShallowClonePtrCandidate
                    </comment>
                </method1>

                <method1 name="masterClonePtr"
                         return="virtual const CandidatePtr&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual const CandidatePtr&amp; masterClonePtr() const=0;
                    <comment>
        Throws an exception unless the concrete Candidate type is ShallowClonePtrCandidate
                    </comment>
                </method1>

                <method2 name="masterRef"
                         return="template&lt;typename Ref&gt; Ref"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;typename Ref&gt;     Ref masterRef() const;
                    <comment>
        cast master clone reference to a concrete type
                    </comment>
                </method2>

                <method2 name="get"
                         return="template&lt;typename T&gt; T"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;typename T&gt; T get() const;
                    <comment>
        get a component
                    </comment>
                </method2>

                <method2 name="get"
                         return="template&lt;typename T, typename Tag&gt; T"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;typename T, typename Tag&gt; T get() const;
                    <comment>
        get a component
                    </comment>
                </method2>

                <method2 name="get"
                         return="template&lt;typename T&gt; T"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
template&lt;typename T&gt; T get(size_type i) const;
                    <comment>
        get a component
                    </comment>
                </method2>

                <method2 name="get"
                         return="template&lt;typename T, typename Tag&gt; T"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
template&lt;typename T, typename Tag&gt; T get(size_type i) const;
                    <comment>
        get a component
                    </comment>
                </method2>

                <method2 name="numberOf"
                         return="template&lt;typename T&gt; size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;typename T&gt; size_type numberOf() const;
                    <comment>
        number of components
                    </comment>
                </method2>

                <method2 name="numberOf"
                         return="template&lt;typename T, typename Tag&gt; size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;typename T, typename Tag&gt; size_type numberOf() const;
                    <comment>
        number of components
                    </comment>
                </method2>


                <class name="daughter_iterator"
                       fullname="reco::Candidate::daughter_iterator&lt;S&gt;"
                       module="DataFormats.Candidate"
                       project=""
                       type="template struct"
                       template="template&lt;typename S&gt;">

                    <section>
                        <typedef name="type"
                                 value="boost::filter_iterator&lt;S, const_iterator&gt;">
typedef boost::filter_iterator&lt;S, const_iterator&gt; type;
                        </typedef>

                    </section>

                    <typemap name="daughter_iterator"
                             value="reco::Candidate::daughter_iterator&lt;S&gt;"
                             type="class"/>
                    <typemap name="type"
                             value="boost::filter_iterator&lt;S, const_iterator&gt;"
                             type="typedef"/>

                </class>
                <method2 name="beginFilter"
                         return="template&lt;typename S&gt; typename daughter_iterator&lt;S&gt;::type"
                         args="['const S&amp;']"
                         vars="['s']"
                         qual="const">
template&lt;typename S&gt;       typename daughter_iterator&lt;S&gt;::type beginFilter(const S&amp; s) const;
                </method2>

                <method2 name="endFilter"
                         return="template&lt;typename S&gt; typename daughter_iterator&lt;S&gt;::type"
                         args="['const S&amp;']"
                         vars="['s']"
                         qual="const">
template&lt;typename S&gt;       typename daughter_iterator&lt;S&gt;::type endFilter(const S&amp; s) const;
                </method2>

                <method1 name="isElectron"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isElectron() const=0;
                </method1>

                <method1 name="isMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isMuon() const=0;
                </method1>

                <method1 name="isStandAloneMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isStandAloneMuon() const=0;
                </method1>

                <method1 name="isGlobalMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isGlobalMuon() const=0;
                </method1>

                <method1 name="isTrackerMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isTrackerMuon() const=0;
                </method1>

                <method1 name="isCaloMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isCaloMuon() const=0;
                </method1>

                <method1 name="isPhoton"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isPhoton() const=0;
                </method1>

                <method1 name="isConvertedPhoton"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isConvertedPhoton() const=0;
                </method1>

                <method1 name="isJet"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const = 0">
virtual bool isJet() const=0;
                </method1>

            </section>

            <typemap name="Charge"
                     value="int"
                     type="typedef"/>
            <typemap name="CovarianceMatrix"
                     value="math::Error&lt;dimension&gt;::type"
                     type="typedef"/>
            <typemap name="LorentzVector"
                     value="math::XYZTLorentzVector"
                     type="typedef"/>
            <typemap name="Point"
                     value="math::XYZPoint"
                     type="typedef"/>
            <typemap name="PolarLorentzVector"
                     value="math::PtEtaPhiMLorentzVector"
                     type="typedef"/>
            <typemap name="Vector"
                     value="math::XYZVector"
                     type="typedef"/>
            <typemap name="const_iterator"
                     value="candidate::const_iterator"
                     type="typedef"/>
            <typemap name="dimension "
                     value="reco::Candidate::dimension "
                     type="enum"/>
            <typemap name="index"
                     value="unsigned int"
                     type="typedef"/>
            <typemap name="iterator"
                     value="candidate::iterator"
                     type="typedef"/>
            <typemap name="size "
                     value="reco::Candidate::size "
                     type="enum"/>
            <typemap name="size_type"
                     value="size_t"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Candidate*"/>
    <type name="CandidatePtr"/>
    <type name="Charge"/>
    <type name="CovarianceMatrix"/>
    <type name="CovarianceMatrix&amp;"/>
    <type name="Vector"/>
    <type name="bool"/>
    <type name="const Candidate*"/>
    <type name="const CandidateBaseRef&amp;"/>
    <type name="const CandidatePtr&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="const_iterator"/>
    <type name="double"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="reco::Candidate"/>
    <type name="reco::Candidate::daughter_iterator&lt;S&gt;"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="template&lt;typename Ref&gt; Ref"/>
    <type name="template&lt;typename S&gt; typename daughter_iterator&lt;S&gt;::type"/>
    <type name="template&lt;typename T, typename Tag&gt; T"/>
    <type name="template&lt;typename T, typename Tag&gt; size_type"/>
    <type name="template&lt;typename T&gt; T"/>
    <type name="template&lt;typename T&gt; size_type"/>
    <type name="void"/>
</header>
