<?xml version="1.0"?>
<!--
==============================================================================
  XML File: NamedCompositeCandidate.xml
  Created:  Thu Jan 14 22:46:42 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/NamedCompositeCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Candidate/interface/NamedCompositeCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/CompositeCandidate.h&quot;"/>
    <include name="&lt;memory&gt;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator_imp_specific.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/NamedCompositeCandidateFwd.h&quot;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;map&gt;"/>

    <namespace name="reco">

        <class name="NamedCompositeCandidate"
               fullname="reco::NamedCompositeCandidate"
               module="DataFormats.Candidate"
               project=""
               type="regular">
            <baseclass name="public CompositeCandidate"/>

            <section name="public">
                <typedef name="role_collection"
                         value="std::vector&lt;std::string&gt;">
typedef std::vector&lt;std::string&gt; role_collection;
                </typedef>

                <constructor name="NamedCompositeCandidate"
                             return=""
                             args="['std::string=&quot;&quot;']"
                             vars="['name']"
                             qual="">
NamedCompositeCandidate(std::string name=&quot;&quot;);
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="NamedCompositeCandidate"
                             return=""
                             args="['std::string','const role_collection&amp;']"
                             vars="['name','roles']"
                             qual="">
NamedCompositeCandidate(std::string name, const role_collection&amp; roles);
                </constructor>

                <constructor name="NamedCompositeCandidate"
                             return=""
                             args="['std::string','const role_collection&amp;','Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0','bool=true']"
                             vars="['name','roles','q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
NamedCompositeCandidate(std::string name, const role_collection&amp; roles, Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0, bool integerCharge=true);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="NamedCompositeCandidate"
                             return=""
                             args="['std::string','const role_collection&amp;','const Particle&amp;']"
                             vars="['name','roles','p']"
                             qual="">
NamedCompositeCandidate(std::string name, const role_collection&amp; roles, const Particle&amp; p);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="NamedCompositeCandidate"
                             return=""
                             args="['std::string','const role_collection&amp;','const Candidate&amp;']"
                             vars="['name','roles','p']"
                             qual="">
NamedCompositeCandidate(std::string name, const role_collection&amp; roles, const Candidate&amp; p);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~NamedCompositeCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~NamedCompositeCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual NamedCompositeCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual NamedCompositeCandidate* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="name"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string name() const;
                    <comment>
       get name
                    </comment>
                </method1>

                <method1 name="setName"
                         return="void"
                         args="['std::string']"
                         vars="['n']"
                         qual="">
void setName(std::string n);
                    <comment>
       set name
                    </comment>
                </method1>

                <method1 name="roles"
                         return="const NamedCompositeCandidate::role_collection&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const NamedCompositeCandidate::role_collection&amp; roles() const;
                    <comment>
       get roles
                    </comment>
                </method1>

                <method1 name="setRoles"
                         return="void"
                         args="['const NamedCompositeCandidate::role_collection&amp;']"
                         vars="['roles']"
                         qual="">
void setRoles(const NamedCompositeCandidate::role_collection&amp; roles);
                    <comment>
       set roles
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="">
virtual Candidate* daughter(const std::string&amp; s);
                    <comment>
       Get candidate based on role
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="const">
virtual const Candidate* daughter(const std::string&amp; s) const;
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="">
virtual Candidate* daughter(size_type i);
                    <comment>
       Get candidate based on index
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
virtual const Candidate* daughter(size_type i) const;
                </method1>

                <method1 name="addDaughter"
                         return="void"
                         args="['const Candidate&amp;','const std::string&amp;']"
                         vars="['','s']"
                         qual="">
void addDaughter(const Candidate&amp;, const std::string&amp;s);
                    <comment>
       Add daughters
                    </comment>
                </method1>

                <method2 name="addDaughter"
                         return="void"
                         args="['std::auto_ptr&lt;Candidate&gt;','const std::string&amp;']"
                         vars="['','s']"
                         qual="">
void addDaughter(std::auto_ptr&lt;Candidate&gt;, const std::string&amp; s);
                </method2>

                <method1 name="clearDaughters"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearDaughters();
                    <comment>
       Clear daughters and roles
                    </comment>
                </method1>

                <method1 name="clearRoles"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearRoles();
                </method1>

                <method1 name="applyRoles"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void applyRoles();
                    <comment>
       Apply the roles to the objects
                    </comment>
                </method1>

            </section>

            <typemap name="role_collection"
                     value="std::vector&lt;std::string&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Candidate*"/>
    <type name="Charge"/>
    <type name="CompositeCandidate"/>
    <type name="NamedCompositeCandidate*"/>
    <type name="bool"/>
    <type name="const Candidate&amp;"/>
    <type name="const Candidate*"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const NamedCompositeCandidate::role_collection&amp;"/>
    <type name="const Particle&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const role_collection&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="int"/>
    <type name="reco::NamedCompositeCandidate"/>
    <type name="size_type"/>
    <type name="std::auto_ptr&lt;Candidate&gt;"/>
    <type name="std::string"/>
    <type name="void"/>
</header>
