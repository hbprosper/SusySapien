<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CandAssociation.xml
  Created:  Fri Jan 15 20:46:06 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/CandAssociation.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Candidate/interface/CandAssociation.h">

    <include name="&quot;DataFormats/Common/interface/AssociationVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/ValueMap.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/Candidate.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="edm">

        <namespace name="helper">

            <class name="CandMasterKeyReference"
                   fullname="edm::helper::CandMasterKeyReference"
                   module="DataFormats.Candidate"
                   project=""
                   type="regular struct">

                <section>
                    <method2 name="get"
                             return="template&lt;typename CandRef&gt; static const CandRef&amp;"
                             args="['const CandRef&amp;','edm::ProductID']"
                             vars="['t','id']"
                             qual="">
template&lt;typename CandRef&gt;       static const CandRef&amp; get(const CandRef&amp; t, edm::ProductID id);
                    </method2>

                </section>

            </class>

            <class name="AssociationKeyReferenceTrait&lt;reco::CandidateCollection&gt;"
                   fullname="edm::helper::AssociationKeyReferenceTrait&lt;reco::CandidateCollection&gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;&gt;">

                <section>
                    <typedef name="type"
                             value="CandMasterKeyReference">
typedef CandMasterKeyReference type;
                    </typedef>

                </section>

                <typemap name="type"
                         value="CandMasterKeyReference"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <namespace name="reco">
        <typedef name="CandFloatAssociations"
                 value="edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;float&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;float&gt; &gt; CandFloatAssociations;
        </typedef>

        <typedef name="CandDoubleAssociations"
                 value="edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;double&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;double&gt; &gt; CandDoubleAssociations;
        </typedef>

        <typedef name="CandIntAssociations"
                 value="edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;int&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;int&gt; &gt; CandIntAssociations;
        </typedef>

        <typedef name="CandUIntAssociations"
                 value="edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;unsigned int&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateRefProd, std::vector&lt;unsigned int&gt; &gt; CandUIntAssociations;
        </typedef>

        <typedef name="CandViewFloatAssociations"
                 value="edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;float&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;float&gt; &gt; CandViewFloatAssociations;
        </typedef>

        <typedef name="CandViewDoubleAssociations"
                 value="edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;double&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;double&gt; &gt; CandViewDoubleAssociations;
        </typedef>

        <typedef name="CandViewIntAssociations"
                 value="edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;int&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;int&gt; &gt; CandViewIntAssociations;
        </typedef>

        <typedef name="CandViewUIntAssociations"
                 value="edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;unsigned int&gt; &gt;">
typedef edm::AssociationVector&lt;CandidateBaseRefProd, std::vector&lt;unsigned int&gt; &gt; CandViewUIntAssociations;
        </typedef>

        <typedef name="CandRefValueMap"
                 value="edm::ValueMap&lt;CandidateBaseRef&gt;">
typedef edm::ValueMap&lt;CandidateBaseRef&gt; CandRefValueMap;
        </typedef>

    </namespace>

    <type name="edm::ProductID"/>
    <type name="edm::helper::AssociationKeyReferenceTrait&lt;reco::CandidateCollection&gt;"/>
    <type name="edm::helper::CandMasterKeyReference"/>
    <type name="template&lt;typename CandRef&gt; const CandRef&amp;"/>
</header>
