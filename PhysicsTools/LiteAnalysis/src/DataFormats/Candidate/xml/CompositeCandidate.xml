<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CompositeCandidate.xml
  Created:  Thu Jan 14 22:46:39 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/CompositeCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Candidate/interface/CompositeCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/Candidate.h&quot;"/>
    <include name="&lt;memory&gt;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator_imp_specific.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/CompositeCandidateFwd.h&quot;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="reco">

        <class name="CompositeCandidate"
               fullname="reco::CompositeCandidate"
               module="DataFormats.Candidate"
               project=""
               type="regular">
            <baseclass name="public Candidate"/>

            <section name="public">
                <typedef name="daughters"
                         value="CandidateCollection">
typedef CandidateCollection daughters;
                    <comment>
        collection of daughters
                    </comment>
                </typedef>

                <typedef name="role_collection"
                         value="std::vector&lt;std::string&gt;">
typedef std::vector&lt;std::string&gt; role_collection;
                </typedef>

                <constructor name="CompositeCandidate"
                             return=""
                             args="['std::string=&quot;&quot;']"
                             vars="['name']"
                             qual="">
CompositeCandidate(std::string name=&quot;&quot;);
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0','bool=true','std::string=&quot;&quot;']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge','name']"
                             qual="">
CompositeCandidate(Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0, bool integerCharge=true, std::string name=&quot;&quot;);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return=""
                             args="['Charge','const PolarLorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0','bool=true','std::string=&quot;&quot;']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge','name']"
                             qual="">
CompositeCandidate(Charge q, const PolarLorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0, bool integerCharge=true, std::string name=&quot;&quot;);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return="explicit"
                             args="['const Particle&amp;','const std::string&amp;=&quot;&quot;']"
                             vars="['p','name']"
                             qual="">
explicit CompositeCandidate(const Particle&amp; p, const std::string&amp; name=&quot;&quot;);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return="explicit"
                             args="['const Candidate&amp;','const std::string&amp;=&quot;&quot;']"
                             vars="['p','name']"
                             qual="">
explicit CompositeCandidate(const Candidate&amp; p, const std::string&amp; name=&quot;&quot;);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeCandidate"
                             return="explicit"
                             args="['const Candidate&amp;','const std::string&amp;','role_collection const&amp;']"
                             vars="['p','name','roles']"
                             qual="">
explicit CompositeCandidate(const Candidate&amp; p, const std::string&amp; name, role_collection const&amp; roles);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~CompositeCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CompositeCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="name"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string name() const;
                    <comment>
        get the name of the candidate
                    </comment>
                </method1>

                <method1 name="setName"
                         return="void"
                         args="['std::string']"
                         vars="['name']"
                         qual="">
void setName(std::string name);
                    <comment>
        set the name of the candidate
                    </comment>
                </method1>

                <method1 name="roles"
                         return="role_collection const&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
role_collection const&amp; roles() const;
                    <comment>
        get the roles
                    </comment>
                </method1>

                <method1 name="setRoles"
                         return="void"
                         args="['const role_collection&amp;']"
                         vars="['roles']"
                         qual="">
void setRoles(const role_collection&amp; roles);
                    <comment>
        set the roles
                    </comment>
                </method1>

                <method1 name="clone"
                         return="virtual CompositeCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CompositeCandidate* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator begin() const;
                    <comment>
        first daughter const_iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator end() const;
                    <comment>
        last daughter const_iterator
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator begin();
                    <comment>
        first daughter iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator end();
                    <comment>
        last daughter const_iterator
                    </comment>
                </method1>

                <method1 name="numberOfDaughters"
                         return="virtual size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_type numberOfDaughters() const;
                    <comment>
        number of daughters
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['']"
                         qual="const">
virtual const Candidate* daughter(size_type) const;
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1 (read only mode)
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['size_type']"
                         vars="['']"
                         qual="">
virtual Candidate* daughter(size_type);
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="">
virtual Candidate* daughter(const std::string&amp; s);
                    <comment>
       Get candidate based on role
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['const std::string&amp;']"
                         vars="['s']"
                         qual="const">
virtual const Candidate* daughter(const std::string&amp; s) const;
                </method1>

                <method1 name="addDaughter"
                         return="void"
                         args="['const Candidate&amp;','const std::string&amp;=&quot;&quot;']"
                         vars="['','s']"
                         qual="">
void addDaughter(const Candidate&amp;, const std::string&amp; s=&quot;&quot;);
                    <comment>
        add a clone of the passed candidate as daughter
                    </comment>
                </method1>

                <method2 name="addDaughter"
                         return="void"
                         args="['std::auto_ptr&lt;Candidate&gt;','const std::string&amp;=&quot;&quot;']"
                         vars="['','s']"
                         qual="">
void addDaughter(std::auto_ptr&lt;Candidate&gt;, const std::string&amp; s=&quot;&quot;);
                    <comment>
        add a clone of the passed candidate as daughter
                    </comment>
                </method2>

                <method1 name="clearDaughters"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearDaughters();
                    <comment>
        clear daughters
                    </comment>
                </method1>

                <method1 name="clearRoles"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearRoles();
                    <comment>
       clear roles
                    </comment>
                </method1>

                <method1 name="applyRoles"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void applyRoles();
                    <comment>
       Apply the roles to the objects
                    </comment>
                </method1>

                <method1 name="numberOfMothers"
                         return="virtual size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_type numberOfMothers() const;
                    <comment>
        number of mothers (zero or one in most of but not all the cases)
                    </comment>
                </method1>

                <method1 name="mother"
                         return="virtual const Candidate*"
                         args="['size_type=0']"
                         vars="['i']"
                         qual="const">
virtual const Candidate* mother(size_type i=0) const;
                    <comment>
        return pointer to mother
                    </comment>
                </method1>

            </section>

            <typemap name="daughters"
                     value="CandidateCollection"
                     type="typedef"/>
            <typemap name="role_collection"
                     value="std::vector&lt;std::string&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Candidate"/>
    <type name="Candidate*"/>
    <type name="Charge"/>
    <type name="CompositeCandidate*"/>
    <type name="bool"/>
    <type name="const Candidate&amp;"/>
    <type name="const Candidate*"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Particle&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="const role_collection&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="const_iterator"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="reco::CompositeCandidate"/>
    <type name="role_collection const&amp;"/>
    <type name="size_type"/>
    <type name="std::auto_ptr&lt;Candidate&gt;"/>
    <type name="std::string"/>
    <type name="void"/>
</header>
