<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CandidateWithRef.xml
  Created:  Thu Jan 14 22:46:39 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/CandidateWithRef.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Candidate/interface/CandidateWithRef.h">

    <include name="&quot;DataFormats/CaloRecHit/interface/CaloRecHit.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>

    <namespace name="reco">

        <class name="CandidateWithRef"
               fullname="reco::CandidateWithRef&lt;Ref&gt;"
               module="DataFormats.Candidate"
               project=""
               type="template"
               template="template&lt;typename Ref&gt;">
            <baseclass name="public LeafCandidate"/>

            <section name="public">
                <typedef name="reference"
                         value="Ref">
typedef Ref reference;
                </typedef>

                <constructor name="CandidateWithRef"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CandidateWithRef();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="CandidateWithRef"
                             return=""
                             args="['const LorentzVector&amp;','Charge=0','const Point&amp;=Point(0, 0, 0)']"
                             vars="['p4','q','vtx']"
                             qual="">
CandidateWithRef(const LorentzVector&amp; p4, Charge q=0, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~CandidateWithRef"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CandidateWithRef();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual CandidateWithRef*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CandidateWithRef* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="setRef"
                         return="void"
                         args="['const Ref&amp;']"
                         vars="['r']"
                         qual="">
void setRef(const Ref&amp; r);
                    <comment>
        set reference
                    </comment>
                </method1>

                <method1 name="ref"
                         return="reference"
                         args="['void']"
                         vars="['']"
                         qual="const">
reference ref() const;
                    <comment>
        reference
                    </comment>
                </method1>

            </section>

            <typemap name="reference"
                     value="Ref"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="CandidateWithRef*"/>
    <type name="Charge"/>
    <type name="LeafCandidate"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="reco::CandidateWithRef&lt;Ref&gt;"/>
    <type name="reference"/>
    <type name="void"/>
</header>
