<?xml version="1.0"?>
<!--
==============================================================================
  XML File: const_iterator_imp.xml
  Created:  Fri Jan 15 20:46:14 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/const_iterator_imp.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Candidate/interface/const_iterator_imp.h">


    <namespace name="reco">
        <comment>
   \class reco::candidate::const_iterator_imp

   \author Luca Lista, INFN
        </comment>

        <namespace name="candidate">

            <class name="const_iterator_imp"
                   fullname="reco::candidate::const_iterator_imp"
                   module="DataFormats.Candidate"
                   project=""
                   type="abstract regular struct">

                <section>
                    <typedef name="difference_type"
                             value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                    </typedef>

                    <constructor name="const_iterator_imp"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
const_iterator_imp();
                    </constructor>

                    <destructor name="~const_iterator_imp"
                                return="virtual"
                                args="['void']"
                                vars="['']"
                                qual="">
virtual ~const_iterator_imp();
                    </destructor>

                    <method1 name="clone"
                             return="virtual const_iterator_imp*"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual const_iterator_imp* clone() const=0;
                    </method1>

                    <method1 name="increase"
                             return="virtual void"
                             args="['void']"
                             vars="['']"
                             qual="= 0">
virtual void increase()=0;
                    </method1>

                    <method1 name="decrease"
                             return="virtual void"
                             args="['void']"
                             vars="['']"
                             qual="= 0">
virtual void decrease()=0;
                    </method1>

                    <method1 name="increase"
                             return="virtual void"
                             args="['difference_type']"
                             vars="['d']"
                             qual="= 0">
virtual void increase(difference_type d)=0;
                    </method1>

                    <method1 name="decrease"
                             return="virtual void"
                             args="['difference_type']"
                             vars="['d']"
                             qual="= 0">
virtual void decrease(difference_type d)=0;
                    </method1>

                    <method1 name="equal_to"
                             return="virtual bool"
                             args="['const const_iterator_imp*']"
                             vars="['']"
                             qual="const = 0">
virtual bool equal_to(const const_iterator_imp*) const=0;
                    </method1>

                    <method1 name="less_than"
                             return="virtual bool"
                             args="['const const_iterator_imp*']"
                             vars="['']"
                             qual="const = 0">
virtual bool less_than(const const_iterator_imp*) const=0;
                    </method1>

                    <method1 name="assign"
                             return="virtual void"
                             args="['const const_iterator_imp*']"
                             vars="['']"
                             qual="= 0">
virtual void assign(const const_iterator_imp*)=0;
                    </method1>

                    <method1 name="deref"
                             return="virtual const Candidate&amp;"
                             args="['void']"
                             vars="['']"
                             qual="const = 0">
virtual const Candidate&amp; deref() const=0;
                    </method1>

                    <method1 name="difference"
                             return="virtual difference_type"
                             args="['const const_iterator_imp*']"
                             vars="['']"
                             qual="const = 0">
virtual difference_type difference(const const_iterator_imp*) const=0;
                    </method1>

                </section>

                <typemap name="difference_type"
                         value="ptrdiff_t"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <type name="bool"/>
    <type name="const Candidate&amp;"/>
    <type name="const const_iterator_imp*"/>
    <type name="const_iterator_imp*"/>
    <type name="difference_type"/>
    <type name="reco::candidate::const_iterator_imp"/>
    <type name="void"/>
</header>
