<?xml version="1.0"?>
<!--
==============================================================================
  XML File: iterator.xml
  Created:  Fri Jan 15 20:46:15 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/iterator.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Candidate/interface/iterator.h">

    <include name="&quot;DataFormats/Candidate/interface/CandidateFwd.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator_imp.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/const_iterator.h&quot;"/>

    <namespace name="reco">

        <namespace name="candidate">

            <class name="iterator"
                   fullname="reco::candidate::iterator"
                   module="DataFormats.Candidate"
                   project=""
                   type="regular struct">

                <section>
                    <typedef name="value_type"
                             value="Candidate">
typedef Candidate value_type;
                    </typedef>

                    <typedef name="pointer"
                             value="Candidate*">
typedef Candidate* pointer;
                    </typedef>

                    <typedef name="reference"
                             value="Candidate&amp;">
typedef Candidate&amp; reference;
                    </typedef>

                    <typedef name="difference_type"
                             value="ptrdiff_t">
typedef ptrdiff_t difference_type;
                    </typedef>

                    <typedef name="iterator_category"
                             value="std::vector&lt;int&gt;::iterator::iterator_category">
typedef std::vector&lt;int&gt;::iterator::iterator_category iterator_category;
                    </typedef>

                    <constructor name="iterator"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
iterator();
                    </constructor>

                    <constructor name="iterator"
                                 return=""
                                 args="['iterator_imp*']"
                                 vars="['it']"
                                 qual="">
iterator(iterator_imp* it);
                    </constructor>

                    <copyconstructor name="iterator"
                                     return=""
                                     args="['const iterator&amp;']"
                                     vars="['it']"
                                     qual="">
iterator(const iterator&amp; it);
                    </copyconstructor>

                    <destructor name="~iterator"
                                return=""
                                args="['void']"
                                vars="['']"
                                qual="">
~iterator();
                    </destructor>

                    <operator name="operator="
                              return="iterator&amp;"
                              args="['const iterator&amp;']"
                              vars="['it']"
                              qual="">
iterator&amp; operator=(const iterator&amp; it);
                    </operator>

                    <operator name="operator++"
                              return="iterator&amp;"
                              args="['void']"
                              vars="['']"
                              qual="">
iterator&amp; operator++();
                    </operator>

                    <operator name="operator++"
                              return="iterator"
                              args="['int']"
                              vars="['']"
                              qual="">
iterator operator++(int);
                    </operator>

                    <operator name="operator--"
                              return="iterator&amp;"
                              args="['void']"
                              vars="['']"
                              qual="">
iterator&amp; operator--();
                    </operator>

                    <operator name="operator--"
                              return="iterator"
                              args="['int']"
                              vars="['']"
                              qual="">
iterator operator--(int);
                    </operator>

                    <operator name="operator-"
                              return="difference_type"
                              args="['const iterator&amp;']"
                              vars="['o']"
                              qual="const">
difference_type operator-(const iterator&amp; o) const;
                    </operator>

                    <operator name="operator+"
                              return="iterator"
                              args="['difference_type']"
                              vars="['n']"
                              qual="const">
iterator operator+(difference_type n) const;
                    </operator>

                    <operator name="operator-"
                              return="iterator"
                              args="['difference_type']"
                              vars="['n']"
                              qual="const">
iterator operator-(difference_type n) const;
                    </operator>

                    <operator name="operator&lt;"
                              return="bool"
                              args="['const iterator&amp;']"
                              vars="['o']"
                              qual="">
bool operator&lt;(const iterator&amp; o);
                    </operator>

                    <operator name="operator=="
                              return="bool"
                              args="['const iterator&amp;']"
                              vars="['ci']"
                              qual="const">
bool operator==(const iterator&amp; ci) const;
                    </operator>

                    <operator name="operator!="
                              return="bool"
                              args="['const iterator&amp;']"
                              vars="['ci']"
                              qual="const">
bool operator!=(const iterator&amp; ci) const;
                    </operator>

                    <operator name="operator*"
                              return="Candidate&amp;"
                              args="['void']"
                              vars="['']"
                              qual="const">
Candidate&amp; operator*() const;
                    </operator>

                    <operator name="operator-&gt;"
                              return="Candidate*"
                              args="['void']"
                              vars="['']"
                              qual="const">
Candidate* operator-&gt;() const;
                    </operator>

                    <operator name="operator+="
                              return="iterator&amp;"
                              args="['difference_type']"
                              vars="['d']"
                              qual="">
iterator&amp; operator+=(difference_type d);
                    </operator>

                    <operator name="operator-="
                              return="iterator&amp;"
                              args="['difference_type']"
                              vars="['d']"
                              qual="">
iterator&amp; operator-=(difference_type d);
                    </operator>

                </section>

                <typemap name="difference_type"
                         value="ptrdiff_t"
                         type="typedef"/>
                <typemap name="iterator_category"
                         value="std::vector&lt;int&gt;::iterator::iterator_category"
                         type="typedef"/>
                <typemap name="pointer"
                         value="Candidate*"
                         type="typedef"/>
                <typemap name="reference"
                         value="Candidate&amp;"
                         type="typedef"/>
                <typemap name="value_type"
                         value="Candidate"
                         type="typedef"/>

            </class>
        </namespace>
    </namespace>

    <type name="Candidate&amp;"/>
    <type name="Candidate*"/>
    <type name="bool"/>
    <type name="const iterator&amp;"/>
    <type name="difference_type"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="iterator&amp;"/>
    <type name="iterator_imp*"/>
    <type name="reco::candidate::iterator"/>
    <type name="void"/>
</header>
