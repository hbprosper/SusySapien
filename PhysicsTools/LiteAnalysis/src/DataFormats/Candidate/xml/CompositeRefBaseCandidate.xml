<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CompositeRefBaseCandidate.xml
  Created:  Thu Jan 14 22:46:41 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/CompositeRefBaseCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Candidate/interface/CompositeRefBaseCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/Candidate.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator_imp_specific.h&quot;"/>

    <namespace name="reco">

        <class name="CompositeRefBaseCandidate"
               fullname="reco::CompositeRefBaseCandidate"
               module="DataFormats.Candidate"
               project=""
               type="regular">
            <baseclass name="public Candidate"/>

            <section name="public">
                <typedef name="daughters"
                         value="std::vector&lt;CandidateBaseRef&gt;">
typedef std::vector&lt;CandidateBaseRef&gt; daughters;
                    <comment>
        collection of references to daughters
                    </comment>
                </typedef>

                <constructor name="CompositeRefBaseCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CompositeRefBaseCandidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="CompositeRefBaseCandidate"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0','bool=true']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
CompositeRefBaseCandidate(Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0, bool integerCharge=true);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeRefBaseCandidate"
                             return=""
                             args="['Charge','const PolarLorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0','bool=true']"
                             vars="['q','p4','vtx','pdgId','status','integerCharge']"
                             qual="">
CompositeRefBaseCandidate(Charge q, const PolarLorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0, bool integerCharge=true);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CompositeRefBaseCandidate"
                             return="explicit"
                             args="['const Particle&amp;']"
                             vars="['p']"
                             qual="">
explicit CompositeRefBaseCandidate(const Particle&amp; p);
                    <comment>
        constructor from a particle
                    </comment>
                </constructor>

                <destructor name="~CompositeRefBaseCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CompositeRefBaseCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual CompositeRefBaseCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CompositeRefBaseCandidate* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator begin() const;
                    <comment>
        first daughter const_iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator end() const;
                    <comment>
        last daughter const_iterator
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator begin();
                    <comment>
        first daughter iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator end();
                    <comment>
        last daughter iterator
                    </comment>
                </method1>

                <method1 name="numberOfDaughters"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfDaughters() const;
                    <comment>
        number of daughters
                    </comment>
                </method1>

                <method1 name="numberOfMothers"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfMothers() const;
                    <comment>
        number of mothers
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['']"
                         qual="const">
virtual const Candidate* daughter(size_type) const;
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1 (read only mode)
                    </comment>
                </method1>

                <method1 name="mother"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['']"
                         qual="const">
virtual const Candidate* mother(size_type) const;
                    <comment>
        return mother at a given position, i = 0, ... numberOfMothers() - 1 (read only mode)
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['size_type']"
                         vars="['']"
                         qual="">
virtual Candidate* daughter(size_type);
                    <comment>
        return daughter at a given position, i = 0, ... numberOfDaughters() - 1
                    </comment>
                </method1>

                <method1 name="addDaughter"
                         return="void"
                         args="['const CandidateBaseRef&amp;']"
                         vars="['']"
                         qual="">
void addDaughter(const CandidateBaseRef&amp;);
                    <comment>
        add a daughter via a reference
                    </comment>
                </method1>

                <method1 name="clearDaughters"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void clearDaughters();
                    <comment>
        clear daughter references
                    </comment>
                </method1>

                <method1 name="daughterRef"
                         return="CandidateBaseRef"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
CandidateBaseRef daughterRef(size_type i) const;
                    <comment>
        reference to daughter at given position
                    </comment>
                </method1>

            </section>

            <typemap name="daughters"
                     value="std::vector&lt;CandidateBaseRef&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Candidate"/>
    <type name="Candidate*"/>
    <type name="CandidateBaseRef"/>
    <type name="Charge"/>
    <type name="CompositeRefBaseCandidate*"/>
    <type name="bool"/>
    <type name="const Candidate*"/>
    <type name="const CandidateBaseRef&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Particle&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="const_iterator"/>
    <type name="int"/>
    <type name="iterator"/>
    <type name="reco::CompositeRefBaseCandidate"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="void"/>
</header>
