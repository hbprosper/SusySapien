<?xml version="1.0"?>
<!--
==============================================================================
  XML File: iterator_deref.xml
  Created:  Thu Jan 14 22:46:48 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/iterator_deref.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/Candidate/interface/iterator_deref.h">

    <include name="&quot;DataFormats/Common/interface/OwnVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ptr.h&quot;"/>
    <include name="&lt;boost/static_assert.hpp&gt;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="reco">

        <namespace name="candidate">

            <class name="iterator_deref"
                   fullname="reco::candidate::iterator_deref&lt;C&gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="template struct"
                   template="template&lt;typename C&gt;">

                <section>
                    <constructor name="BOOST_STATIC_ASSERT"
                                 return=""
                                 args="['sizeof== 0']"
                                 vars="['(C)']"
                                 qual="">
BOOST_STATIC_ASSERT(sizeof(C)== 0);
                    </constructor>

                </section>

            </class>

            <class name="iterator_deref&lt;std::vector&lt;T&gt; &gt;"
                   fullname="reco::candidate::iterator_deref&lt;std::vector&lt;T&gt; &gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <method2 name="deref"
                             return="static const Candidate&amp;"
                             args="['const typename std::vector&lt;T&gt;::const_iterator&amp;']"
                             vars="['i']"
                             qual="">
static const Candidate&amp; deref(const typename std::vector&lt;T&gt;::const_iterator&amp; i);
                    </method2>

                </section>

            </class>

            <class name="iterator_deref&lt;edm::OwnVector&lt;T&gt; &gt;"
                   fullname="reco::candidate::iterator_deref&lt;edm::OwnVector&lt;T&gt; &gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <method2 name="deref"
                             return="static const Candidate&amp;"
                             args="['const typename edm::OwnVector&lt;T&gt;::const_iterator&amp;']"
                             vars="['i']"
                             qual="">
static const Candidate&amp; deref(const typename edm::OwnVector&lt;T&gt;::const_iterator&amp; i);
                    </method2>

                </section>

            </class>

            <class name="iterator_deref&lt;edm::RefVector&lt;C&gt; &gt;"
                   fullname="reco::candidate::iterator_deref&lt;edm::RefVector&lt;C&gt; &gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename C&gt;">

                <section>
                    <method2 name="deref"
                             return="static const Candidate&amp;"
                             args="['const typename edm::RefVector&lt;C&gt;::const_iterator&amp;']"
                             vars="['i']"
                             qual="">
static const Candidate&amp; deref(const typename edm::RefVector&lt;C&gt;::const_iterator&amp; i);
                    </method2>

                </section>

            </class>

            <class name="iterator_deref&lt;std::vector&lt;edm::RefToBase&lt;T&gt; &gt; &gt;"
                   fullname="reco::candidate::iterator_deref&lt;std::vector&lt;edm::RefToBase&lt;T&gt; &gt; &gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <method2 name="deref"
                             return="static const Candidate&amp;"
                             args="['const typename std::vector&lt;edm::RefToBase&lt;T&gt; &gt;::const_iterator&amp;']"
                             vars="['i']"
                             qual="">
static const Candidate&amp; deref(const typename std::vector&lt;edm::RefToBase&lt;T&gt; &gt;::const_iterator&amp; i);
                    </method2>

                </section>

            </class>

            <class name="iterator_deref&lt;std::vector&lt;edm::Ptr&lt;T&gt; &gt; &gt;"
                   fullname="reco::candidate::iterator_deref&lt;std::vector&lt;edm::Ptr&lt;T&gt; &gt; &gt;"
                   module="DataFormats.Candidate"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename T&gt;">

                <section>
                    <method2 name="deref"
                             return="static const Candidate&amp;"
                             args="['const typename std::vector&lt;edm::Ptr&lt;T&gt; &gt;::const_iterator&amp;']"
                             vars="['i']"
                             qual="">
static const Candidate&amp; deref(const typename std::vector&lt;edm::Ptr&lt;T&gt; &gt;::const_iterator&amp; i);
                    </method2>

                </section>

            </class>
        </namespace>
    </namespace>

    <type name="const Candidate&amp;"/>
    <type name="const typename edm::OwnVector&lt;T&gt;::const_iterator&amp;"/>
    <type name="const typename edm::RefVector&lt;C&gt;::const_iterator&amp;"/>
    <type name="const typename std::vector&lt;T&gt;::const_iterator&amp;"/>
    <type name="const typename std::vector&lt;edm::Ptr&lt;T&gt; &gt;::const_iterator&amp;"/>
    <type name="const typename std::vector&lt;edm::RefToBase&lt;T&gt; &gt;::const_iterator&amp;"/>
    <type name="reco::candidate::iterator_deref&lt;C&gt;"/>
    <type name="reco::candidate::iterator_deref&lt;edm::OwnVector&lt;T&gt; &gt;"/>
    <type name="reco::candidate::iterator_deref&lt;edm::RefVector&lt;C&gt; &gt;"/>
    <type name="reco::candidate::iterator_deref&lt;std::vector&lt;T&gt; &gt;"/>
    <type name="reco::candidate::iterator_deref&lt;std::vector&lt;edm::Ptr&lt;T&gt; &gt; &gt;"/>
    <type name="reco::candidate::iterator_deref&lt;std::vector&lt;edm::RefToBase&lt;T&gt; &gt; &gt;"/>
    <type name="sizeof"/>
</header>
