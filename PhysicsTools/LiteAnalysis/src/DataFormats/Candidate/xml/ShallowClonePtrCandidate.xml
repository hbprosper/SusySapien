<?xml version="1.0"?>
<!--
==============================================================================
  XML File: ShallowClonePtrCandidate.xml
  Created:  Fri Jan 15 20:46:12 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/Candidate/interface/ShallowClonePtrCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/Candidate/interface/ShallowClonePtrCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/LeafCandidate.h&quot;"/>
    <include name="&quot;DataFormats/Candidate/interface/iterator_imp_specific.h&quot;"/>

    <namespace name="reco">

        <class name="ShallowClonePtrCandidate"
               fullname="reco::ShallowClonePtrCandidate"
               module="DataFormats.Candidate"
               project=""
               type="regular">
            <baseclass name="public LeafCandidate"/>

            <section name="public">
                <typedef name="daughters"
                         value="CandidateCollection">
typedef CandidateCollection daughters;
                    <comment>
        collection of daughter candidates
                    </comment>
                </typedef>

                <constructor name="ShallowClonePtrCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
ShallowClonePtrCandidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="ShallowClonePtrCandidate"
                             return="explicit"
                             args="['const CandidatePtr&amp;']"
                             vars="['masterClone']"
                             qual="">
explicit ShallowClonePtrCandidate(const CandidatePtr&amp; masterClone);
                    <comment>
        constructor from Particle
                    </comment>
                </constructor>

                <constructor name="ShallowClonePtrCandidate"
                             return=""
                             args="['const CandidatePtr&amp;','Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)']"
                             vars="['masterClone','q','p4','vtx']"
                             qual="">
ShallowClonePtrCandidate(const CandidatePtr&amp; masterClone, Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="ShallowClonePtrCandidate"
                             return=""
                             args="['const CandidatePtr&amp;','Charge','const PolarLorentzVector&amp;','const Point&amp;=Point(0, 0, 0)']"
                             vars="['masterClone','q','p4','vtx']"
                             qual="">
ShallowClonePtrCandidate(const CandidatePtr&amp; masterClone, Charge q, const PolarLorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~ShallowClonePtrCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~ShallowClonePtrCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual ShallowClonePtrCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual ShallowClonePtrCandidate* clone() const;
                    <comment>
        returns a clone of the Candidate object
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator begin() const;
                    <comment>
        first daughter const_iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const_iterator end() const;
                    <comment>
        last daughter const_iterator
                    </comment>
                </method1>

                <method1 name="begin"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator begin();
                    <comment>
        first daughter iterator
                    </comment>
                </method1>

                <method1 name="end"
                         return="virtual iterator"
                         args="['void']"
                         vars="['']"
                         qual="">
virtual iterator end();
                    <comment>
        last daughter iterator
                    </comment>
                </method1>

                <method1 name="numberOfDaughters"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfDaughters() const;
                    <comment>
        number of daughters
                    </comment>
                </method1>

                <method1 name="numberOfMothers"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfMothers() const;
                    <comment>
        number of mothers
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
virtual const Candidate* daughter(size_type i) const;
                    <comment>
        return daughter at a given position (throws an exception)
                    </comment>
                </method1>

                <method1 name="mother"
                         return="virtual const Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="const">
virtual const Candidate* mother(size_type i) const;
                    <comment>
        return mother at a given position (throws an exception)
                    </comment>
                </method1>

                <method1 name="daughter"
                         return="virtual Candidate*"
                         args="['size_type']"
                         vars="['i']"
                         qual="">
virtual Candidate* daughter(size_type i);
                    <comment>
        return daughter at a given position (throws an exception)
                    </comment>
                </method1>

                <method1 name="hasMasterClonePtr"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool hasMasterClonePtr() const;
                    <comment>
        has master clone pointer
                    </comment>
                </method1>

                <method1 name="masterClonePtr"
                         return="virtual const CandidatePtr&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual const CandidatePtr&amp; masterClonePtr() const;
                    <comment>
        returns reference to master clone pointer
                    </comment>
                </method1>

                <method1 name="isElectron"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isElectron() const;
                </method1>

                <method1 name="isMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isMuon() const;
                </method1>

                <method1 name="isGlobalMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isGlobalMuon() const;
                </method1>

                <method1 name="isStandAloneMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isStandAloneMuon() const;
                </method1>

                <method1 name="isTrackerMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isTrackerMuon() const;
                </method1>

                <method1 name="isCaloMuon"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isCaloMuon() const;
                </method1>

                <method1 name="isPhoton"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isPhoton() const;
                </method1>

                <method1 name="isConvertedPhoton"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isConvertedPhoton() const;
                </method1>

                <method1 name="isJet"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isJet() const;
                </method1>

            </section>

            <typemap name="daughters"
                     value="CandidateCollection"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Candidate*"/>
    <type name="Charge"/>
    <type name="LeafCandidate"/>
    <type name="ShallowClonePtrCandidate*"/>
    <type name="bool"/>
    <type name="const Candidate*"/>
    <type name="const CandidatePtr&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="const_iterator"/>
    <type name="iterator"/>
    <type name="reco::ShallowClonePtrCandidate"/>
    <type name="size_t"/>
    <type name="size_type"/>
    <type name="void"/>
</header>
