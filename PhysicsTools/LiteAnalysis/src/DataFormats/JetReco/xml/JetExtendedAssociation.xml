<?xml version="1.0"?>
<!--
==============================================================================
  XML File: JetExtendedAssociation.xml
  Created:  Thu Jan 14 22:47:16 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/JetReco/interface/JetExtendedAssociation.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/JetReco/interface/JetExtendedAssociation.h">

    <include name="&quot;DataFormats/Common/interface/AssociationVector.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/JetCollection.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>

    <namespace name="fwlite">
        <forward name="Event"/>
    </namespace>

    <namespace name="reco">

        <namespace name="JetExtendedAssociation">
            <forward name="JetExtendedData"/>
            <typedef name="LorentzVector"
                     value="math::PtEtaPhiELorentzVectorF">
typedef math::PtEtaPhiELorentzVectorF LorentzVector;
            </typedef>

            <typedef name="Value"
                     value="reco::JetExtendedAssociation::JetExtendedData">
typedef reco::JetExtendedAssociation::JetExtendedData Value;
            </typedef>

            <typedef name="Values"
                     value="std::vector&lt;Value&gt;">
typedef std::vector&lt;Value&gt; Values;
            </typedef>

            <typedef name="Container"
                     value="edm::AssociationVector&lt;reco::JetRefBaseProd, Values&gt;">
typedef edm::AssociationVector&lt;reco::JetRefBaseProd, Values&gt; Container;
            </typedef>

            <typedef name="value_type"
                     value="Container::value_type">
typedef Container::value_type value_type;
            </typedef>

            <typedef name="transient_vector_type"
                     value="Container::transient_vector_type">
typedef Container::transient_vector_type transient_vector_type;
            </typedef>

            <typedef name="Ref"
                     value="edm::Ref&lt;Container&gt;">
typedef edm::Ref&lt;Container&gt; Ref;
            </typedef>

            <typedef name="RefProd"
                     value="edm::RefProd&lt;Container&gt;">
typedef edm::RefProd&lt;Container&gt; RefProd;
            </typedef>

            <typedef name="RefVector"
                     value="edm::RefVector&lt;Container&gt;">
typedef edm::RefVector&lt;Container&gt; RefVector;
            </typedef>

            <function1 name="tracksAtVertexNumber"
                       return="int"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
int tracksAtVertexNumber (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        Number of tracks associated in the vertex
                </comment>
            </function1>

            <function1 name="tracksAtVertexNumber"
                       return="int"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
int tracksAtVertexNumber (const Container&amp;, const reco::Jet&amp;);
                <comment>
        Number of tracks associated in the vertex
                </comment>
            </function1>

            <function1 name="tracksAtVertexP4"
                       return="const LorentzVector&amp;"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
const LorentzVector&amp; tracksAtVertexP4 (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        p4 of tracks associated in the vertex
                </comment>
            </function1>

            <function1 name="tracksAtVertexP4"
                       return="const LorentzVector&amp;"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
const LorentzVector&amp; tracksAtVertexP4 (const Container&amp;, const reco::Jet&amp;);
            </function1>

            <function1 name="tracksAtCaloNumber"
                       return="int"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
int tracksAtCaloNumber (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        Number of tracks associated at calo face
                </comment>
            </function1>

            <function1 name="tracksAtCaloNumber"
                       return="int"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
int tracksAtCaloNumber (const Container&amp;, const reco::Jet&amp;);
                <comment>
        Number of tracks associated at calo face
                </comment>
            </function1>

            <function1 name="tracksAtCaloP4"
                       return="const LorentzVector&amp;"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
const LorentzVector&amp; tracksAtCaloP4 (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        p4 of tracks associated at calo face
                </comment>
            </function1>

            <function1 name="tracksAtCaloP4"
                       return="const LorentzVector&amp;"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
const LorentzVector&amp; tracksAtCaloP4 (const Container&amp;, const reco::Jet&amp;);
                <comment>
        p4 of tracks associated at calo face
                </comment>
            </function1>

            <function1 name="setValue"
                       return="bool"
                       args="['Container&amp;','const reco::JetBaseRef&amp;','const JetExtendedData&amp;']"
                       vars="['','','']"
                       qual="">
bool setValue (Container&amp;, const reco::JetBaseRef&amp;, const JetExtendedData&amp;);
                <comment>
        associate jet with value. Returns false and associate nothing if jet is already associated
                </comment>
            </function1>

            <function1 name="setValue"
                       return="bool"
                       args="['Container*','const reco::JetBaseRef&amp;','const JetExtendedData&amp;']"
                       vars="['','','']"
                       qual="">
bool setValue (Container*, const reco::JetBaseRef&amp;, const JetExtendedData&amp;);
                <comment>
        associate jet with value. Returns false and associate nothing if jet is already associated
                </comment>
            </function1>

            <function1 name="getValue"
                       return="const JetExtendedData&amp;"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
const JetExtendedData&amp; getValue (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        get value for the association. Throw exception if no association found
                </comment>
            </function1>

            <function1 name="getValue"
                       return="const JetExtendedData&amp;"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
const JetExtendedData&amp; getValue (const Container&amp;, const reco::Jet&amp;);
                <comment>
        get value for the association. Throw exception if no association found
                </comment>
            </function1>

            <function2 name="allJets"
                       return="std::vector&lt;reco::JetBaseRef &gt;"
                       args="['const Container&amp;']"
                       vars="['']"
                       qual="">
std::vector&lt;reco::JetBaseRef &gt; allJets (const Container&amp;);
                <comment>
        fill list of all jets associated with values. Return # of jets in the list
                </comment>
            </function2>

            <function1 name="hasJet"
                       return="bool"
                       args="['const Container&amp;','const reco::JetBaseRef&amp;']"
                       vars="['','']"
                       qual="">
bool hasJet (const Container&amp;, const reco::JetBaseRef&amp;);
                <comment>
        check if jet is associated
                </comment>
            </function1>

            <function1 name="hasJet"
                       return="bool"
                       args="['const Container&amp;','const reco::Jet&amp;']"
                       vars="['','']"
                       qual="">
bool hasJet (const Container&amp;, const reco::Jet&amp;);
                <comment>
        check if jet is associated
                </comment>
            </function1>


            <class name="JetExtendedData"
                   fullname="reco::JetExtendedAssociation::JetExtendedData"
                   module="DataFormats.JetReco"
                   project=""
                   type="regular">

                <section name="public">
                    <constructor name="JetExtendedData"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
JetExtendedData ();
                    </constructor>

                    <destructor name="~JetExtendedData"
                                return=""
                                args="['void']"
                                vars="['']"
                                qual="">
~JetExtendedData ();
                    </destructor>

                    <member>
int mTracksAtVertexNumber;
                    </member>

                    <member>
LorentzVector mTracksAtVertexP4;
                    </member>

                    <member>
int mTracksAtCaloNumber;
                    </member>

                    <member>
LorentzVector mTracksAtCaloP4;
                    </member>

                </section>

                <typemap name="mTracksAtCaloNumber"
                         value="reco::JetExtendedAssociation::JetExtendedData::mTracksAtCaloNumber"
                         type="member"/>
                <typemap name="mTracksAtCaloP4"
                         value="reco::JetExtendedAssociation::JetExtendedData::mTracksAtCaloP4"
                         type="member"/>
                <typemap name="mTracksAtVertexNumber"
                         value="reco::JetExtendedAssociation::JetExtendedData::mTracksAtVertexNumber"
                         type="member"/>
                <typemap name="mTracksAtVertexP4"
                         value="reco::JetExtendedAssociation::JetExtendedData::mTracksAtVertexP4"
                         type="member"/>

            </class>
        </namespace>
    </namespace>

    <type name="LorentzVector"/>
    <type name="int"/>
    <type name="reco::JetExtendedAssociation::JetExtendedData"/>
    <type name="void"/>
</header>
