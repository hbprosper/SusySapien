<?xml version="1.0"?>
<!--
==============================================================================
  XML File: JetTrackMatch.xml
  Created:  Thu Jan 14 22:47:17 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/JetReco/interface/JetTrackMatch.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/JetReco/interface/JetTrackMatch.h">

    <include name="&quot;DataFormats/Common/interface/AssociationMap.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/Track.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>

    <namespace name="reco">

        <class name="JetTrackMatch"
               fullname="reco::JetTrackMatch&lt;JetC&gt;"
               module="DataFormats.JetReco"
               project=""
               type="template"
               template="template&lt;typename JetC&gt;">

            <section name="public">
                <typedef name="JetRef"
                         value="edm::Ref&lt;JetC&gt;">
typedef edm::Ref&lt;JetC&gt; JetRef;
                </typedef>

                <typedef name="TrackRef"
                         value="edm::Ref&lt;reco::TrackCollection&gt;">
typedef edm::Ref&lt;reco::TrackCollection&gt; TrackRef;
                </typedef>

                <typedef name="Map"
                         value="edm::AssociationMap&lt;edm::OneToMany&lt;JetC, reco::TrackCollection&gt; &gt;">
typedef edm::AssociationMap&lt;edm::OneToMany&lt;JetC, reco::TrackCollection&gt; &gt; Map;
                </typedef>

            </section>
            <section name="public">
                <constructor name="JetTrackMatch"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
JetTrackMatch ();
                </constructor>

                <destructor name="~JetTrackMatch"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~JetTrackMatch ();
                </destructor>

                <method1 name="insert"
                         return="void"
                         args="['const JetRef&amp;']"
                         vars="['fJet']"
                         qual="">
void insert (const JetRef&amp; fJet);
                    <comment>
        insert orphan jet
                    </comment>
                </method1>

                <method1 name="insert"
                         return="void"
                         args="['const JetRef&amp;','const TrackRef&amp;']"
                         vars="['fJet','fTrack']"
                         qual="">
void insert (const JetRef&amp; fJet, const TrackRef&amp; fTrack);
                    <comment>
        assign track to jet.
                    </comment>
                </method1>

                <method2 name="allJets"
                         return="std::vector&lt;JetRef&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;JetRef&gt; allJets () const;
                    <comment>
        get list of all jats in the map
                    </comment>
                </method2>

                <method2 name="getTracks"
                         return="std::vector&lt;TrackRef&gt;"
                         args="['const JetRef&amp;']"
                         vars="['mJet']"
                         qual="const">
std::vector&lt;TrackRef&gt; getTracks (const JetRef&amp; mJet) const;
                    <comment>
        get all tracks associated with jet
                    </comment>
                </method2>

            </section>

            <typemap name="JetRef"
                     value="edm::Ref&lt;JetC&gt;"
                     type="typedef"/>
            <typemap name="Map"
                     value="edm::AssociationMap&lt;edm::OneToMany&lt;JetC, reco::TrackCollection&gt; &gt;"
                     type="typedef"/>
            <typemap name="TrackRef"
                     value="edm::Ref&lt;reco::TrackCollection&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="const JetRef&amp;"/>
    <type name="const TrackRef&amp;"/>
    <type name="reco::JetTrackMatch&lt;JetC&gt;"/>
    <type name="std::vector&lt;JetRef&gt;"/>
    <type name="std::vector&lt;TrackRef&gt;"/>
    <type name="void"/>
</header>
