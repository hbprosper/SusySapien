<?xml version="1.0"?>
<!--
==============================================================================
  XML File: GsfTrack.xml
  Created:  Thu Jan 14 22:47:08 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/GsfTrackReco/interface/GsfTrack.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/GsfTrackReco/interface/GsfTrack.h">

    <include name="&quot;DataFormats/TrackReco/interface/Track.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrackExtraFwd.h&quot;"/>

    <namespace name="reco">

        <class name="GsfTrack"
               fullname="reco::GsfTrack"
               module="DataFormats.GsfTrackReco"
               project=""
               type="regular">
            <baseclass name="public Track"/>

            <section name="public">
                <enum name="">
enum {
 dimensionMode=3 };
                    <field name="dimensionMode" value="3"/>
                    <comment>
        parameter dimension mode
                    </comment>
                </enum>

                <enum name="">
enum {
 covarianceSizeMode=dimensionMode* (dimensionMode+1)/2 };
                    <field name="covarianceSizeMode"
                           value="dimensionMode* (dimensionMode+1)/2"/>
                    <comment>
        error matrix size mode
                    </comment>
                </enum>

                <typedef name="ParameterVectorMode"
                         value="math::Vector&lt;dimensionMode&gt;::type">
typedef math::Vector&lt;dimensionMode&gt;::type ParameterVectorMode;
                    <comment>
        parameter vector (momentum part) from mode
                    </comment>
                </typedef>

                <typedef name="CovarianceMatrixMode"
                         value="math::Error&lt;dimensionMode&gt;::type">
typedef math::Error&lt;dimensionMode&gt;::type CovarianceMatrixMode;
                    <comment>
        3 parameter covariance matrix (momentum part) from mode
                    </comment>
                </typedef>

                <constructor name="GsfTrack"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
GsfTrack();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="GsfTrack"
                             return=""
                             args="['double','double','const Point&amp;','const Vector&amp;','int','const CovarianceMatrix&amp;']"
                             vars="['chi2','ndof','','','charge','']"
                             qual="">
GsfTrack(double chi2, double ndof, const Point&amp;, const Vector&amp;, int charge, const CovarianceMatrix&amp;);
                    <comment>
        the point of closest approch to the beamline.
                    </comment>
                </constructor>

                <method1 name="setGsfExtra"
                         return="void"
                         args="['const GsfTrackExtraRef&amp;']"
                         vars="['ref']"
                         qual="">
void setGsfExtra(const GsfTrackExtraRef&amp; ref);
                    <comment>
        set reference to GSF &quot;extra&quot; object
                    </comment>
                </method1>

                <method1 name="gsfExtra"
                         return="const GsfTrackExtraRef&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const GsfTrackExtraRef&amp; gsfExtra() const;
                    <comment>
        reference to &quot;extra&quot; object
                    </comment>
                </method1>

                <method1 name="setMode"
                         return="void"
                         args="['int','const Vector&amp;','const CovarianceMatrixMode&amp;']"
                         vars="['chargeMode','momentumMode','covarianceMode']"
                         qual="">
void setMode (int chargeMode, const Vector&amp; momentumMode, const CovarianceMatrixMode&amp; covarianceMode);
                    <comment>
        set mode parameters
                    </comment>
                </method1>

                <method1 name="chargeMode"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int chargeMode() const;
                    <comment>
        track electric charge from mode
                    </comment>
                </method1>

                <method1 name="qoverpMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double qoverpMode() const;
                    <comment>
        q/p  from mode
                    </comment>
                </method1>

                <method1 name="thetaMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double thetaMode() const;
                    <comment>
        polar angle   from mode
                    </comment>
                </method1>

                <method1 name="lambdaMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double lambdaMode() const;
                    <comment>
        Lambda angle from mode
                    </comment>
                </method1>

                <method1 name="pMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pMode() const;
                    <comment>
        momentum vector magnitude from mode
                    </comment>
                </method1>

                <method1 name="ptMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ptMode() const;
                    <comment>
        track transverse momentum from mode
                    </comment>
                </method1>

                <method1 name="pxMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pxMode() const;
                    <comment>
        x coordinate of momentum vector from mode
                    </comment>
                </method1>

                <method1 name="pyMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pyMode() const;
                    <comment>
        y coordinate of momentum vector from mode
                    </comment>
                </method1>

                <method1 name="pzMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pzMode() const;
                    <comment>
        z coordinate of momentum vector from mode
                    </comment>
                </method1>

                <method1 name="phiMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double phiMode() const;
                    <comment>
        azimuthal angle of momentum vector from mode
                    </comment>
                </method1>

                <method1 name="etaMode"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double etaMode() const;
                    <comment>
        pseudorapidity of momentum vector from mode
                    </comment>
                </method1>

                <method1 name="momentumMode"
                         return="const Vector&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Vector&amp; momentumMode() const;
                    <comment>
        track momentum vector from mode
                    </comment>
                </method1>

                <method1 name="parametersMode"
                         return="ParameterVectorMode"
                         args="['void']"
                         vars="['']"
                         qual="const">
ParameterVectorMode parametersMode() const;
                    <comment>
        Track parameters with one-to-one correspondence to the covariance matrix from mode
                    </comment>
                </method1>

                <method1 name="covarianceMode"
                         return="CovarianceMatrixMode"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrixMode covarianceMode() const;
                    <comment>
        return track covariance matrix from mode
                    </comment>
                </method1>

                <method1 name="parameterMode"
                         return="double"
                         args="['int']"
                         vars="['i']"
                         qual="const">
double parameterMode(int i) const;
                    <comment>
        i-th parameter ( i = 0, ... 2 ) from mode
                    </comment>
                </method1>

                <method1 name="covarianceMode"
                         return="double"
                         args="['int','int']"
                         vars="['i','j']"
                         qual="const">
double covarianceMode(int i, int j) const;
                    <comment>
        (i,j)-th element of covarianve matrix ( i, j = 0, ... 2 ) from mode
                    </comment>
                </method1>

                <method1 name="errorMode"
                         return="double"
                         args="['int']"
                         vars="['i']"
                         qual="const">
double errorMode(int i) const;
                    <comment>
        error on specified element from mode
                    </comment>
                </method1>

                <method1 name="qoverpModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double qoverpModeError() const;
                    <comment>
        error on signed transverse curvature from mode
                    </comment>
                </method1>

                <method1 name="ptModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double ptModeError() const;
                    <comment>
        error on Pt (set to 1000 TeV if charge==0 for safety) from mode
                    </comment>
                </method1>

                <method1 name="thetaModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double thetaModeError() const;
                    <comment>
        error on theta from mode
                    </comment>
                </method1>

                <method1 name="lambdaModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double lambdaModeError() const;
                    <comment>
        error on lambda from mode
                    </comment>
                </method1>

                <method1 name="etaModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double etaModeError() const;
                    <comment>
        error on eta from mode
                    </comment>
                </method1>

                <method1 name="phiModeError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double phiModeError() const;
                    <comment>
        error on phi from mode
                    </comment>
                </method1>

            </section>

            <typemap name="CovarianceMatrixMode"
                     value="math::Error&lt;dimensionMode&gt;::type"
                     type="typedef"/>
            <typemap name="ParameterVectorMode"
                     value="math::Vector&lt;dimensionMode&gt;::type"
                     type="typedef"/>
            <typemap name="covarianceSizeMode "
                     value="reco::GsfTrack::covarianceSizeMode "
                     type="enum"/>
            <typemap name="dimensionMode "
                     value="reco::GsfTrack::dimensionMode "
                     type="enum"/>

        </class>
    </namespace>

    <type name="CovarianceMatrixMode"/>
    <type name="ParameterVectorMode"/>
    <type name="Track"/>
    <type name="const CovarianceMatrix&amp;"/>
    <type name="const CovarianceMatrixMode&amp;"/>
    <type name="const GsfTrackExtraRef&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const Vector&amp;"/>
    <type name="double"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="reco::GsfTrack"/>
    <type name="void"/>
</header>
