<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HcalNoiseSummary.xml
  Created:  Fri Jan 15 20:46:46 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/METReco/interface/HcalNoiseSummary.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/METReco/interface/HcalNoiseSummary.h">

    <include name="&quot;DataFormats/METReco/interface/HcalNoiseHPD.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/JetReco/interface/CaloJetCollection.h&quot;"/>

    <namespace name="reco">
        <comment>
   forward declaration
        </comment>
        <forward name="HcalNoiseInfoProducer"/>
    </namespace>

    <class name="HcalNoiseSummary"
           fullname="HcalNoiseSummary"
           module="DataFormats.METReco"
           project=""
           type="regular">
        <comment>
   class definition
        </comment>

        <section>
            <friend>
friend class reco::HcalNoiseInfoProducer;
            </friend>

        </section>
        <section name="public">
            <constructor name="HcalNoiseSummary"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
HcalNoiseSummary();
                <comment>
     constructor
                </comment>
            </constructor>

            <destructor name="~HcalNoiseSummary"
                        return="virtual"
                        args="['void']"
                        vars="['']"
                        qual="">
virtual ~HcalNoiseSummary();
                <comment>
     destructor
                </comment>
            </destructor>

            <method1 name="passLooseNoiseFilter"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool passLooseNoiseFilter(void) const;
                <comment>
     whether or not the event passed the event filter
                </comment>
            </method1>

            <method1 name="passTightNoiseFilter"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool passTightNoiseFilter(void) const;
            </method1>

            <method1 name="passHighLevelNoiseFilter"
                     return="bool"
                     args="['void']"
                     vars="['']"
                     qual="const">
bool passHighLevelNoiseFilter(void) const;
            </method1>

            <method1 name="noiseFilterStatus"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int noiseFilterStatus(void) const;
                <comment>
     the status with which the filter failed
     0 is no failure
                </comment>
            </method1>

            <method1 name="noiseType"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int noiseType(void) const;
                <comment>
     noise type
                </comment>
            </method1>

            <method1 name="eventEMEnergy"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float eventEMEnergy(void) const;
                <comment>
     quantities to calculate EM fraction and charge fraction
     of the event (|eta|&lt;3.0)
                </comment>
            </method1>

            <method1 name="eventHadEnergy"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float eventHadEnergy(void) const;
            </method1>

            <method1 name="eventTrackEnergy"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float eventTrackEnergy(void) const;
            </method1>

            <method1 name="eventEMFraction"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float eventEMFraction(void) const;
            </method1>

            <method1 name="eventChargeFraction"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float eventChargeFraction(void) const;
            </method1>

            <method1 name="min10GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float min10GeVHitTime(void) const;
                <comment>
     minimum/maximum/RMS rechit time
     rechit energy&gt;10 GeV or 25 GeV
                </comment>
            </method1>

            <method1 name="max10GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float max10GeVHitTime(void) const;
            </method1>

            <method1 name="rms10GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float rms10GeVHitTime(void) const;
            </method1>

            <method1 name="min25GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float min25GeVHitTime(void) const;
            </method1>

            <method1 name="max25GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float max25GeVHitTime(void) const;
            </method1>

            <method1 name="rms25GeVHitTime"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float rms25GeVHitTime(void) const;
            </method1>

            <method1 name="num10GeVHits"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int num10GeVHits(void) const;
                <comment>
     # of hits with E&gt;10 GeV or 25 GeV
                </comment>
            </method1>

            <method1 name="num25GeVHits"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int num25GeVHits(void) const;
            </method1>

            <method1 name="minE2TS"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float minE2TS(void) const;
                <comment>
     E(2TS), E(10TS), and E(2TS)/E(10TS) for the minimum E(2TS)/E(10TS) found in an RBX in the event
     the total energy in the RBX must be &gt; 20 GeV
                </comment>
            </method1>

            <method1 name="minE10TS"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float minE10TS(void) const;
            </method1>

            <method1 name="minE2Over10TS"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float minE2Over10TS(void) const;
            </method1>

            <method1 name="maxZeros"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int maxZeros(void) const;
                <comment>
     largest number of zeros found in a single RBX in the event
                </comment>
            </method1>

            <method1 name="maxHPDHits"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int maxHPDHits(void) const;
                <comment>
     largest number of hits in a single HPD/RBX in the event
                </comment>
            </method1>

            <method1 name="maxRBXHits"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int maxRBXHits(void) const;
            </method1>

            <method1 name="minHPDEMF"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float minHPDEMF(void) const;
                <comment>
     smallest EMF found in an HPD/RBX in the event
     the total energy in the HPD/RBX must be &gt;20 GeV
                </comment>
            </method1>

            <method1 name="minRBXEMF"
                     return="float"
                     args="['void']"
                     vars="['']"
                     qual="const">
float minRBXEMF(void) const;
            </method1>

            <method1 name="numProblematicRBXs"
                     return="int"
                     args="['void']"
                     vars="['']"
                     qual="const">
int numProblematicRBXs(void) const;
                <comment>
     number of &quot;problematic&quot; RBXs
                </comment>
            </method1>

            <method2 name="problematicJets"
                     return="edm::RefVector&lt;reco::CaloJetCollection&gt;"
                     args="['void']"
                     vars="['']"
                     qual="const">
edm::RefVector&lt;reco::CaloJetCollection&gt; problematicJets(void) const;
                <comment>
     reference to problematic jets
                </comment>
            </method2>

        </section>

    </class>

    <type name="HcalNoiseSummary"/>
    <type name="bool"/>
    <type name="edm::RefVector&lt;reco::CaloJetCollection&gt;"/>
    <type name="float"/>
    <type name="int"/>
    <type name="void"/>
</header>
