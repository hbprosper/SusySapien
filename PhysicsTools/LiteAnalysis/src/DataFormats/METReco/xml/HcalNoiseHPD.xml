<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HcalNoiseHPD.xml
  Created:  Fri Jan 15 20:46:45 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/METReco/interface/HcalNoiseHPD.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/METReco/interface/HcalNoiseHPD.h">

    <include name="&lt;algorithm&gt;"/>
    <include name="&quot;DataFormats/HcalDetId/interface/HcalSubdetector.h&quot;"/>
    <include name="&quot;DataFormats/HcalDigi/interface/HBHEDataFrame.h&quot;"/>
    <include name="&quot;DataFormats/HcalRecHit/interface/HcalRecHitCollections.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefVector.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/Ref.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefProd.h&quot;"/>
    <include name="&quot;DataFormats/CaloTowers/interface/CaloTowerCollection.h&quot;"/>

    <namespace name="reco">
        <forward name="HcalNoiseHPD"/>
        <forward name="RefHBHERecHitEnergyComparison"/>
        <typedef name="HcalNoiseHPDCollection"
                 value="std::vector&lt;HcalNoiseHPD&gt;">
typedef std::vector&lt;HcalNoiseHPD&gt; HcalNoiseHPDCollection;
            <comment>
     typdefs
            </comment>
        </typedef>


        <class name="RefHBHERecHitEnergyComparison"
               fullname="reco::RefHBHERecHitEnergyComparison"
               module="DataFormats.METReco"
               project=""
               type="regular">
            <baseclass name="public std::binary_function&lt;HBHERecHit, HBHERecHit, bool&gt;"/>
            <comment>
     RefHBHERecHitEnergyComparison is a class functor to compare energies between Ref&lt;HBHERecHitCollection&gt;
            </comment>

            <section name="public">
                <operator name="operator()"
                          return="bool"
                          args="['const edm::Ref&lt;HBHERecHitCollection&gt;&amp;','const edm::Ref&lt;HBHERecHitCollection&gt;&amp;']"
                          vars="['x','y']"
                          qual="const">
bool operatorPP(const edm::Ref&lt;HBHERecHitCollection&gt;&amp; x, const edm::Ref&lt;HBHERecHitCollection&gt;&amp; y) const;
                </operator>

            </section>

        </class>

        <class name="HcalNoiseHPD"
               fullname="reco::HcalNoiseHPD"
               module="DataFormats.METReco"
               project=""
               type="regular">
            <comment>
     class definition
            </comment>

            <section>
                <friend>
friend class HcalNoiseInfoProducer;
                </friend>

                <friend>
friend class HcalNoiseRBXArray;
                </friend>

            </section>
            <section name="public">
                <constructor name="HcalNoiseHPD"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
HcalNoiseHPD();
                    <comment>
       constructor
                    </comment>
                </constructor>

                <destructor name="~HcalNoiseHPD"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~HcalNoiseHPD();
                    <comment>
       destructor
                    </comment>
                </destructor>

                <method1 name="idnumber"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int idnumber(void) const;
                    <comment>
       unique integer specifier for the hpd [0,NUM_HPDS-1]
       correlates roughly with the detector phi slice
                    </comment>
                </method1>

                <method2 name="bigCharge"
                         return="const std::vector&lt;float&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;float&gt; bigCharge(void) const;
                    <comment>
       pedestal subtracted fC information for the highest energy pixel in the HPD by timeslice
                    </comment>
                </method2>

                <method1 name="bigChargeTotal"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float bigChargeTotal(void) const;
                </method1>

                <method1 name="bigChargeHighest2TS"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float bigChargeHighest2TS(void) const;
                </method1>

                <method1 name="bigChargeHighest3TS"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float bigChargeHighest3TS(void) const;
                </method1>

                <method2 name="big5Charge"
                         return="const std::vector&lt;float&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;float&gt; big5Charge(void) const;
                    <comment>
       same as above but the integral over the 5 highest energy pixels in the HPD
                    </comment>
                </method2>

                <method1 name="big5ChargeTotal"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float big5ChargeTotal(void) const;
                </method1>

                <method1 name="big5ChargeHighest2TS"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float big5ChargeHighest2TS(void) const;
                </method1>

                <method1 name="big5ChargeHighest3TS"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float big5ChargeHighest3TS(void) const;
                </method1>

                <method1 name="totalZeros"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int totalZeros(void) const;
                    <comment>
       total number of adc zeros
                    </comment>
                </method1>

                <method1 name="maxZeros"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int maxZeros(void) const;
                    <comment>
       largest number of adc zeros in a digi in the HPD
                    </comment>
                </method1>

                <method2 name="recHits"
                         return="const edm::RefVector&lt;HBHERecHitCollection&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const edm::RefVector&lt;HBHERecHitCollection&gt; recHits(void) const;
                    <comment>
       returns a reference to a vector of references to the rechits
                    </comment>
                </method2>

                <method1 name="recHitEnergy"
                         return="float"
                         args="['float=1.5']"
                         vars="['threshold']"
                         qual="const">
float recHitEnergy(float threshold=1.5) const;
                    <comment>
       integral of rechit energies in the HPD with E&gt;threshold (default is 1.5 GeV)
                    </comment>
                </method1>

                <method1 name="minRecHitTime"
                         return="float"
                         args="['float=10.0']"
                         vars="['threshold']"
                         qual="const">
float minRecHitTime(float threshold=10.0) const;
                    <comment>
       minimum and maximum time for rechits with E&gt;threshold (default is 10.0 GeV)
                    </comment>
                </method1>

                <method1 name="maxRecHitTime"
                         return="float"
                         args="['float=10.0']"
                         vars="['threshold']"
                         qual="const">
float maxRecHitTime(float threshold=10.0) const;
                </method1>

                <method1 name="numRecHits"
                         return="int"
                         args="['float=1.5']"
                         vars="['threshold']"
                         qual="const">
int numRecHits(float threshold=1.5) const;
                    <comment>
       number of rechits with E&gt;threshold (default is 1.5 GeV)
                    </comment>
                </method1>

                <method2 name="caloTowers"
                         return="const edm::RefVector&lt;CaloTowerCollection&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const edm::RefVector&lt;CaloTowerCollection&gt; caloTowers(void) const;
                    <comment>
       returns a reference to a vector of references to the calotowers
                    </comment>
                </method2>

                <method1 name="caloTowerHadE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double caloTowerHadE(void) const;
                    <comment>
       calotower properties integrated over the entire HPD
                    </comment>
                </method1>

                <method1 name="caloTowerEmE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double caloTowerEmE(void) const;
                </method1>

                <method1 name="caloTowerTotalE"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double caloTowerTotalE(void) const;
                </method1>

                <method1 name="caloTowerEmFraction"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double caloTowerEmFraction(void) const;
                </method1>

            </section>

        </class>
    </namespace>

    <type name="bool"/>
    <type name="const edm::Ref&lt;HBHERecHitCollection&gt;&amp;"/>
    <type name="const edm::RefVector&lt;CaloTowerCollection&gt;"/>
    <type name="const edm::RefVector&lt;HBHERecHitCollection&gt;"/>
    <type name="const std::vector&lt;float&gt;"/>
    <type name="double"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::HcalNoiseHPD"/>
    <type name="reco::RefHBHERecHitEnergyComparison"/>
    <type name="std::binary_function&lt;HBHERecHit, HBHERecHit, bool&gt;"/>
    <type name="void"/>
</header>
