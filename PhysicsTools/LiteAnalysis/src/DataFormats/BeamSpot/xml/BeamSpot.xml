<?xml version="1.0"?>
<!--
==============================================================================
  XML File: BeamSpot.xml
  Created:  Thu Jan 14 22:45:34 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/BeamSpot/interface/BeamSpot.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/BeamSpot/interface/BeamSpot.h">

    <include name="&lt;Rtypes.h&gt;"/>
    <include name="&quot;DataFormats/Math/interface/Error.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Point3D.h&quot;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;sstream&gt;"/>

    <namespace name="reco">

        <class name="BeamSpot"
               fullname="reco::BeamSpot"
               module="DataFormats.BeamSpot"
               project=""
               type="regular">

            <section name="public">
                <typedef name="Point"
                         value="math::XYZPoint">
typedef math::XYZPoint Point;
                    <comment>
        point in the space
                    </comment>
                </typedef>

                <enum name="">
enum {
 dimension=7 };
                    <field name="dimension" value="7"/>
                </enum>

                <typedef name="CovarianceMatrix"
                         value="math::Error&lt;dimension&gt;::type">
typedef math::Error&lt;dimension&gt;::type CovarianceMatrix;
                </typedef>

                <enum name="">
enum {
 dim3=3 };
                    <field name="dim3" value="3"/>
                </enum>

                <typedef name="Covariance3DMatrix"
                         value="math::Error&lt;dim3&gt;::type">
typedef math::Error&lt;dim3&gt;::type Covariance3DMatrix;
                </typedef>

                <enum name="">
enum {
 resdim=2 };
                    <field name="resdim" value="2"/>
                </enum>

                <typedef name="ResCovMatrix"
                         value="math::Error&lt;resdim&gt;::type">
typedef math::Error&lt;resdim&gt;::type ResCovMatrix;
                </typedef>

                <constructor name="BeamSpot"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
BeamSpot();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="BeamSpot"
                             return=""
                             args="['const Point&amp;','double','double','double','double','const CovarianceMatrix&amp;']"
                             vars="['point','sigmaZ','dxdz','dydz','BeamWidth','error']"
                             qual="">
BeamSpot(const Point&amp; point, double sigmaZ, double dxdz, double dydz, double BeamWidth, const CovarianceMatrix&amp; error);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <method1 name="dummy"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void dummy();
                    <comment>
        dummy beam spot
                    </comment>
                </method1>

                <method1 name="position"
                         return="const Point&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Point&amp; position() const;
                    <comment>
        position
                    </comment>
                </method1>

                <method1 name="x0"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double x0() const;
                    <comment>
        x coordinate
                    </comment>
                </method1>

                <method1 name="y0"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double y0() const;
                    <comment>
        y coordinate
                    </comment>
                </method1>

                <method1 name="z0"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double z0() const;
                    <comment>
        z coordinate
                    </comment>
                </method1>

                <method1 name="sigmaZ"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double sigmaZ() const;
                    <comment>
        sigma z
                    </comment>
                </method1>

                <method1 name="dxdz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dxdz() const;
                    <comment>
        dxdz slope
                    </comment>
                </method1>

                <method1 name="dydz"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dydz() const;
                    <comment>
        dydz slope
                    </comment>
                </method1>

                <method1 name="BeamWidth"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double BeamWidth() const;
                    <comment>
        beam width
                    </comment>
                </method1>

                <method1 name="x0Error"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double x0Error() const;
                    <comment>
        error on x
                    </comment>
                </method1>

                <method1 name="y0Error"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double y0Error() const;
                    <comment>
        error on y
                    </comment>
                </method1>

                <method1 name="z0Error"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double z0Error() const;
                    <comment>
        error on z
                    </comment>
                </method1>

                <method1 name="sigmaZ0Error"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double sigmaZ0Error() const;
                    <comment>
        error on sigma z
                    </comment>
                </method1>

                <method1 name="dxdzError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dxdzError() const;
                    <comment>
        error on dxdz
                    </comment>
                </method1>

                <method1 name="dydzError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dydzError() const;
                    <comment>
        error on dydz
                    </comment>
                </method1>

                <method1 name="BeamWidthError"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double BeamWidthError() const;
                    <comment>
        error on beam width
                    </comment>
                </method1>

                <method1 name="covariance"
                         return="double"
                         args="['int','int']"
                         vars="['i','j']"
                         qual="const">
double covariance(int i, int j) const;
                    <comment>
        (i,j)-th element of error matrix
                    </comment>
                </method1>

                <method1 name="covariance"
                         return="CovarianceMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
CovarianceMatrix covariance() const;
                    <comment>
        return full covariance matrix of dim 7
                    </comment>
                </method1>

                <method1 name="covariance3D"
                         return="Covariance3DMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
Covariance3DMatrix covariance3D() const;
                    <comment>
        return only 3D position covariance matrix
                    </comment>
                </method1>

                <method1 name="rotatedCovariance3D"
                         return="Covariance3DMatrix"
                         args="['void']"
                         vars="['']"
                         qual="const">
Covariance3DMatrix rotatedCovariance3D() const;
                </method1>

                <method1 name="print"
                         return="void"
                         args="['std::stringstream&amp;']"
                         vars="['ss']"
                         qual="const">
void print(std::stringstream&amp; ss) const;
                    <comment>
        print information
                    </comment>
                </method1>

            </section>

            <typemap name="Covariance3DMatrix"
                     value="math::Error&lt;dim3&gt;::type"
                     type="typedef"/>
            <typemap name="CovarianceMatrix"
                     value="math::Error&lt;dimension&gt;::type"
                     type="typedef"/>
            <typemap name="Point"
                     value="math::XYZPoint"
                     type="typedef"/>
            <typemap name="ResCovMatrix"
                     value="math::Error&lt;resdim&gt;::type"
                     type="typedef"/>
            <typemap name="dim3 "
                     value="reco::BeamSpot::dim3 "
                     type="enum"/>
            <typemap name="dimension "
                     value="reco::BeamSpot::dimension "
                     type="enum"/>
            <typemap name="resdim "
                     value="reco::BeamSpot::resdim "
                     type="enum"/>

        </class>
        <operator name="operator&lt;&lt;"
                  return="std::ostream&amp;"
                  args="['std::ostream&amp;','BeamSpot']"
                  vars="['','beam']"
                  qual="">
std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, BeamSpot beam);
        </operator>

    </namespace>

    <type name="Covariance3DMatrix"/>
    <type name="CovarianceMatrix"/>
    <type name="const CovarianceMatrix&amp;"/>
    <type name="const Point&amp;"/>
    <type name="double"/>
    <type name="enum"/>
    <type name="int"/>
    <type name="reco::BeamSpot"/>
    <type name="std::stringstream&amp;"/>
    <type name="void"/>
</header>
