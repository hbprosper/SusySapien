<?xml version="1.0"?>
<!--
==============================================================================
  XML File: IsoDeposit.xml
  Created:  Fri Jan 15 20:47:23 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/RecoCandidate/interface/IsoDeposit.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/RecoCandidate/interface/IsoDeposit.h">

    <include name="&quot;DataFormats/RecoCandidate/interface/IsoDepositDirection.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/Vector3D.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/Exception.h&quot;"/>
    <include name="&lt;map&gt;"/>
    <include name="&lt;cmath&gt;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;typeinfo&gt;"/>

    <namespace name="reco">

        <namespace name="isodeposit">

            <class name="AbsVeto"
                   fullname="reco::isodeposit::AbsVeto"
                   module="DataFormats.RecoCandidate"
                   project=""
                   type="abstract regular struct">

                <section>
                    <destructor name="~AbsVeto"
                                return="virtual"
                                args="['void']"
                                vars="['']"
                                qual="">
virtual ~AbsVeto();
                    </destructor>

                    <method1 name="veto"
                             return="virtual bool"
                             args="['double','double','float']"
                             vars="['eta','phi','value']"
                             qual="const = 0">
virtual bool veto(double eta, double phi, float value) const=0;
                        <comment>
          Return &quot;true&quot; if a deposit at specific (eta,phi) with that value must be vetoed in the sum
                        </comment>
                    </method1>

                    <method1 name="centerOn"
                             return="virtual void"
                             args="['double','double']"
                             vars="['eta','phi']"
                             qual="">
virtual void centerOn(double eta, double phi);
                        <comment>
          Relocates this veto so that the new center is at some (eta,phi).
	  Must be implemented on the specific AbsVeto subclass: in this mother class it just throws exception
                        </comment>
                    </method1>

                </section>

            </class>
            <typedef name="AbsVetos"
                     value="std::vector&lt;AbsVeto*&gt;">
typedef std::vector&lt;AbsVeto*&gt; AbsVetos;
            </typedef>

        </namespace>
    </namespace>

    <namespace name="reco">

        <class name="IsoDeposit"
               fullname="reco::IsoDeposit"
               module="DataFormats.RecoCandidate"
               project=""
               type="regular">

            <section name="public">
                <typedef name="Direction"
                         value="isodeposit::Direction">
typedef isodeposit::Direction Direction;
                </typedef>

                <typedef name="AbsVeto"
                         value="isodeposit::AbsVeto">
typedef isodeposit::AbsVeto AbsVeto;
                </typedef>

                <typedef name="AbsVetos"
                         value="isodeposit::AbsVetos">
typedef isodeposit::AbsVetos AbsVetos;
                </typedef>


                <class name="Veto"
                       fullname="reco::IsoDeposit::Veto"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular struct">
                    <comment>
       old style vetos
                    </comment>

                    <section>
                        <member>
Direction vetoDir;
                        </member>

                        <member>
float dR;
                        </member>

                        <constructor name="Veto"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
Veto();
                        </constructor>

                        <constructor name="Veto"
                                     return=""
                                     args="['Direction','double']"
                                     vars="['dir','d']"
                                     qual="">
Veto(Direction dir, double d);
                        </constructor>

                    </section>

                    <typemap name="Veto"
                             value="reco::IsoDeposit::Veto"
                             type="class"/>
                    <typemap name="dR"
                             value="reco::IsoDeposit::Veto::dR"
                             type="member"/>
                    <typemap name="vetoDir"
                             value="reco::IsoDeposit::Veto::vetoDir"
                             type="member"/>

                </class>
                <typedef name="Vetos"
                         value="std::vector&lt;Veto&gt;">
typedef std::vector&lt;Veto&gt; Vetos;
                </typedef>

                <constructor name="IsoDeposit"
                             return=""
                             args="['double=0','double=0']"
                             vars="['eta','phi']"
                             qual="">
IsoDeposit(double eta=0, double phi=0);
                    <comment>
        Constructor
                    </comment>
                </constructor>

                <constructor name="IsoDeposit"
                             return=""
                             args="['const Direction&amp;']"
                             vars="['candDirection']"
                             qual="">
IsoDeposit(const Direction&amp; candDirection);
                </constructor>

                <destructor name="~IsoDeposit"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~IsoDeposit();
                    <comment>
        Destructor
                    </comment>
                </destructor>

                <method1 name="direction"
                         return="const Direction&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Direction&amp; direction() const;
                    <comment>
        Get direction of isolation cone
                    </comment>
                </method1>

                <method1 name="eta"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double eta() const;
                </method1>

                <method1 name="phi"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double phi() const;
                </method1>

                <method1 name="veto"
                         return="const Veto&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Veto&amp; veto() const;
                    <comment>
        Get veto area
                    </comment>
                </method1>

                <method1 name="setVeto"
                         return="void"
                         args="['const Veto&amp;']"
                         vars="['aVeto']"
                         qual="">
void setVeto(const Veto&amp; aVeto);
                    <comment>
        Set veto
                    </comment>
                </method1>

                <method1 name="addDeposit"
                         return="void"
                         args="['double','double']"
                         vars="['dr','deposit']"
                         qual="">
void addDeposit(double dr, double deposit);
                    <comment>
        Add deposit (ie. transverse energy or pT)
                    </comment>
                </method1>

                <method1 name="addDeposit"
                         return="void"
                         args="['const Direction&amp;','double']"
                         vars="['depDir','deposit']"
                         qual="">
void addDeposit(const Direction&amp; depDir, double deposit);
                </method1>

                <method1 name="depositWithin"
                         return="double"
                         args="['double','const Vetos&amp;=Vetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double depositWithin(     double coneSize, const Vetos&amp; vetos=Vetos(), bool skipDepositVeto=false    ) const;
                    <comment>
        Get deposit
                    </comment>
                </method1>

                <method1 name="depositWithin"
                         return="double"
                         args="['Direction','double','const Vetos&amp;=Vetos()','bool=false']"
                         vars="['dir','coneSize','vetos','skipDepositVeto']"
                         qual="const">
double depositWithin(Direction dir, double coneSize, const Vetos&amp; vetos=Vetos(), bool skipDepositVeto=false     ) const;
                    <comment>
        Get deposit wrt other direction
                    </comment>
                </method1>

                <method2 name="depositAndCountWithin"
                         return="std::pair&lt;double, int&gt;"
                         args="['double','const Vetos&amp;=Vetos()','double=-1e+36','bool=false']"
                         vars="['coneSize','vetos','threshold','skipDepositVeto']"
                         qual="const">
std::pair&lt;double, int&gt;       depositAndCountWithin(        double coneSize, const Vetos&amp; vetos=Vetos(), double threshold=-1e+36, bool skipDepositVeto=false       ) const;
                    <comment>
        Get deposit
                    </comment>
                </method2>

                <method2 name="depositAndCountWithin"
                         return="std::pair&lt;double, int&gt;"
                         args="['Direction','double','const Vetos&amp;=Vetos()','double=-1e+36','bool=false']"
                         vars="['dir','coneSize','vetos','threshold','skipDepositVeto']"
                         qual="const">
std::pair&lt;double, int&gt;       depositAndCountWithin(        Direction dir, double coneSize, const Vetos&amp; vetos=Vetos(), double threshold=-1e+36, bool skipDepositVeto=false       ) const;
                    <comment>
        Get deposit wrt other direction
                    </comment>
                </method2>

                <method1 name="depositWithin"
                         return="double"
                         args="['double','const AbsVetos&amp;','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double depositWithin(     double coneSize, const AbsVetos&amp; vetos, bool skipDepositVeto=false    ) const;
                    <comment>
        Get deposit with new style vetos
                    </comment>
                </method1>

                <method2 name="depositAndCountWithin"
                         return="std::pair&lt;double, int&gt;"
                         args="['double','const AbsVetos&amp;','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
std::pair&lt;double, int&gt;       depositAndCountWithin(        double coneSize, const AbsVetos&amp; vetos, bool skipDepositVeto=false       ) const;
                    <comment>
        Get deposit
                    </comment>
                </method2>

                <method1 name="candEnergy"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double candEnergy() const;
                    <comment>
        Get energy or pT attached to cand trajectory
                    </comment>
                </method1>

                <method1 name="addCandEnergy"
                         return="void"
                         args="['double']"
                         vars="['et']"
                         qual="">
void addCandEnergy(double et);
                    <comment>
        Set energy or pT attached to cand trajectory
                    </comment>
                </method1>

                <method1 name="print"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string print() const;
                </method1>


                <class name="const_iterator"
                       fullname="reco::IsoDeposit::const_iterator"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular privatector">

                    <section name="public">
                        <operator name="operator++"
                                  return="const const_iterator&amp;"
                                  args="['void']"
                                  vars="['']"
                                  qual="">
const const_iterator&amp; operator++();
                        </operator>

                        <operator name="operator-&gt;"
                                  return="const const_iterator*"
                                  args="['void']"
                                  vars="['']"
                                  qual="const">
const const_iterator* operator-&gt;() const;
                        </operator>

                        <method1 name="dR"
                                 return="float"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
float dR() const;
                        </method1>

                        <method1 name="eta"
                                 return="float"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
float eta() const;
                        </method1>

                        <method1 name="phi"
                                 return="float"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
float phi() const;
                        </method1>

                        <method1 name="value"
                                 return="float"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
float value() const;
                        </method1>

                        <operator name="operator!="
                                  return="bool"
                                  args="['const const_iterator&amp;']"
                                  vars="['it2']"
                                  qual="">
bool operator!=(const const_iterator&amp; it2);
                        </operator>

                        <friend>
friend class IsoDeposit;
                        </friend>

                    </section>
                    <section name="private">
                        <constant name="parent_"
                                  type="const reco::IsoDeposit*"
                                  value=""/>
                    </section>

                    <typemap name="const_iterator"
                             value="reco::IsoDeposit::const_iterator"
                             type="class"/>

                </class>
                <method1 name="begin"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator begin() const;
                </method1>

                <method1 name="end"
                         return="const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
const_iterator end() const;
                </method1>


                <class name="SumAlgo"
                       fullname="reco::IsoDeposit::SumAlgo"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular">

                    <section name="public">
                        <constructor name="SumAlgo"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
SumAlgo();
                        </constructor>

                        <operator name="operator+="
                                  return="void"
                                  args="['float']"
                                  vars="['deposit']"
                                  qual="">
void operator+=(float deposit);
                        </operator>

                        <method1 name="result"
                                 return="double"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
double result() const;
                        </method1>

                    </section>

                    <typemap name="SumAlgo"
                             value="reco::IsoDeposit::SumAlgo"
                             type="class"/>

                </class>

                <class name="CountAlgo"
                       fullname="reco::IsoDeposit::CountAlgo"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular">

                    <section name="public">
                        <constructor name="CountAlgo"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
CountAlgo();
                        </constructor>

                        <operator name="operator+="
                                  return="void"
                                  args="['double']"
                                  vars="['deposit']"
                                  qual="">
void operator+=(double deposit);
                        </operator>

                        <method1 name="result"
                                 return="double"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
double result() const;
                        </method1>

                    </section>

                    <typemap name="CountAlgo"
                             value="reco::IsoDeposit::CountAlgo"
                             type="class"/>

                </class>

                <class name="Sum2Algo"
                       fullname="reco::IsoDeposit::Sum2Algo"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular">

                    <section name="public">
                        <constructor name="Sum2Algo"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
Sum2Algo();
                        </constructor>

                        <operator name="operator+="
                                  return="void"
                                  args="['double']"
                                  vars="['deposit']"
                                  qual="">
void operator+=(double deposit);
                        </operator>

                        <method1 name="result"
                                 return="double"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
double result() const;
                        </method1>

                    </section>

                    <typemap name="Sum2Algo"
                             value="reco::IsoDeposit::Sum2Algo"
                             type="class"/>

                </class>

                <class name="MaxAlgo"
                       fullname="reco::IsoDeposit::MaxAlgo"
                       module="DataFormats.RecoCandidate"
                       project=""
                       type="regular">

                    <section name="public">
                        <constructor name="MaxAlgo"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
MaxAlgo();
                        </constructor>

                        <operator name="operator+="
                                  return="void"
                                  args="['double']"
                                  vars="['deposit']"
                                  qual="">
void operator+=(double deposit);
                        </operator>

                        <method1 name="result"
                                 return="double"
                                 args="['void']"
                                 vars="['']"
                                 qual="const">
double result() const;
                        </method1>

                    </section>

                    <typemap name="MaxAlgo"
                             value="reco::IsoDeposit::MaxAlgo"
                             type="class"/>

                </class>
                <method2 name="algoWithin"
                         return="template&lt;typename Algo&gt; double"
                         args="['double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
template&lt;typename Algo&gt;     double algoWithin(double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false    ) const;
                    <comment>
        Get some info about the deposit (e.g. sum, max, sum2, count)
                    </comment>
                </method2>

                <method2 name="algoWithin"
                         return="template&lt;typename Algo&gt; double"
                         args="['const Direction&amp;','double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['','coneSize','vetos','skipDepositVeto']"
                         qual="const">
template&lt;typename Algo&gt;     double algoWithin(const Direction&amp;, double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false        ) const;
                    <comment>
        Get some info about the deposit (e.g. sum, max, sum2, count) w.r.t. other direction
                    </comment>
                </method2>

                <method1 name="countWithin"
                         return="double"
                         args="['double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double countWithin(double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false    ) const;
                    <comment>
       count of the non-vetoed deposits in the cone
                    </comment>
                </method1>

                <method1 name="sumWithin"
                         return="double"
                         args="['double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double sumWithin(double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false    ) const;
                    <comment>
       sum of the non-vetoed deposits in the cone
                    </comment>
                </method1>

                <method1 name="sumWithin"
                         return="double"
                         args="['const Direction&amp;','double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['dir','coneSize','vetos','skipDepositVeto']"
                         qual="const">
double sumWithin(const Direction&amp; dir, double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false       ) const;
                    <comment>
       sum of the non-vetoed deposits in the cone w.r.t. other direction
                    </comment>
                </method1>

                <method1 name="sum2Within"
                         return="double"
                         args="['double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double sum2Within(double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false    ) const;
                </method1>

                <method1 name="maxWithin"
                         return="double"
                         args="['double','const AbsVetos&amp;=AbsVetos()','bool=false']"
                         vars="['coneSize','vetos','skipDepositVeto']"
                         qual="const">
double maxWithin(double coneSize, const AbsVetos&amp; vetos=AbsVetos(), bool skipDepositVeto=false    ) const;
                    <comment>
       maximum value among the non-vetoed deposits in the cone
                    </comment>
                </method1>

            </section>

            <typemap name="AbsVeto"
                     value="isodeposit::AbsVeto"
                     type="typedef"/>
            <typemap name="AbsVetos"
                     value="isodeposit::AbsVetos"
                     type="typedef"/>
            <typemap name="Direction"
                     value="isodeposit::Direction"
                     type="typedef"/>
            <typemap name="Vetos"
                     value="std::vector&lt;Veto&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="Direction"/>
    <type name="bool"/>
    <type name="const AbsVetos&amp;"/>
    <type name="const Direction&amp;"/>
    <type name="const Veto&amp;"/>
    <type name="const Vetos&amp;"/>
    <type name="const const_iterator&amp;"/>
    <type name="const const_iterator*"/>
    <type name="const_iterator"/>
    <type name="double"/>
    <type name="float"/>
    <type name="reco::IsoDeposit"/>
    <type name="reco::IsoDeposit::CountAlgo"/>
    <type name="reco::IsoDeposit::MaxAlgo"/>
    <type name="reco::IsoDeposit::Sum2Algo"/>
    <type name="reco::IsoDeposit::SumAlgo"/>
    <type name="reco::IsoDeposit::Veto"/>
    <type name="reco::IsoDeposit::const_iterator"/>
    <type name="reco::isodeposit::AbsVeto"/>
    <type name="std::pair&lt;double, int&gt;"/>
    <type name="std::string"/>
    <type name="template&lt;typename Algo&gt; double"/>
    <type name="void"/>
</header>
