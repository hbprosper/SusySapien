<?xml version="1.0"?>
<!--
==============================================================================
  XML File: RecoCandidate.xml
  Created:  Thu Jan 14 22:48:29 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/RecoCandidate/interface/RecoCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/RecoCandidate/interface/RecoCandidate.h">

    <include name="&quot;DataFormats/Candidate/interface/LeafCandidate.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/CaloTowers/interface/CaloTowerCollection.h&quot;"/>
    <include name="&quot;DataFormats/CaloTowers/interface/CaloTowerFwd.h&quot;"/>

    <namespace name="reco">

        <class name="RecoCandidate"
               fullname="reco::RecoCandidate"
               module="DataFormats.RecoCandidate"
               project=""
               type="abstract regular">
            <baseclass name="public LeafCandidate"/>

            <section name="public">
                <constructor name="RecoCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
RecoCandidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="RecoCandidate"
                             return=""
                             args="['Charge','const LorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0']"
                             vars="['q','p4','vtx','pdgId','status']"
                             qual="">
RecoCandidate(Charge q, const LorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="RecoCandidate"
                             return=""
                             args="['Charge','const PolarLorentzVector&amp;','const Point&amp;=Point(0, 0, 0)','int=0','int=0']"
                             vars="['q','p4','vtx','pdgId','status']"
                             qual="">
RecoCandidate(Charge q, const PolarLorentzVector&amp; p4, const Point&amp; vtx=Point(0, 0, 0), int pdgId=0, int status=0);
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~RecoCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~RecoCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="overlap"
                         return="virtual bool"
                         args="['const Candidate&amp;']"
                         vars="['']"
                         qual="const = 0">
virtual bool overlap(const Candidate&amp;) const=0;
                    <comment>
        check overlap with another candidate
                    </comment>
                </method1>

                <method1 name="track"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef track() const;
                    <comment>
        reference to a Track
                    </comment>
                </method1>

                <method1 name="track"
                         return="virtual reco::TrackRef"
                         args="['size_t']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef track(size_t) const;
                    <comment>
        reference to one of multiple Tracks
                    </comment>
                </method1>

                <method1 name="numberOfTracks"
                         return="virtual size_t"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual size_t numberOfTracks() const;
                    <comment>
        number of multiple Tracks
                    </comment>
                </method1>

                <method1 name="gsfTrack"
                         return="virtual reco::GsfTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::GsfTrackRef gsfTrack() const;
                    <comment>
        reference to a GsfTrack
                    </comment>
                </method1>

                <method1 name="standAloneMuon"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef standAloneMuon() const;
                    <comment>
        reference to a stand-alone muon Track
                    </comment>
                </method1>

                <method1 name="combinedMuon"
                         return="virtual reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::TrackRef combinedMuon() const;
                    <comment>
        reference to a stand-alone muon Track
                    </comment>
                </method1>

                <method1 name="superCluster"
                         return="virtual reco::SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::SuperClusterRef superCluster() const;
                    <comment>
        reference to a SuperCluster
                    </comment>
                </method1>

                <method1 name="caloTower"
                         return="virtual CaloTowerRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CaloTowerRef caloTower() const;
                    <comment>
        reference to a CaloTower
                    </comment>
                </method1>

                <method1 name="bestTrack"
                         return="const Track*"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Track* bestTrack() const;
                    <comment>
        best track pointer
                    </comment>
                </method1>

                <method1 name="bestTrackRef"
                         return="TrackBaseRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackBaseRef bestTrackRef() const;
                    <comment>
        best track RefToBase
                    </comment>
                </method1>

                <enum name="TrackType">
enum TrackType {
 noTrackType, recoTrackType, gsfTrackType };
                    <field name="noTrackType" value=""/>
                    <field name="recoTrackType" value=""/>
                    <field name="gsfTrackType" value=""/>
                    <comment>
        track type
                    </comment>
                </enum>

                <method1 name="bestTrackType"
                         return="TrackType"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackType bestTrackType() const;
                    <comment>
       track type
                    </comment>
                </method1>

            </section>

            <typemap name="TrackType"
                     value="reco::RecoCandidate::TrackType"
                     type="enum"/>
            <typemap name="gsfTrackType"
                     value="reco::RecoCandidate::gsfTrackType"
                     type="enum"/>
            <typemap name="noTrackType"
                     value="reco::RecoCandidate::noTrackType"
                     type="enum"/>
            <typemap name="recoTrackType"
                     value="reco::RecoCandidate::recoTrackType"
                     type="enum"/>

        </class>

        <class name="StandAloneMuonTag"
               fullname="reco::StandAloneMuonTag"
               module="DataFormats.RecoCandidate"
               project=""
               type="regular struct">
            <comment>
      stand alone muon component tag
            </comment>


        </class>

        <class name="CombinedMuonTag"
               fullname="reco::CombinedMuonTag"
               module="DataFormats.RecoCandidate"
               project=""
               type="regular struct">
            <comment>
      conbined muon component tag
            </comment>


        </class>

        <class name="component&lt;TrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default Track component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;TrackRef, componenthelper::MultipleComponentsTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;TrackRef, componenthelper::MultipleComponentsTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get multuple tracks
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::MultipleComponents&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track, &amp; RecoCandidate::numberOfTracks&gt;">
typedef componenthelper::MultipleComponents&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track, &amp; RecoCandidate::numberOfTracks&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::MultipleComponents&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::track, &amp; RecoCandidate::numberOfTracks&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;GsfTrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;GsfTrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default GsfTrack component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, GsfTrackRef, &amp; RecoCandidate::gsfTrack&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, GsfTrackRef, &amp; RecoCandidate::gsfTrack&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, GsfTrackRef, &amp; RecoCandidate::gsfTrack&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;TrackRef, componenthelper::SingleComponentTag, StandAloneMuonTag&gt;"
               fullname="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, StandAloneMuonTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get stand-alone muon Track component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::standAloneMuon&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::standAloneMuon&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::standAloneMuon&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;TrackRef, componenthelper::SingleComponentTag, CombinedMuonTag&gt;"
               fullname="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, CombinedMuonTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get combined muon Track component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::combinedMuon&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::combinedMuon&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, TrackRef, &amp; RecoCandidate::combinedMuon&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;SuperClusterRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;SuperClusterRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default SuperCluster component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, SuperClusterRef, &amp; RecoCandidate::superCluster&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, SuperClusterRef, &amp; RecoCandidate::superCluster&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, SuperClusterRef, &amp; RecoCandidate::superCluster&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;CaloTowerRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;CaloTowerRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default CaloTower component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, CaloTowerRef, &amp; RecoCandidate::caloTower&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, CaloTowerRef, &amp; RecoCandidate::caloTower&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, CaloTowerRef, &amp; RecoCandidate::caloTower&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;const Track *, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;const Track *, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default CaloTower component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, const Track*, &amp; RecoCandidate::bestTrack&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, const Track*, &amp; RecoCandidate::bestTrack&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, const Track*, &amp; RecoCandidate::bestTrack&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;RecoCandidate::TrackType, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;RecoCandidate::TrackType, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
      get default CaloTower component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;RecoCandidate, RecoCandidate::TrackType, &amp; RecoCandidate::bestTrackType&gt;">
typedef componenthelper::SingleComponent&lt;RecoCandidate, RecoCandidate::TrackType, &amp; RecoCandidate::bestTrackType&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;RecoCandidate, RecoCandidate::TrackType, &amp; RecoCandidate::bestTrackType&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="CaloTowerRef"/>
    <type name="Charge"/>
    <type name="LeafCandidate"/>
    <type name="TrackBaseRef"/>
    <type name="TrackType"/>
    <type name="bool"/>
    <type name="const Candidate&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="const Track*"/>
    <type name="enum TrackType"/>
    <type name="int"/>
    <type name="reco::CombinedMuonTag"/>
    <type name="reco::GsfTrackRef"/>
    <type name="reco::RecoCandidate"/>
    <type name="reco::StandAloneMuonTag"/>
    <type name="reco::SuperClusterRef"/>
    <type name="reco::TrackRef"/>
    <type name="reco::component&lt;CaloTowerRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;GsfTrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;RecoCandidate::TrackType, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;SuperClusterRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;TrackRef, componenthelper::MultipleComponentsTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, CombinedMuonTag&gt;"/>
    <type name="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="reco::component&lt;TrackRef, componenthelper::SingleComponentTag, StandAloneMuonTag&gt;"/>
    <type name="reco::component&lt;const Track*, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="size_t"/>
    <type name="void"/>
</header>
