<?xml version="1.0"?>
<!--
==============================================================================
  XML File: CaloRecHitCandidate.xml
  Created:  Fri Jan 15 20:47:22 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/RecoCandidate/interface/CaloRecHitCandidate.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/RecoCandidate/interface/CaloRecHitCandidate.h">

    <include name="&quot;DataFormats/RecoCandidate/interface/RecoCandidate.h&quot;"/>
    <include name="&quot;DataFormats/CaloRecHit/interface/CaloRecHit.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/RefToBase.h&quot;"/>

    <namespace name="reco">

        <class name="CaloRecHitCandidate"
               fullname="reco::CaloRecHitCandidate"
               module="DataFormats.RecoCandidate"
               project=""
               type="regular">
            <baseclass name="public LeafCandidate"/>

            <section name="public">
                <typedef name="CaloRecHitRef"
                         value="edm::RefToBase&lt;CaloRecHit&gt;">
typedef edm::RefToBase&lt;CaloRecHit&gt; CaloRecHitRef;
                </typedef>

                <constructor name="CaloRecHitCandidate"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
CaloRecHitCandidate();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="CaloRecHitCandidate"
                             return=""
                             args="['const LorentzVector&amp;','Charge=0','const Point&amp;=Point(0, 0, 0)']"
                             vars="['p4','q','vtx']"
                             qual="">
CaloRecHitCandidate(const LorentzVector&amp; p4, Charge q=0, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <constructor name="CaloRecHitCandidate"
                             return=""
                             args="['const PolarLorentzVector&amp;','Charge=0','const Point&amp;=Point(0, 0, 0)']"
                             vars="['p4','q','vtx']"
                             qual="">
CaloRecHitCandidate(const PolarLorentzVector&amp; p4, Charge q=0, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~CaloRecHitCandidate"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~CaloRecHitCandidate();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual CaloRecHitCandidate*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual CaloRecHitCandidate* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="setCaloRecHit"
                         return="void"
                         args="['const CaloRecHitRef&amp;']"
                         vars="['r']"
                         qual="">
void setCaloRecHit(const CaloRecHitRef&amp; r);
                    <comment>
        set CaloRecHit reference
                    </comment>
                </method1>

                <method1 name="caloRecHit"
                         return="CaloRecHitRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
CaloRecHitRef caloRecHit() const;
                    <comment>
        reference to a CaloRecHit
                    </comment>
                </method1>

            </section>

            <typemap name="CaloRecHitRef"
                     value="edm::RefToBase&lt;CaloRecHit&gt;"
                     type="typedef"/>

        </class>

        <class name="component&lt;edm::RefToBase&lt;CaloRecHit&gt;, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               fullname="reco::component&lt;edm::RefToBase&lt;CaloRecHit&gt;, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"
               module="DataFormats.RecoCandidate"
               project=""
               type="specialized template struct"
               template="template&lt;&gt;">
            <comment>
        get default Track component
            </comment>

            <section>
                <typedef name="type"
                         value="componenthelper::SingleComponent&lt;CaloRecHitCandidate, edm::RefToBase&lt;CaloRecHit&gt;, &amp; CaloRecHitCandidate::caloRecHit&gt;">
typedef componenthelper::SingleComponent&lt;CaloRecHitCandidate, edm::RefToBase&lt;CaloRecHit&gt;, &amp; CaloRecHitCandidate::caloRecHit&gt; type;
                </typedef>

            </section>

            <typemap name="type"
                     value="componenthelper::SingleComponent&lt;CaloRecHitCandidate, edm::RefToBase&lt;CaloRecHit&gt;, &amp; CaloRecHitCandidate::caloRecHit&gt;"
                     type="typedef"/>

        </class>
    </namespace>

    <type name="CaloRecHitCandidate*"/>
    <type name="CaloRecHitRef"/>
    <type name="Charge"/>
    <type name="LeafCandidate"/>
    <type name="const CaloRecHitRef&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const PolarLorentzVector&amp;"/>
    <type name="reco::CaloRecHitCandidate"/>
    <type name="reco::component&lt;edm::RefToBase&lt;CaloRecHit&gt;, componenthelper::SingleComponentTag, DefaultComponentTag&gt;"/>
    <type name="void"/>
</header>
