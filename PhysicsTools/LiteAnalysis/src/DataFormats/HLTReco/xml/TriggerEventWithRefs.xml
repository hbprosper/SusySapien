<?xml version="1.0"?>
<!--
==============================================================================
  XML File: TriggerEventWithRefs.xml
  Created:  Fri Jan 15 20:47:48 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HLTReco/interface/TriggerEventWithRefs.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/HLTReco/interface/TriggerEventWithRefs.h">

    <include name="&quot;DataFormats/HLTReco/interface/TriggerTypeDefs.h&quot;"/>
    <include name="&quot;DataFormats/HLTReco/interface/TriggerRefsCollections.h&quot;"/>
    <include name="&quot;DataFormats/HLTReco/interface/TriggerFilterObjectWithRefs.h&quot;"/>
    <include name="&quot;FWCore/Utilities/interface/InputTag.h&quot;"/>
    <include name="&quot;DataFormats/Common/interface/traits.h&quot;"/>
    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="trigger">

        <class name="TriggerEventWithRefs"
               fullname="trigger::TriggerEventWithRefs"
               module="DataFormats.HLTReco"
               project=""
               type="regular">
            <baseclass name="public TriggerRefsCollections"/>
            <baseclass name="public edm::DoNotRecordParents"/>
            <comment>
      - but only in the &quot;RAW&quot; case: for a fraction of all events
            </comment>

            <section name="public">

                <class name="TriggerFilterObject"
                       fullname="trigger::TriggerEventWithRefs::TriggerFilterObject"
                       module="DataFormats.HLTReco"
                       project=""
                       type="regular">
                    <comment>
        Helper class: trigger objects firing a single filter
                    </comment>

                    <section name="public">
                        <member>
std::string filterTag_;
                            <comment>
          encoded InputTag of filter product
                            </comment>
                        </member>

                        <member>
size_type photons_;
                            <comment>
          (-&gt; first start index is always 0)
                            </comment>
                        </member>

                        <member>
size_type electrons_;
                        </member>

                        <member>
size_type muons_;
                        </member>

                        <member>
size_type jets_;
                        </member>

                        <member>
size_type composites_;
                        </member>

                        <member>
size_type basemets_;
                        </member>

                        <member>
size_type calomets_;
                        </member>

                        <member>
size_type pixtracks_;
                        </member>

                        <member>
size_type l1em_;
                        </member>

                        <member>
size_type l1muon_;
                        </member>

                        <member>
size_type l1jet_;
                        </member>

                        <member>
size_type l1etmiss_;
                        </member>

                        <member>
size_type l1hfrings_;
                        </member>

                        <constructor name="TriggerFilterObject"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
TriggerFilterObject();
                            <comment>
          constructor
                            </comment>
                        </constructor>

                        <constructor name="TriggerFilterObject"
                                     return=""
                                     args="['const edm::InputTag&amp;','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type','size_type']"
                                     vars="['filterTag','np','ne','nm','nj','nc','nB','nC','nt','l1em','l1muon','l1jet','l1etmiss','l1hfrings']"
                                     qual="">
TriggerFilterObject(const edm::InputTag&amp; filterTag, size_type np, size_type ne, size_type nm, size_type nj, size_type nc, size_type nB, size_type nC, size_type nt, size_type l1em, size_type l1muon, size_type l1jet, size_type l1etmiss, size_type l1hfrings);
                        </constructor>

                    </section>

                    <typemap name="TriggerFilterObject"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject"
                             type="class"/>
                    <typemap name="basemets_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::basemets_"
                             type="member"/>
                    <typemap name="calomets_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::calomets_"
                             type="member"/>
                    <typemap name="composites_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::composites_"
                             type="member"/>
                    <typemap name="electrons_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::electrons_"
                             type="member"/>
                    <typemap name="filterTag_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::filterTag_"
                             type="member"/>
                    <typemap name="jets_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::jets_"
                             type="member"/>
                    <typemap name="l1em_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::l1em_"
                             type="member"/>
                    <typemap name="l1etmiss_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::l1etmiss_"
                             type="member"/>
                    <typemap name="l1hfrings_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::l1hfrings_"
                             type="member"/>
                    <typemap name="l1jet_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::l1jet_"
                             type="member"/>
                    <typemap name="l1muon_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::l1muon_"
                             type="member"/>
                    <typemap name="muons_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::muons_"
                             type="member"/>
                    <typemap name="photons_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::photons_"
                             type="member"/>
                    <typemap name="pixtracks_"
                             value="trigger::TriggerEventWithRefs::TriggerFilterObject::pixtracks_"
                             type="member"/>

                </class>
            </section>
            <section name="public">
                <constructor name="TriggerEventWithRefs"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
TriggerEventWithRefs();
                    <comment>
        constructors
                    </comment>
                </constructor>

                <constructor name="TriggerEventWithRefs"
                             return=""
                             args="['const std::string&amp;','size_type']"
                             vars="['usedProcessName','n']"
                             qual="">
TriggerEventWithRefs(const std::string&amp; usedProcessName, size_type n);
                </constructor>

                <method1 name="addFilterObject"
                         return="void"
                         args="['const edm::InputTag&amp;','const TriggerFilterObjectWithRefs&amp;']"
                         vars="['filterTag','tfowr']"
                         qual="">
void addFilterObject(const edm::InputTag&amp; filterTag, const TriggerFilterObjectWithRefs&amp; tfowr);
                    <comment>
        setters - to build EDProduct
                    </comment>
                </method1>

                <method1 name="usedProcessName"
                         return="const std::string&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::string&amp; usedProcessName() const;
                    <comment>
        getters - for user access
                    </comment>
                </method1>

                <method1 name="size"
                         return="size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
size_type size() const;
                    <comment>
        number of filters
                    </comment>
                </method1>

                <method1 name="filterTag"
                         return="const edm::InputTag"
                         args="['size_type']"
                         vars="['filterIndex']"
                         qual="const">
const edm::InputTag filterTag(size_type filterIndex) const;
                    <comment>
        tag from index
                    </comment>
                </method1>

                <method1 name="filterIndex"
                         return="size_type"
                         args="['const edm::InputTag&amp;']"
                         vars="['filterTag']"
                         qual="const">
size_type filterIndex(const edm::InputTag&amp; filterTag) const;
                    <comment>
        index from tag
                    </comment>
                </method1>

                <method2 name="photonSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; photonSlice(size_type filter) const;
                    <comment>
        slices of objects for a specific filter: [begin,end[
                    </comment>
                </method2>

                <method2 name="electronSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; electronSlice(size_type filter) const;
                </method2>

                <method2 name="muonSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; muonSlice(size_type filter) const;
                </method2>

                <method2 name="jetSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; jetSlice(size_type filter) const;
                </method2>

                <method2 name="compositeSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; compositeSlice(size_type filter) const;
                </method2>

                <method2 name="basemetSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; basemetSlice(size_type filter) const;
                </method2>

                <method2 name="calometSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; calometSlice(size_type filter) const;
                </method2>

                <method2 name="pixtrackSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; pixtrackSlice(size_type filter) const;
                </method2>

                <method2 name="l1emSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; l1emSlice(size_type filter) const;
                </method2>

                <method2 name="l1muonSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; l1muonSlice(size_type filter) const;
                </method2>

                <method2 name="l1jetSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; l1jetSlice(size_type filter) const;
                </method2>

                <method2 name="l1etmissSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; l1etmissSlice(size_type filter) const;
                </method2>

                <method2 name="l1hfringsSlice"
                         return="std::pair&lt;size_type, size_type&gt;"
                         args="['size_type']"
                         vars="['filter']"
                         qual="const">
std::pair&lt;size_type, size_type&gt; l1hfringsSlice(size_type filter) const;
                </method2>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRphoton&amp;']"
                         vars="['filter','ids','photons']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRphoton&amp; photons) const;
                    <comment>
        extract Ref&lt;C&gt;s for a specific filter and of specific physics type
                    </comment>
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRphoton&amp;']"
                         vars="['filter','id','photons']"
                         qual="const">
void getObjects(size_type filter, int id, VRphoton&amp; photons) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRelectron&amp;']"
                         vars="['filter','ids','electrons']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRelectron&amp; electrons) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRelectron&amp;']"
                         vars="['filter','id','electrons']"
                         qual="const">
void getObjects(size_type filter, int id, VRelectron&amp; electrons) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRmuon&amp;']"
                         vars="['filter','ids','muons']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRmuon&amp; muons) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRmuon&amp;']"
                         vars="['filter','id','muons']"
                         qual="const">
void getObjects(size_type filter, int id, VRmuon&amp; muons) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRjet&amp;']"
                         vars="['filter','ids','jets']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRjet&amp; jets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRjet&amp;']"
                         vars="['filter','id','jets']"
                         qual="const">
void getObjects(size_type filter, int id, VRjet&amp; jets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRcomposite&amp;']"
                         vars="['filter','ids','composites']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRcomposite&amp; composites) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRcomposite&amp;']"
                         vars="['filter','id','composites']"
                         qual="const">
void getObjects(size_type filter, int id, VRcomposite&amp; composites) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRbasemet&amp;']"
                         vars="['filter','ids','basemets']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRbasemet&amp; basemets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRbasemet&amp;']"
                         vars="['filter','id','basemets']"
                         qual="const">
void getObjects(size_type filter, int id, VRbasemet&amp; basemets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRcalomet&amp;']"
                         vars="['filter','ids','calomets']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRcalomet&amp; calomets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRcalomet&amp;']"
                         vars="['filter','id','calomets']"
                         qual="const">
void getObjects(size_type filter, int id, VRcalomet&amp; calomets) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRpixtrack&amp;']"
                         vars="['filter','ids','pixtracks']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRpixtrack&amp; pixtracks) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRpixtrack&amp;']"
                         vars="['filter','id','pixtracks']"
                         qual="const">
void getObjects(size_type filter, int id, VRpixtrack&amp; pixtracks) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRl1em&amp;']"
                         vars="['filter','ids','l1em']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRl1em&amp; l1em) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRl1em&amp;']"
                         vars="['filter','id','l1em']"
                         qual="const">
void getObjects(size_type filter, int id, VRl1em&amp; l1em) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRl1muon&amp;']"
                         vars="['filter','ids','l1muon']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRl1muon&amp; l1muon) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRl1muon&amp;']"
                         vars="['filter','id','l1muon']"
                         qual="const">
void getObjects(size_type filter, int id, VRl1muon&amp; l1muon) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRl1jet&amp;']"
                         vars="['filter','ids','l1jet']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRl1jet&amp; l1jet) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRl1jet&amp;']"
                         vars="['filter','id','l1jet']"
                         qual="const">
void getObjects(size_type filter, int id, VRl1jet&amp; l1jet) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRl1etmiss&amp;']"
                         vars="['filter','ids','l1etmiss']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRl1etmiss&amp; l1etmiss) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRl1etmiss&amp;']"
                         vars="['filter','id','l1etmiss']"
                         qual="const">
void getObjects(size_type filter, int id, VRl1etmiss&amp; l1etmiss) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','Vids&amp;','VRl1hfrings&amp;']"
                         vars="['filter','ids','l1hfrings']"
                         qual="const">
void getObjects(size_type filter, Vids&amp; ids, VRl1hfrings&amp; l1hfrings) const;
                </method1>

                <method1 name="getObjects"
                         return="void"
                         args="['size_type','int','VRl1hfrings&amp;']"
                         vars="['filter','id','l1hfrings']"
                         qual="const">
void getObjects(size_type filter, int id, VRl1hfrings&amp; l1hfrings) const;
                </method1>

            </section>

        </class>
    </namespace>

    <type name="TriggerRefsCollections"/>
    <type name="VRbasemet&amp;"/>
    <type name="VRcalomet&amp;"/>
    <type name="VRcomposite&amp;"/>
    <type name="VRelectron&amp;"/>
    <type name="VRjet&amp;"/>
    <type name="VRl1em&amp;"/>
    <type name="VRl1etmiss&amp;"/>
    <type name="VRl1hfrings&amp;"/>
    <type name="VRl1jet&amp;"/>
    <type name="VRl1muon&amp;"/>
    <type name="VRmuon&amp;"/>
    <type name="VRphoton&amp;"/>
    <type name="VRpixtrack&amp;"/>
    <type name="Vids&amp;"/>
    <type name="const TriggerFilterObjectWithRefs&amp;"/>
    <type name="const edm::InputTag"/>
    <type name="const edm::InputTag&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="edm::DoNotRecordParents"/>
    <type name="int"/>
    <type name="size_type"/>
    <type name="std::pair&lt;size_type, size_type&gt;"/>
    <type name="std::string"/>
    <type name="trigger::TriggerEventWithRefs"/>
    <type name="trigger::TriggerEventWithRefs::TriggerFilterObject"/>
    <type name="void"/>
</header>
