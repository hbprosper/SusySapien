<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HLTPerformanceInfo.xml
  Created:  Thu Jan 14 22:49:02 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HLTReco/interface/HLTPerformanceInfo.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/HLTReco/interface/HLTPerformanceInfo.h">

    <include name="&lt;string&gt;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&quot;DataFormats/Common/interface/HLTPathStatus.h&quot;"/>

    <class name="HLTPerformanceInfo"
           fullname="HLTPerformanceInfo"
           module="DataFormats.HLTReco"
           project=""
           type="regular">

        <section name="public">
            <forward name="Path"/>
            <forward name="Module"/>
            <typedef name="PathList"
                     value="std::vector&lt;Path&gt;">
typedef std::vector&lt;Path&gt; PathList;
            </typedef>

            <typedef name="Modules"
                     value="std::vector&lt;Module&gt;">
typedef std::vector&lt;Module&gt; Modules;
            </typedef>

            <typedef name="ModulesInPath"
                     value="std::vector&lt;size_t&gt;">
typedef std::vector&lt;size_t&gt; ModulesInPath;
            </typedef>

            <constructor name="HLTPerformanceInfo"
                         return=""
                         args="['void']"
                         vars="['']"
                         qual="">
HLTPerformanceInfo();
            </constructor>


            <class name="Module"
                   fullname="HLTPerformanceInfo::Module"
                   module="DataFormats.HLTReco"
                   project=""
                   type="regular">

                <section name="public">
                    <constructor name="Module"
                                 return=""
                                 args="['void']"
                                 vars="['']"
                                 qual="">
Module();
                    </constructor>

                    <constructor name="Module"
                                 return=""
                                 args="['const char*','const double','const double','edm::HLTPathStatus=edm::hlt::Ready']"
                                 vars="['n','dt','dtCPU','stat']"
                                 qual="">
Module(const char* n, const double dt, const double dtCPU, edm::HLTPathStatus stat=edm::hlt::Ready);
                        <comment>
       new constructor adding cpu time
                        </comment>
                    </constructor>

                    <method1 name="name"
                             return="std::string"
                             args="['void']"
                             vars="['']"
                             qual="const">
std::string name() const;
                    </method1>

                    <method1 name="time"
                             return="double"
                             args="['void']"
                             vars="['']"
                             qual="const">
double time() const;
                    </method1>

                    <method1 name="cputime"
                             return="double"
                             args="['void']"
                             vars="['']"
                             qual="const">
double cputime() const;
                    </method1>

                    <method1 name="status"
                             return="edm::HLTPathStatus"
                             args="['void']"
                             vars="['']"
                             qual="const">
edm::HLTPathStatus status() const;
                    </method1>

                    <operator name="operator=="
                              return="bool"
                              args="['const char*']"
                              vars="['tname']"
                              qual="">
bool operator==(const char* tname);
                    </operator>

                    <method1 name="clear"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void clear();
                    </method1>

                    <method1 name="setTime"
                             return="void"
                             args="['double']"
                             vars="['t']"
                             qual="">
void setTime(double t);
                    </method1>

                    <method1 name="setCPUTime"
                             return="void"
                             args="['double']"
                             vars="['t']"
                             qual="">
void setCPUTime(double t);
                    </method1>

                    <method1 name="setStatus"
                             return="void"
                             args="['edm::HLTPathStatus']"
                             vars="['status']"
                             qual="">
void setStatus(edm::HLTPathStatus status);
                    </method1>

                </section>

                <typemap name="Module"
                         value="HLTPerformanceInfo::Module"
                         type="class"/>

            </class>

            <class name="Path"
                   fullname="HLTPerformanceInfo::Path"
                   module="DataFormats.HLTReco"
                   project=""
                   type="regular">
                <comment>
     in this version the module can no longer iterate over the paths
     by itself, since it has no access to the actual module list.
                </comment>

                <section name="public">
                    <constructor name="Path"
                                 return=""
                                 args="['const std::string=&quot;unknown&quot;']"
                                 vars="['n']"
                                 qual="">
Path(const std::string n=&quot;unknown&quot;);
                    </constructor>

                    <method1 name="name"
                             return="std::string"
                             args="['void']"
                             vars="['']"
                             qual="const">
std::string name() const;
                    </method1>

                    <method1 name="setStatus"
                             return="void"
                             args="['const edm::HLTPathStatus&amp;']"
                             vars="['result']"
                             qual="">
void setStatus(const edm::HLTPathStatus&amp; result);
                    </method1>

                    <method1 name="status"
                             return="edm::HLTPathStatus"
                             args="['void']"
                             vars="['']"
                             qual="const">
edm::HLTPathStatus status() const;
                    </method1>

                    <method1 name="clear"
                             return="void"
                             args="['void']"
                             vars="['']"
                             qual="">
void clear();
                    </method1>

                    <operator name="operator=="
                              return="bool"
                              args="['const char*']"
                              vars="['tname']"
                              qual="">
bool operator==(const char* tname);
                    </operator>

                    <operator name="operator[]"
                              return="const size_t"
                              args="['size_t']"
                              vars="['m']"
                              qual="const">
const size_t operator[](size_t m) const;
                    </operator>

                    <method1 name="addModuleRef"
                             return="void"
                             args="['size_t']"
                             vars="['m']"
                             qual="">
void addModuleRef(size_t m);
                    </method1>

                    <method1 name="begin"
                             return="ModulesInPath::const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="">
ModulesInPath::const_iterator begin();
                    </method1>

                    <method1 name="end"
                             return="ModulesInPath::const_iterator"
                             args="['void']"
                             vars="['']"
                             qual="">
ModulesInPath::const_iterator end();
                    </method1>

                    <method1 name="getModuleIndex"
                             return="size_t"
                             args="['size_t']"
                             vars="['j']"
                             qual="const">
size_t getModuleIndex(size_t j) const;
                    </method1>

                    <method1 name="numberOfModules"
                             return="size_t"
                             args="['void']"
                             vars="['']"
                             qual="const">
size_t numberOfModules() const;
                    </method1>

                </section>

                <typemap name="Path"
                         value="HLTPerformanceInfo::Path"
                         type="class"/>

            </class>
        </section>
        <section name="public">
            <method1 name="addPath"
                     return="void"
                     args="['const Path&amp;']"
                     vars="['p']"
                     qual="">
void addPath(const Path&amp; p);
            </method1>

            <method1 name="addModule"
                     return="void"
                     args="['const Module&amp;']"
                     vars="['m']"
                     qual="">
void addModule(const Module&amp; m);
            </method1>

            <method1 name="addModuleToPath"
                     return="void"
                     args="['const char*','const char*']"
                     vars="['mod','path']"
                     qual="">
void addModuleToPath(const char* mod, const char* path);
                <comment>
     by name
                </comment>
            </method1>

            <method1 name="addModuleToPath"
                     return="void"
                     args="['const size_t','const size_t']"
                     vars="['mod','path']"
                     qual="">
void addModuleToPath(const size_t mod, const size_t path);
                <comment>
     by index
                </comment>
            </method1>

            <method1 name="clear"
                     return="void"
                     args="['void']"
                     vars="['']"
                     qual="">
void clear();
            </method1>

            <method1 name="clearModules"
                     return="void"
                     args="['void']"
                     vars="['']"
                     qual="">
void clearModules();
            </method1>

            <method1 name="getModuleOnPath"
                     return="const Module&amp;"
                     args="['size_t','size_t']"
                     vars="['m','p']"
                     qual="const">
const Module&amp; getModuleOnPath(size_t m, size_t p) const;
                <comment>
     non-const?
                </comment>
            </method1>

            <method1 name="getModule"
                     return="const Module&amp;"
                     args="['size_t']"
                     vars="['m']"
                     qual="const">
const Module&amp; getModule(size_t m) const;
            </method1>

            <method1 name="getPath"
                     return="const Path&amp;"
                     args="['size_t']"
                     vars="['p']"
                     qual="const">
const Path&amp; getPath(size_t p) const;
            </method1>

            <method1 name="findModule"
                     return="Modules::iterator"
                     args="['const char*']"
                     vars="['moduleInstanceName']"
                     qual="">
Modules::iterator findModule(const char* moduleInstanceName);
                <comment>
     find a module, given its name.
     returns endModules() on failure
                </comment>
            </method1>

            <method1 name="findPath"
                     return="PathList::iterator"
                     args="['const char*']"
                     vars="['pathName']"
                     qual="">
PathList::iterator findPath(const char* pathName);
            </method1>

            <method1 name="moduleIndexInPath"
                     return="int"
                     args="['const char*','const char*']"
                     vars="['mod','path']"
                     qual="">
int moduleIndexInPath(const char* mod, const char* path);
            </method1>

            <method1 name="numberOfPaths"
                     return="size_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
size_t numberOfPaths() const;
            </method1>

            <method1 name="numberOfModules"
                     return="size_t"
                     args="['void']"
                     vars="['']"
                     qual="const">
size_t numberOfModules() const;
            </method1>

            <method1 name="beginPaths"
                     return="PathList::iterator"
                     args="['void']"
                     vars="['']"
                     qual="">
PathList::iterator beginPaths();
            </method1>

            <method1 name="endPaths"
                     return="PathList::iterator"
                     args="['void']"
                     vars="['']"
                     qual="">
PathList::iterator endPaths();
            </method1>

            <method1 name="beginModules"
                     return="Modules::const_iterator"
                     args="['void']"
                     vars="['']"
                     qual="const">
Modules::const_iterator beginModules() const;
            </method1>

            <method1 name="endModules"
                     return="Modules::const_iterator"
                     args="['void']"
                     vars="['']"
                     qual="const">
Modules::const_iterator endModules() const;
            </method1>

            <method1 name="totalTime"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double totalTime() const;
            </method1>

            <method1 name="totalCPUTime"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double totalCPUTime() const;
            </method1>

            <method1 name="longestModuleTime"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double longestModuleTime() const;
            </method1>

            <method1 name="longestModuleCPUTime"
                     return="double"
                     args="['void']"
                     vars="['']"
                     qual="const">
double longestModuleCPUTime() const;
            </method1>

            <method1 name="longestModuleTimeName"
                     return="const char*"
                     args="['void']"
                     vars="['']"
                     qual="const">
const char* longestModuleTimeName() const;
            </method1>

            <method1 name="longestModuleCPUTimeName"
                     return="const char*"
                     args="['void']"
                     vars="['']"
                     qual="const">
const char* longestModuleCPUTimeName() const;
            </method1>

            <method1 name="totalPathTime"
                     return="double"
                     args="['const size_t']"
                     vars="['path']"
                     qual="">
double totalPathTime(const size_t path);
            </method1>

            <method1 name="totalPathCPUTime"
                     return="double"
                     args="['const size_t']"
                     vars="['path']"
                     qual="">
double totalPathCPUTime(const size_t path);
            </method1>

            <method1 name="setStatusOfModulesFromPath"
                     return="void"
                     args="['const char*']"
                     vars="['pathName']"
                     qual="">
void setStatusOfModulesFromPath(const char* pathName);
            </method1>

            <method1 name="uniqueModule"
                     return="bool"
                     args="['const char*']"
                     vars="['mod']"
                     qual="const">
bool uniqueModule(const char* mod) const;
                <comment>
     is this module only on one path?
                </comment>
            </method1>

        </section>

        <typemap name="Modules"
                 value="std::vector&lt;Module&gt;"
                 type="typedef"/>
        <typemap name="ModulesInPath"
                 value="std::vector&lt;size_t&gt;"
                 type="typedef"/>
        <typemap name="PathList"
                 value="std::vector&lt;Path&gt;"
                 type="typedef"/>

    </class>
    <typedef name="HLTPerformanceInfoCollection"
             value="std::vector&lt;HLTPerformanceInfo&gt;">
typedef std::vector&lt;HLTPerformanceInfo&gt; HLTPerformanceInfoCollection;
    </typedef>


    <type name="HLTPerformanceInfo"/>
    <type name="HLTPerformanceInfo::Module"/>
    <type name="HLTPerformanceInfo::Path"/>
    <type name="Modules::const_iterator"/>
    <type name="Modules::iterator"/>
    <type name="ModulesInPath::const_iterator"/>
    <type name="PathList::iterator"/>
    <type name="bool"/>
    <type name="const Module&amp;"/>
    <type name="const Path&amp;"/>
    <type name="const char*"/>
    <type name="const double"/>
    <type name="const edm::HLTPathStatus&amp;"/>
    <type name="const size_t"/>
    <type name="const std::string"/>
    <type name="double"/>
    <type name="edm::HLTPathStatus"/>
    <type name="int"/>
    <type name="size_t"/>
    <type name="std::string"/>
    <type name="void"/>
</header>
