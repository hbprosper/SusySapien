<?xml version="1.0"?>
<!--
==============================================================================
  XML File: ModuleTiming.xml
  Created:  Fri Jan 15 20:47:47 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HLTReco/interface/ModuleTiming.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/HLTReco/interface/ModuleTiming.h">

    <include name="&lt;vector&gt;"/>
    <include name="&lt;string&gt;"/>

    <namespace name="edm">
        <comment>
   Original version: July 2006, Christos Leonidopoulos
        </comment>

        <class name="ModuleTime"
               fullname="edm::ModuleTime"
               module="DataFormats.HLTReco"
               project=""
               type="regular">
            <comment>
     structure holding the processing time (per event) and name of a module
            </comment>

            <section name="public">
                <constructor name="ModuleTime"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
ModuleTime();
                </constructor>

                <constructor name="ModuleTime"
                             return=""
                             args="['std::string','double']"
                             vars="['Name','Time']"
                             qual="">
ModuleTime(std::string Name, double Time);
                </constructor>

                <destructor name="~ModuleTime"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~ModuleTime();
                </destructor>

                <method1 name="name"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string name() const;
                </method1>

                <method1 name="time"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double time() const;
                </method1>

            </section>

        </class>

        <class name="EventTime"
               fullname="edm::EventTime"
               module="DataFormats.HLTReco"
               project=""
               type="regular">
            <comment>
     structure holding processing info for all modules in event (+total time)
            </comment>

            <section name="public">
                <constructor name="EventTime"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
EventTime();
                </constructor>

                <destructor name="~EventTime"
                            return=""
                            args="['void']"
                            vars="['']"
                            qual="">
~EventTime();
                </destructor>

                <method1 name="size"
                         return="unsigned"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned size() const;
                    <comment>
       # of modules contained in event
                    </comment>
                </method1>

                <method1 name="moduleTime"
                         return="const ModuleTime&amp;"
                         args="['unsigned']"
                         vars="['i']"
                         qual="">
const ModuleTime&amp; moduleTime(unsigned i);
                    <comment>
       get hold of ModuleTime structure for module #i, where 0 &lt;= i &lt; size()
                    </comment>
                </method1>

                <method1 name="tot_time"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double tot_time() const;
                    <comment>
       get total processing time for event (secs)
                    </comment>
                </method1>

                <method1 name="name"
                         return="std::string"
                         args="['unsigned']"
                         vars="['i']"
                         qual="const">
std::string name(unsigned i) const;
                    <comment>
       get name for module #i, where 0 &lt;= i &lt; size()
                    </comment>
                </method1>

                <method1 name="time"
                         return="double"
                         args="['unsigned']"
                         vars="['i']"
                         qual="const">
double time(unsigned i) const;
                    <comment>
       get processing time for module #i (secs), where 0 &lt;= i &lt; size()
                    </comment>
                </method1>

                <method1 name="addModuleTime"
                         return="void"
                         args="['const ModuleTime&amp;']"
                         vars="['m']"
                         qual="">
void addModuleTime(const ModuleTime&amp; m);
                    <comment>
       add module structure to event
                    </comment>
                </method1>

                <method1 name="reset"
                         return="void"
                         args="['void']"
                         vars="['']"
                         qual="">
void reset();
                    <comment>
       reset all info (ie. from previous event)
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>

    <type name="const ModuleTime&amp;"/>
    <type name="double"/>
    <type name="edm::EventTime"/>
    <type name="edm::ModuleTime"/>
    <type name="std::string"/>
    <type name="unsigned"/>
    <type name="void"/>
</header>
