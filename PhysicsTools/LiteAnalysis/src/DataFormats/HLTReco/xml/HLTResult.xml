<?xml version="1.0"?>
<!--
==============================================================================
  XML File: HLTResult.xml
  Created:  Thu Jan 14 22:49:02 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/HLTReco/interface/HLTResult.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/HLTReco/interface/HLTResult.h">

    <include name="&lt;boost/static_assert.hpp&gt;"/>
    <include name="&lt;algorithm&gt;"/>

    <namespace name="reco">

        <namespace name="hlt">

            <class name="wordConstants"
                   fullname="reco::hlt::wordConstants&lt;numberOfBits, word&gt;"
                   module="DataFormats.HLTReco"
                   project=""
                   type="template struct"
                   template="template&lt;unsigned int numberOfBits, typename word=unsigned short&gt;">

                <section>
                    <enum name="">
enum {

 bytesInAWord=sizeof(word), 
 numberOfWords=1+(numberOfBits-1)/bytesInAWord
      };
                        <field name="bytesInAWord" value="sizeof(word)"/>
                        <field name="numberOfWords"
                               value="1+(numberOfBits-1)/bytesInAWord"/>
                    </enum>

                </section>

                <typemap name="bytesInAWord "
                         value="reco::hlt::wordConstants&lt;numberOfBits, word&gt;::bytesInAWord "
                         type="enum"/>
                <typemap name="numberOfWords "
                         value="reco::hlt::wordConstants&lt;numberOfBits, word&gt;::numberOfWords "
                         type="enum"/>

            </class>

            <class name="mask"
                   fullname="reco::hlt::mask&lt;i, W&gt;"
                   module="DataFormats.HLTReco"
                   project=""
                   type="template struct"
                   template="template&lt;unsigned short i, typename W&gt;">

                <section>
                    <enum name="">
enum {

 wordOffset=i/W::numberOfWords, 
 bitOffset=i % W::numberOfWords, 
 value=mask&lt;bitOffset-1, W&gt;::value&lt;&lt;1
      };
                        <field name="wordOffset" value="i/W::numberOfWords"/>
                        <field name="bitOffset" value="i % W::numberOfWords"/>
                        <field name="value" value="mask&amp;lt;bitOffset-1"/>
                        <field name="W&gt;::value&lt;&lt;1" value=""/>
                    </enum>

                </section>

                <typemap name="W&gt;::value &lt;&lt; 1"
                         value="reco::hlt::mask&lt;i, W&gt;::W&gt;::value &lt;&lt; 1"
                         type="enum"/>
                <typemap name="bitOffset "
                         value="reco::hlt::mask&lt;i, W&gt;::bitOffset "
                         type="enum"/>
                <typemap name="value "
                         value="reco::hlt::mask&lt;i, W&gt;::value "
                         type="enum"/>
                <typemap name="wordOffset "
                         value="reco::hlt::mask&lt;i, W&gt;::wordOffset "
                         type="enum"/>

            </class>

            <class name="mask&lt;0, W&gt;"
                   fullname="reco::hlt::mask&lt;0, W&gt;"
                   module="DataFormats.HLTReco"
                   project=""
                   type="specialized template struct"
                   template="template&lt;typename W&gt;">

                <section>
                    <enum name="">
enum {

 wordOffset=0, 
 bitOffset=0, 
 value=1
      };
                        <field name="wordOffset" value="0"/>
                        <field name="bitOffset" value="0"/>
                        <field name="value" value="1"/>
                    </enum>

                </section>

                <typemap name="bitOffset "
                         value="reco::hlt::mask&lt;0, W&gt;::bitOffset "
                         type="enum"/>
                <typemap name="value "
                         value="reco::hlt::mask&lt;0, W&gt;::value "
                         type="enum"/>
                <typemap name="wordOffset "
                         value="reco::hlt::mask&lt;0, W&gt;::wordOffset "
                         type="enum"/>

            </class>
        </namespace>

        <class name="HLTResult"
               fullname="reco::HLTResult&lt;numberOfBits, word&gt;"
               module="DataFormats.HLTReco"
               project=""
               type="template"
               template="template&lt;unsigned int numberOfBits, typename word=unsigned short&gt;">

            <section>
                <constructor name="BOOST_STATIC_ASSERT"
                             return=""
                             args="['numberOfBits &gt;']"
                             vars="['0']"
                             qual="">
BOOST_STATIC_ASSERT(numberOfBits &gt; 0);
                </constructor>

            </section>
            <section name="public">
                <constructor name="HLTResult"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
HLTResult();
                </constructor>

                <constructor name="HLTResult"
                             return=""
                             args="['word[]']"
                             vars="['w[]']"
                             qual="">
HLTResult(word w[]);
                </constructor>

            </section>
            <section name="public">
                <method2 name="match"
                         return="template&lt;unsigned short i&gt; bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
template&lt;unsigned short i&gt;     bool match() const;
                </method2>

                <method2 name="set"
                         return="template&lt;unsigned short i&gt; void"
                         args="['void']"
                         vars="['']"
                         qual="">
template&lt;unsigned short i&gt;     void set();
                </method2>

                <method2 name="unSet"
                         return="template&lt;unsigned short i&gt; void"
                         args="['void']"
                         vars="['']"
                         qual="">
template&lt;unsigned short i&gt;     void unSet();
                </method2>

            </section>

        </class>
    </namespace>

    <type name="enum"/>
    <type name="numberOfBits &gt;"/>
    <type name="reco::HLTResult&lt;numberOfBits, word&gt;"/>
    <type name="reco::hlt::mask&lt;0, W&gt;"/>
    <type name="reco::hlt::mask&lt;i, W&gt;"/>
    <type name="reco::hlt::wordConstants&lt;numberOfBits, word&gt;"/>
    <type name="template&lt;unsigned short i&gt; bool"/>
    <type name="template&lt;unsigned short i&gt; void"/>
    <type name="void"/>
    <type name="word[]"/>
</header>
