<?xml version="1.0"?>
<!--
==============================================================================
  XML File: MuonTimeExtra.xml
  Created:  Fri Jan 15 20:46:53 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/MuonReco/interface/MuonTimeExtra.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/MuonReco/interface/MuonTimeExtra.h">


    <namespace name="reco">
        <comment>
    \class reco::MuonTimeExtra MuonTimeExtra.h DataFormats/MuonReco/interface/MuonTimeExtra.h

   A class holding timing information calculated for a muon.

   \author Piotr Traczyk, CERN

   \version $Id: MuonTimeExtra.h,v 1.1 2009/03/27 02:35:08 ptraczyk Exp $
        </comment>

        <class name="MuonTimeExtra"
               fullname="reco::MuonTimeExtra"
               module="DataFormats.MuonReco"
               project=""
               type="regular">

            <section name="public">
                <constructor name="MuonTimeExtra"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
MuonTimeExtra();
                </constructor>

                <enum name="Direction">
enum Direction {
 OutsideIn=-1, Undefined=0, InsideOut=1 };
                    <field name="OutsideIn" value="-1"/>
                    <field name="Undefined" value="0"/>
                    <field name="InsideOut" value="1"/>
                </enum>

                <method1 name="nDof"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int nDof() const;
                    <comment>
          number of measurements used in timing calculation
                    </comment>
                </method1>

                <method1 name="setNDof"
                         return="void"
                         args="['const int']"
                         vars="['nDof']"
                         qual="">
void setNDof(const int nDof);
                </method1>

                <method1 name="inverseBeta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float inverseBeta() const;
                    <comment>
          (time is constraint to the bunch crossing time)
                    </comment>
                </method1>

                <method1 name="inverseBetaErr"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float inverseBetaErr() const;
                </method1>

                <method1 name="setInverseBeta"
                         return="void"
                         args="['const float']"
                         vars="['iBeta']"
                         qual="">
void setInverseBeta(const float iBeta);
                </method1>

                <method1 name="setInverseBetaErr"
                         return="void"
                         args="['const float']"
                         vars="['iBetaErr']"
                         qual="">
void setInverseBetaErr(const float iBetaErr);
                </method1>

                <method1 name="freeInverseBeta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float freeInverseBeta() const;
                    <comment>
            negative - inward moving particle
                    </comment>
                </method1>

                <method1 name="freeInverseBetaErr"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float freeInverseBetaErr() const;
                </method1>

                <method1 name="setFreeInverseBeta"
                         return="void"
                         args="['const float']"
                         vars="['iBeta']"
                         qual="">
void setFreeInverseBeta(const float iBeta);
                </method1>

                <method1 name="setFreeInverseBetaErr"
                         return="void"
                         args="['const float']"
                         vars="['iBetaErr']"
                         qual="">
void setFreeInverseBetaErr(const float iBetaErr);
                </method1>

                <method1 name="timeAtIpInOut"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float timeAtIpInOut() const;
                    <comment>
           a) particle is moving from inside out
                    </comment>
                </method1>

                <method1 name="timeAtIpInOutErr"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float timeAtIpInOutErr() const;
                </method1>

                <method1 name="setTimeAtIpInOut"
                         return="void"
                         args="['const float']"
                         vars="['timeIp']"
                         qual="">
void setTimeAtIpInOut(const float timeIp);
                </method1>

                <method1 name="setTimeAtIpInOutErr"
                         return="void"
                         args="['const float']"
                         vars="['timeErr']"
                         qual="">
void setTimeAtIpInOutErr(const float timeErr);
                </method1>

                <method1 name="timeAtIpOutIn"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float timeAtIpOutIn() const;
                    <comment>
           b) particle is moving from outside in
                    </comment>
                </method1>

                <method1 name="timeAtIpOutInErr"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float timeAtIpOutInErr() const;
                </method1>

                <method1 name="setTimeAtIpOutIn"
                         return="void"
                         args="['const float']"
                         vars="['timeIp']"
                         qual="">
void setTimeAtIpOutIn(const float timeIp);
                </method1>

                <method1 name="setTimeAtIpOutInErr"
                         return="void"
                         args="['const float']"
                         vars="['timeErr']"
                         qual="">
void setTimeAtIpOutInErr(const float timeErr);
                </method1>

                <method1 name="direction"
                         return="Direction"
                         args="['void']"
                         vars="['']"
                         qual="const">
Direction direction() const;
                    <comment>
          direction estimation based on time dispersion
                    </comment>
                </method1>

            </section>

            <typemap name="Direction"
                     value="reco::MuonTimeExtra::Direction"
                     type="enum"/>
            <typemap name="InsideOut "
                     value="reco::MuonTimeExtra::InsideOut "
                     type="enum"/>
            <typemap name="OutsideIn "
                     value="reco::MuonTimeExtra::OutsideIn "
                     type="enum"/>
            <typemap name="Undefined "
                     value="reco::MuonTimeExtra::Undefined "
                     type="enum"/>

        </class>
    </namespace>

    <type name="Direction"/>
    <type name="const float"/>
    <type name="const int"/>
    <type name="enum Direction"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::MuonTimeExtra"/>
    <type name="void"/>
</header>
