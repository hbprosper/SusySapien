<?xml version="1.0"?>
<!--
==============================================================================
  XML File: MuonSegmentMatch.xml
  Created:  Fri Jan 15 20:46:52 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/MuonReco/interface/MuonSegmentMatch.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/MuonReco/interface/MuonSegmentMatch.h">

    <include name="&lt;cmath&gt;"/>

    <namespace name="reco">

        <class name="MuonSegmentMatch"
               fullname="reco::MuonSegmentMatch"
               module="DataFormats.MuonReco"
               project=""
               type="regular">

            <section name="public">
                <constant name="Arbitrated"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;8"/>
                <constant name="BestInChamberByDX"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;9"/>
                <constant name="BestInChamberByDR"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;10"/>
                <constant name="BestInChamberByDXSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;11"/>
                <constant name="BestInChamberByDRSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;12"/>
                <constant name="BestInStationByDX"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;13"/>
                <constant name="BestInStationByDR"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;14"/>
                <constant name="BestInStationByDXSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;15"/>
                <constant name="BestInStationByDRSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;16"/>
                <constant name="BelongsToTrackByDX"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;17"/>
                <constant name="BelongsToTrackByDR"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;18"/>
                <constant name="BelongsToTrackByDXSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;19"/>
                <constant name="BelongsToTrackByDRSlope"
                          type="static const unsigned int"
                          value="1&amp;lt;&amp;lt;20"/>
                <member>
float x;
                </member>

                <member>
float y;
                </member>

                <member>
float xErr;
                </member>

                <member>
float yErr;
                </member>

                <member>
float dXdZ;
                </member>

                <member>
float dYdZ;
                </member>

                <member>
float dXdZErr;
                </member>

                <member>
float dYdZErr;
                </member>

                <member>
unsigned int mask;
                </member>

                <member>
bool hasZed_;
                </member>

                <member>
bool hasPhi_;
                </member>

                <method1 name="isMask"
                         return="bool"
                         args="['unsigned int=Arbitrated']"
                         vars="['flag']"
                         qual="const">
bool isMask(unsigned int flag=Arbitrated) const;
                </method1>

                <method1 name="setMask"
                         return="void"
                         args="['unsigned int']"
                         vars="['flag']"
                         qual="">
void setMask(unsigned int flag);
                </method1>

                <member>
float t0;
                </member>

                <constructor name="MuonSegmentMatch"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
MuonSegmentMatch();
                </constructor>

                <method1 name="hasZed"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool hasZed() const;
                </method1>

                <method1 name="hasPhi"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool hasPhi() const;
                </method1>

            </section>

            <typemap name="dXdZ"
                     value="reco::MuonSegmentMatch::dXdZ"
                     type="member"/>
            <typemap name="dXdZErr"
                     value="reco::MuonSegmentMatch::dXdZErr"
                     type="member"/>
            <typemap name="dYdZ"
                     value="reco::MuonSegmentMatch::dYdZ"
                     type="member"/>
            <typemap name="dYdZErr"
                     value="reco::MuonSegmentMatch::dYdZErr"
                     type="member"/>
            <typemap name="hasPhi_"
                     value="reco::MuonSegmentMatch::hasPhi_"
                     type="member"/>
            <typemap name="hasZed_"
                     value="reco::MuonSegmentMatch::hasZed_"
                     type="member"/>
            <typemap name="mask"
                     value="reco::MuonSegmentMatch::mask"
                     type="member"/>
            <typemap name="t0"
                     value="reco::MuonSegmentMatch::t0"
                     type="member"/>
            <typemap name="x"
                     value="reco::MuonSegmentMatch::x"
                     type="member"/>
            <typemap name="xErr"
                     value="reco::MuonSegmentMatch::xErr"
                     type="member"/>
            <typemap name="y"
                     value="reco::MuonSegmentMatch::y"
                     type="member"/>
            <typemap name="yErr"
                     value="reco::MuonSegmentMatch::yErr"
                     type="member"/>

        </class>
    </namespace>

    <type name="bool"/>
    <type name="float"/>
    <type name="reco::MuonSegmentMatch"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
