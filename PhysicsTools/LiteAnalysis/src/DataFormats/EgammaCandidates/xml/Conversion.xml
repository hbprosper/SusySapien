<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Conversion.xml
  Created:  Fri Jan 15 20:46:17 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaCandidates/interface/Conversion.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/EgammaCandidates/interface/Conversion.h">

    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalVector.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>
    <include name="&quot;DataFormats/VertexReco/interface/Vertex.h&quot;"/>
    <include name="&quot;DataFormats/CaloRecHit/interface/CaloCluster.h&quot;"/>
    <include name="&quot;DataFormats/CaloRecHit/interface/CaloClusterFwd.h&quot;"/>

    <namespace name="reco">

        <class name="Conversion"
               fullname="reco::Conversion"
               module="DataFormats.EgammaCandidates"
               project=""
               type="regular">

            <section name="public">
                <enum name="ConversionAlgorithm">
enum ConversionAlgorithm {
undefined=0, 
    ecalSeeded=1, 
    trackerOnly=2, 
    mixed=3, 
    algoSize=4};
                    <field name="undefined" value="0"/>
                    <field name="ecalSeeded" value="1"/>
                    <field name="trackerOnly" value="2"/>
                    <field name="mixed" value="3"/>
                    <field name="algoSize" value="4"/>
                </enum>

                <constant name="algoNames[]"
                          type="static const std::string"
                          value=""/>
                <constructor name="Conversion"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Conversion();
                    <comment>
         Default constructor
                    </comment>
                </constructor>

                <constructor name="Conversion"
                             return=""
                             args="['const reco::CaloClusterPtrVector','const std::vector&lt;reco::TrackRef&gt;','const std::vector&lt;math::XYZPoint&gt;','const reco::Vertex&amp;','const std::vector&lt;reco::CaloClusterPtr&gt;&amp;','const float','const std::vector&lt;math::XYZVector&gt;&amp;','const std::vector&lt;math::XYZVector&gt;&amp;','ConversionAlgorithm=undefined']"
                             vars="['clu','tr','trackPositionAtEcal','convVtx','matchingBC','DCA','trackPin','trackPout','']"
                             qual="">
Conversion(const reco::CaloClusterPtrVector clu, const std::vector&lt;reco::TrackRef&gt; tr, const std::vector&lt;math::XYZPoint&gt; trackPositionAtEcal, const reco::Vertex&amp; convVtx, const std::vector&lt;reco::CaloClusterPtr&gt;&amp; matchingBC, const float DCA, const std::vector&lt;math::XYZVector&gt;&amp; trackPin, const std::vector&lt;math::XYZVector&gt;&amp; trackPout, ConversionAlgorithm=undefined);
                </constructor>

                <destructor name="~Conversion"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Conversion();
                    <comment>
          destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="Conversion*"
                         args="['void']"
                         vars="['']"
                         qual="const">
Conversion* clone() const;
                    <comment>
          returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="caloCluster"
                         return="reco::CaloClusterPtrVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::CaloClusterPtrVector caloCluster() const;
                    <comment>
          Poiner to CaloCluster (foe Egamma Conversions it points to  a SuperCluster)
                    </comment>
                </method1>

                <method2 name="tracks"
                         return="std::vector&lt;reco::TrackRef&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;reco::TrackRef&gt; tracks() const;
                    <comment>
          vector of references to  tracks
                    </comment>
                </method2>

                <method1 name="conversionVertex"
                         return="const reco::Vertex&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const reco::Vertex&amp; conversionVertex() const;
                    <comment>
          returns  the reco conversion vertex
                    </comment>
                </method1>

                <method1 name="isConverted"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isConverted() const;
                    <comment>
          Bool flagging objects having track size &gt;0
                    </comment>
                </method1>

                <method1 name="nTracks"
                         return="unsigned int"
                         args="['void']"
                         vars="['']"
                         qual="const">
unsigned int nTracks() const;
                    <comment>
          Number of tracks= 0,1,2
                    </comment>
                </method1>

                <method1 name="pairInvariantMass"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pairInvariantMass() const;
                    <comment>
          if nTracks=2 returns the pair invariant mass
                    </comment>
                </method1>

                <method1 name="pairCotThetaSeparation"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double pairCotThetaSeparation() const;
                    <comment>
          Delta cot(Theta) where Theta is the angle in the (y,z) plane between the two tracks
                    </comment>
                </method1>

                <method1 name="pairMomentum"
                         return="GlobalVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
GlobalVector pairMomentum() const;
                    <comment>
          Conversion tracks momentum
                    </comment>
                </method1>

                <method1 name="EoverP"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double EoverP() const;
                    <comment>
          is stored in the conversion, this method returns the energy sum of clusters divided by the  track pair momentum
                    </comment>
                </method1>

                <method1 name="zOfPrimaryVertexFromTracks"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double zOfPrimaryVertexFromTracks() const;
                    <comment>
          set primary event vertex used to define photon direction
                    </comment>
                </method1>

                <method1 name="distOfMinimumApproach"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double distOfMinimumApproach() const;
                    <comment>
         Dist of minimum approach between tracks
                    </comment>
                </method1>

                <method1 name="dPhiTracksAtVtx"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dPhiTracksAtVtx() const;
                    <comment>
         deltaPhi tracks at innermost point
                    </comment>
                </method1>

                <method1 name="dPhiTracksAtEcal"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dPhiTracksAtEcal() const;
                    <comment>
         deltaPhi tracks at ECAl
                    </comment>
                </method1>

                <method1 name="dEtaTracksAtEcal"
                         return="double"
                         args="['void']"
                         vars="['']"
                         qual="const">
double dEtaTracksAtEcal() const;
                    <comment>
         deltaEta tracks at ECAl
                    </comment>
                </method1>

                <method2 name="ecalImpactPosition"
                         return="const std::vector&lt;math::XYZPoint&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;math::XYZPoint&gt;&amp; ecalImpactPosition() const;
                    <comment>
          positions of the track extrapolation at the ECAL front face
                    </comment>
                </method2>

                <method2 name="bcMatchingWithTracks"
                         return="const std::vector&lt;reco::CaloClusterPtr&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;reco::CaloClusterPtr&gt;&amp; bcMatchingWithTracks() const;
                    <comment>
          pair of BC matching a posteriori the tracks
                    </comment>
                </method2>

                <method2 name="tracksSigned_d0"
                         return="std::vector&lt;double&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;double&gt; tracksSigned_d0() const;
                    <comment>
          signed transverse impact parameter for each track
                    </comment>
                </method2>

                <method2 name="tracksPout"
                         return="const std::vector&lt;math::XYZVector&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;math::XYZVector&gt;&amp; tracksPout() const;
                    <comment>
          Vector of track momentum measured at the outermost hit
                    </comment>
                </method2>

                <method2 name="tracksPin"
                         return="const std::vector&lt;math::XYZVector&gt;&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const std::vector&lt;math::XYZVector&gt;&amp; tracksPin() const;
                    <comment>
          Vector of track momentum measured at the innermost hit
                    </comment>
                </method2>

                <method1 name="setConversionAlgorithm"
                         return="void"
                         args="['const ConversionAlgorithm','bool=true']"
                         vars="['a','set']"
                         qual="">
void setConversionAlgorithm(const ConversionAlgorithm a, bool set=true);
                    <comment>
          Conversion Track algorithm/provenance
                    </comment>
                </method1>

                <method1 name="algo"
                         return="ConversionAlgorithm"
                         args="['void']"
                         vars="['']"
                         qual="const">
ConversionAlgorithm algo() const;
                </method1>

                <method1 name="algoName"
                         return="std::string"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::string algoName() const;
                </method1>

                <method1 name="algoName"
                         return="static std::string"
                         args="['ConversionAlgorithm']"
                         vars="['']"
                         qual="">
static std::string algoName(ConversionAlgorithm);
                </method1>

                <method1 name="algoByName"
                         return="static ConversionAlgorithm"
                         args="['const std::string&amp;']"
                         vars="['name']"
                         qual="">
static ConversionAlgorithm algoByName(const std::string&amp; name);
                </method1>

            </section>

            <typemap name="ConversionAlgorithm"
                     value="reco::Conversion::ConversionAlgorithm"
                     type="enum"/>
            <typemap name="algoSize"
                     value="reco::Conversion::algoSize"
                     type="enum"/>
            <typemap name="ecalSeeded"
                     value="reco::Conversion::ecalSeeded"
                     type="enum"/>
            <typemap name="mixed"
                     value="reco::Conversion::mixed"
                     type="enum"/>
            <typemap name="trackerOnly"
                     value="reco::Conversion::trackerOnly"
                     type="enum"/>
            <typemap name="undefined"
                     value="reco::Conversion::undefined"
                     type="enum"/>

        </class>
    </namespace>

    <type name="Conversion*"/>
    <type name="ConversionAlgorithm"/>
    <type name="GlobalVector"/>
    <type name="bool"/>
    <type name="const ConversionAlgorithm"/>
    <type name="const float"/>
    <type name="const reco::CaloClusterPtrVector"/>
    <type name="const reco::Vertex&amp;"/>
    <type name="const std::string&amp;"/>
    <type name="const std::vector&lt;math::XYZPoint&gt;"/>
    <type name="const std::vector&lt;math::XYZPoint&gt;&amp;"/>
    <type name="const std::vector&lt;math::XYZVector&gt;&amp;"/>
    <type name="const std::vector&lt;reco::CaloClusterPtr&gt;&amp;"/>
    <type name="const std::vector&lt;reco::TrackRef&gt;"/>
    <type name="double"/>
    <type name="enum ConversionAlgorithm"/>
    <type name="reco::CaloClusterPtrVector"/>
    <type name="reco::Conversion"/>
    <type name="std::string"/>
    <type name="std::vector&lt;double&gt;"/>
    <type name="std::vector&lt;reco::TrackRef&gt;"/>
    <type name="unsigned int"/>
    <type name="void"/>
</header>
