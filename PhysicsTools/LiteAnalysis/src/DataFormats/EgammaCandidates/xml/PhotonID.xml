<?xml version="1.0"?>
<!--
==============================================================================
  XML File: PhotonID.xml
  Created:  Thu Jan 14 22:46:56 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaCandidates/interface/PhotonID.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/EgammaCandidates/interface/PhotonID.h">

    <include name="&quot;DataFormats/EgammaCandidates/interface/PhotonIDFwd.h&quot;"/>

    <namespace name="reco">

        <class name="PhotonID"
               fullname="reco::PhotonID"
               module="DataFormats.EgammaCandidates"
               project=""
               type="regular">

            <section name="public">
                <constructor name="PhotonID"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
PhotonID();
                </constructor>

                <constructor name="PhotonID"
                             return=""
                             args="['bool','bool','bool','float','float','int','int','float','float','float','bool','bool','bool','bool','bool','bool']"
                             vars="['LooseEM','LoosePho','TightPho','TrkCone4','HollowCone','nTrkCone','nHollow','EcalRecHitIso','HcalRecHitIso','r9','EBPho','EEPho','EBGap','EEGap','EBEEGap','isAlsoElectron']"
                             qual="">
PhotonID(bool LooseEM, bool LoosePho, bool TightPho, float TrkCone4, float HollowCone, int nTrkCone, int nHollow, float EcalRecHitIso, float HcalRecHitIso, float r9, bool EBPho, bool EEPho, bool EBGap, bool EEGap, bool EBEEGap, bool isAlsoElectron);
                    <comment>
    Real constructor
                    </comment>
                </constructor>

                <method1 name="isLooseEM"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isLooseEM() const;
                    <comment>
    Returns decision based on the cuts in the configuration file in
    RecoEgamma/PhotonIdentification
                    </comment>
                </method1>

                <method1 name="isLoosePhoton"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isLoosePhoton() const;
                </method1>

                <method1 name="isTightPhoton"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isTightPhoton() const;
                </method1>

                <method1 name="isolationEcalRecHit"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationEcalRecHit() const;
                    <comment>
    Returns computed EcalRecHit isolation
                    </comment>
                </method1>

                <method1 name="isolationHcalRecHit"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationHcalRecHit() const;
                    <comment>
    Returns computed HcalRecHit isolation
                    </comment>
                </method1>

                <method1 name="isolationSolidTrkCone"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationSolidTrkCone() const;
                    <comment>
    Returns calculated sum track pT cone of dR
                    </comment>
                </method1>

                <method1 name="isolationHollowTrkCone"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float isolationHollowTrkCone() const;
                    <comment>
    As above, excluding the core at the center of the cone
                    </comment>
                </method1>

                <method1 name="nTrkSolidCone"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int nTrkSolidCone() const;
                    <comment>
    Returns number of tracks in a cone of dR
                    </comment>
                </method1>

                <method1 name="nTrkHollowCone"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int nTrkHollowCone() const;
                    <comment>
    As above, excluding the core at the center of the cone
                    </comment>
                </method1>

                <method1 name="r9"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float r9() const;
                    <comment>
    return r9 = e3x3/etotal
                    </comment>
                </method1>

                <method1 name="isEBPho"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBPho() const;
                    <comment>
    if photon is in ECAL barrel
                    </comment>
                </method1>

                <method1 name="isEEPho"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEEPho() const;
                    <comment>
    if photon is in ECAL endcap
                    </comment>
                </method1>

                <method1 name="isEBGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBGap() const;
                    <comment>
    if photon is in EB, and inside the boundaries in super crystals/modules
                    </comment>
                </method1>

                <method1 name="isEEGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEEGap() const;
                    <comment>
    if photon is in EE, and inside the boundaries in supercrystal/D
                    </comment>
                </method1>

                <method1 name="isEBEEGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBEEGap() const;
                    <comment>
    if photon is in boundary between EB and EE
                    </comment>
                </method1>

                <method1 name="isAlsoElectron"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isAlsoElectron() const;
                    <comment>
    if this is also a GsfElectron
                    </comment>
                </method1>

                <method1 name="setFiducialFlags"
                         return="void"
                         args="['bool','bool','bool','bool','bool']"
                         vars="['EBPho','EEPho','EBGap','EEGap','EBEEGap']"
                         qual="">
void setFiducialFlags(bool EBPho, bool EEPho, bool EBGap, bool EEGap, bool EBEEGap);
                    <comment>
    setters:
                    </comment>
                </method1>

                <method1 name="setDecision"
                         return="void"
                         args="['bool','bool','bool']"
                         vars="['decisionLooseEM','decisionLoosePho','decisionTightPho']"
                         qual="">
void setDecision(bool decisionLooseEM, bool decisionLoosePho, bool decisionTightPho);
                </method1>

            </section>

        </class>
    </namespace>

    <type name="bool"/>
    <type name="float"/>
    <type name="int"/>
    <type name="reco::PhotonID"/>
    <type name="void"/>
</header>
