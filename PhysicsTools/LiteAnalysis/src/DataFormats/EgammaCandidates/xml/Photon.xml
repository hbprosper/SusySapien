<?xml version="1.0"?>
<!--
==============================================================================
  XML File: Photon.xml
  Created:  Thu Jan 14 22:46:54 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaCandidates/interface/Photon.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/EgammaCandidates/interface/Photon.h">

    <include name="&quot;DataFormats/RecoCandidate/interface/RecoCandidate.h&quot;"/>
    <include name="&quot;DataFormats/EgammaCandidates/interface/ConversionFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperCluster.h&quot;"/>

    <namespace name="reco">

        <class name="Photon"
               fullname="reco::Photon"
               module="DataFormats.EgammaCandidates"
               project=""
               type="regular">
            <baseclass name="public RecoCandidate"/>

            <section name="public">
                <constructor name="Photon"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
Photon();
                    <comment>
        default constructor
                    </comment>
                </constructor>

                <constructor name="Photon"
                             return=""
                             args="['const LorentzVector&amp;','Point','const SuperClusterRef','float','bool=false','const Point&amp;=Point(0, 0, 0)']"
                             vars="['p4','caloPos','scl','HoE','hasPixelSeed','vtx']"
                             qual="">
Photon(const LorentzVector&amp; p4, Point caloPos, const SuperClusterRef scl, float HoE, bool hasPixelSeed=false, const Point&amp; vtx=Point(0, 0, 0));
                    <comment>
        constructor from values
                    </comment>
                </constructor>

                <destructor name="~Photon"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~Photon();
                    <comment>
        destructor
                    </comment>
                </destructor>

                <method1 name="clone"
                         return="virtual Photon*"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual Photon* clone() const;
                    <comment>
        returns a clone of the candidate
                    </comment>
                </method1>

                <method1 name="superCluster"
                         return="virtual reco::SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual reco::SuperClusterRef superCluster() const;
                    <comment>
        reference to SuperCluster
                    </comment>
                </method1>

                <method2 name="conversions"
                         return="std::vector&lt;reco::ConversionRef&gt;"
                         args="['void']"
                         vars="['']"
                         qual="const">
std::vector&lt;reco::ConversionRef&gt; conversions() const;
                    <comment>
        vector of references to  Conversion's
                    </comment>
                </method2>

                <method1 name="setSuperCluster"
                         return="void"
                         args="['const reco::SuperClusterRef&amp;']"
                         vars="['r']"
                         qual="">
void setSuperCluster(const reco::SuperClusterRef&amp; r);
                    <comment>
        set reference to SuperCluster
                    </comment>
                </method1>

                <method1 name="addConversion"
                         return="void"
                         args="['const reco::ConversionRef&amp;']"
                         vars="['r']"
                         qual="">
void addConversion(const reco::ConversionRef&amp; r);
                    <comment>
        add  single ConversionRef to the vector of Refs
                    </comment>
                </method1>

                <method1 name="setVertex"
                         return="void"
                         args="['const Point&amp;']"
                         vars="['vertex']"
                         qual="">
void setVertex(const Point&amp; vertex);
                    <comment>
        set primary event vertex used to define photon direction
                    </comment>
                </method1>

                <method1 name="caloPosition"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint caloPosition() const;
                    <comment>
        position in ECAL: this is th SC position if r9&lt;0.93. If r8&gt;0.93 is position of seed BasicCluster taking shower depth for unconverted photon
                    </comment>
                </method1>

                <method1 name="hadronicOverEm"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hadronicOverEm() const;
                    <comment>
        the hadronic over electromagnetic fraction
                    </comment>
                </method1>

                <method1 name="hasPixelSeed"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool hasPixelSeed() const;
                    <comment>
        Whether or not the SuperCluster has a matched pixel seed
                    </comment>
                </method1>

                <method1 name="isConverted"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isConverted() const;
                    <comment>
        Bool flagging photons with a vector of refereces to conversions with size &gt;0
                    </comment>
                </method1>

            </section>

        </class>
    </namespace>

    <type name="Photon*"/>
    <type name="Point"/>
    <type name="RecoCandidate"/>
    <type name="bool"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const Point&amp;"/>
    <type name="const SuperClusterRef"/>
    <type name="const reco::ConversionRef&amp;"/>
    <type name="const reco::SuperClusterRef&amp;"/>
    <type name="float"/>
    <type name="math::XYZPoint"/>
    <type name="reco::Photon"/>
    <type name="reco::SuperClusterRef"/>
    <type name="std::vector&lt;reco::ConversionRef&gt;"/>
    <type name="void"/>
</header>
