<?xml version="1.0"?>
<!--
==============================================================================
  XML File: GsfElectron.xml
  Created:  Fri Jan 15 20:46:18 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaCandidates/interface/GsfElectron.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_3_3_6/src/DataFormats/EgammaCandidates/interface/GsfElectron.h">

    <include name="&quot;DataFormats/EgammaCandidates/interface/GsfElectronCore.h&quot;"/>
    <include name="&quot;DataFormats/EgammaCandidates/interface/GsfElectronCoreFwd.h&quot;"/>
    <include name="&quot;DataFormats/RecoCandidate/interface/RecoCandidate.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperCluster.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/CaloRecHit/interface/CaloClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalVector.h&quot;"/>
    <include name="&quot;FWCore/MessageLogger/interface/MessageLogger.h&quot;"/>
    <include name="&lt;vector&gt;"/>
    <include name="&lt;limits&gt;"/>

    <namespace name="reco">

        <class name="GsfElectron"
               fullname="reco::GsfElectron"
               module="DataFormats.EgammaCandidates"
               project=""
               type="regular">
            <baseclass name="public RecoCandidate"/>
            <comment>
   $Log: GsfElectron.h,v $
   Revision 1.32  2009/09/03 13:56:15  chamont
   fix an error in comments

   Revision 1.31  2009/08/21 12:22:57  chamont
   new charge info

   Revision 1.30  2009/07/14 12:41:52  charlot
   improved electron charge

   Revision 1.29  2009/04/06 11:18:05  chamont
   few changes, should not affect users

   Revision 1.28  2009/03/31 10:54:09  charlot
   readded isolation setters

   Revision 1.27  2009/03/31 10:30:20  charlot
   added getters for structs, removed setter for the core

   Revision 1.26  2009/03/28 20:42:11  charlot
   added momentum at vertex with bs constraint

   Revision 1.25  2009/03/27 13:09:08  charlot
   added setter for the core

   Revision 1.24  2009/03/26 11:20:20  charlot
   updated for new supercluster dataformat

   Revision 1.23  2009/03/24 23:07:03  charlot
   added setter for isolation

   Revision 1.22  2009/03/24 17:26:27  charlot
   updated provenance and added comments in headers

   Revision 1.21  2009/03/20 22:59:16  chamont
   new class GsfElectronCore and new interface for GsfElectron

   Revision 1.20  2009/02/14 11:00:26  charlot
   new interface for fiducial regions
            </comment>

            <section name="public">
                <member>
struct ChargeInfo;
                    <comment>
       some nested structures defined later on
                    </comment>
                </member>

                <member>
struct TrackClusterMatching;
                </member>

                <member>
struct TrackExtrapolations;
                </member>

                <member>
struct ClosestCtfTrack;
                </member>

                <member>
struct FiducialFlags;
                </member>

                <member>
struct ShowerShape;
                </member>

                <member>
struct IsolationVariables;
                </member>

                <constructor name="GsfElectron"
                             return=""
                             args="['const LorentzVector&amp;','int','const ChargeInfo&amp;','const GsfElectronCoreRef&amp;','const TrackClusterMatching&amp;','const TrackExtrapolations&amp;','const ClosestCtfTrack&amp;','const FiducialFlags&amp;','const ShowerShape&amp;','float','float']"
                             vars="['p4','charge','','','','','','','','fbrem','mva']"
                             qual="">
GsfElectron      (       const LorentzVector&amp; p4, int charge, const ChargeInfo&amp;, const GsfElectronCoreRef&amp;, const TrackClusterMatching&amp;, const TrackExtrapolations&amp;, const ClosestCtfTrack&amp;, const FiducialFlags&amp;, const ShowerShape&amp;, float fbrem, float mva     );
                </constructor>

                <constructor name="GsfElectron"
                             return=""
                             args="['const GsfElectron&amp;','const GsfElectronCoreRef&amp;','const CaloClusterPtr&amp;','const TrackRef&amp;','const GsfTrackRefVector&amp;']"
                             vars="['electron','core','electronCluster','closestCtfTrack','ambiguousTracks']"
                             qual="">
GsfElectron      (       const GsfElectron&amp; electron, const GsfElectronCoreRef&amp; core, const CaloClusterPtr&amp; electronCluster, const TrackRef&amp; closestCtfTrack, const GsfTrackRefVector&amp; ambiguousTracks     );
                </constructor>

                <constructor name="GsfElectron"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
GsfElectron();
                </constructor>

                <method1 name="clone"
                         return="GsfElectron*"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfElectron* clone() const;
                </method1>

                <method1 name="clone"
                         return="GsfElectron*"
                         args="['const GsfElectronCoreRef&amp;','const CaloClusterPtr&amp;','const TrackRef&amp;','const GsfTrackRefVector&amp;']"
                         vars="['core','electronCluster','closestCtfTrack','ambiguousTracks']"
                         qual="const">
GsfElectron* clone      (       const GsfElectronCoreRef&amp; core, const CaloClusterPtr&amp; electronCluster, const TrackRef&amp; closestCtfTrack, const GsfTrackRefVector&amp; ambiguousTracks     ) const;
                </method1>

                <destructor name="~GsfElectron"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~GsfElectron();
                </destructor>

            </section>
            <section name="public">

                <class name="ChargeInfo"
                       fullname="reco::GsfElectron::ChargeInfo"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">
                    <comment>
	   Complementary struct
                    </comment>

                    <section>
                        <member>
int scPixCharge;
                        </member>

                        <member>
bool isGsfCtfScPixConsistent;
                        </member>

                        <member>
bool isGsfScPixConsistent;
                        </member>

                        <member>
bool isGsfCtfConsistent;
                        </member>

                        <constructor name="ChargeInfo"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
ChargeInfo();
                        </constructor>

                    </section>

                    <typemap name="ChargeInfo"
                             value="reco::GsfElectron::ChargeInfo"
                             type="class"/>
                    <typemap name="isGsfCtfConsistent"
                             value="reco::GsfElectron::ChargeInfo::isGsfCtfConsistent"
                             type="member"/>
                    <typemap name="isGsfCtfScPixConsistent"
                             value="reco::GsfElectron::ChargeInfo::isGsfCtfScPixConsistent"
                             type="member"/>
                    <typemap name="isGsfScPixConsistent"
                             value="reco::GsfElectron::ChargeInfo::isGsfScPixConsistent"
                             type="member"/>
                    <typemap name="scPixCharge"
                             value="reco::GsfElectron::ChargeInfo::scPixCharge"
                             type="member"/>

                </class>
                <method1 name="scPixCharge"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int scPixCharge() const;
                    <comment>
	   Charge info accessors
       to get gsf track charge: gsfTrack()-&gt;charge()
       to get ctf track charge, if closestCtfTrackRef().isNonnull(): closestCtfTrackRef()-&gt;charge()
                    </comment>
                </method1>

                <method1 name="isGsfCtfScPixChargeConsistent"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isGsfCtfScPixChargeConsistent() const;
                </method1>

                <method1 name="isGsfScPixChargeConsistent"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isGsfScPixChargeConsistent() const;
                </method1>

                <method1 name="isGsfCtfChargeConsistent"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isGsfCtfChargeConsistent() const;
                </method1>

                <method1 name="chargeInfo"
                         return="const ChargeInfo&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const ChargeInfo&amp; chargeInfo() const;
                </method1>

                <method1 name="isElectron"
                         return="virtual bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
virtual bool isElectron() const;
                    <comment>
	   Candidate redefined methods
                    </comment>
                </method1>

                <method1 name="overlap"
                         return="virtual bool"
                         args="['const Candidate&amp;']"
                         vars="['']"
                         qual="const">
virtual bool overlap(const Candidate&amp;) const;
                </method1>

            </section>
            <section name="public">
                <method1 name="core"
                         return="GsfElectronCoreRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfElectronCoreRef core() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="superCluster"
                         return="SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
SuperClusterRef superCluster() const;
                    <comment>
       forward core methods
                    </comment>
                </method1>

                <method1 name="gsfTrack"
                         return="GsfTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfTrackRef gsfTrack() const;
                </method1>

                <method1 name="isEcalDriven"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEcalDriven() const;
                </method1>

                <method1 name="isTrackerDriven"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isTrackerDriven() const;
                </method1>

                <method1 name="pflowSuperCluster"
                         return="SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
SuperClusterRef pflowSuperCluster() const;
                </method1>

            </section>
            <section name="public">

                <class name="TrackClusterMatching"
                       fullname="reco::GsfElectron::TrackClusterMatching"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
CaloClusterPtr electronCluster;
                        </member>

                        <member>
float eSuperClusterOverP;
                        </member>

                        <member>
float eSeedClusterOverP;
                        </member>

                        <member>
float eSeedClusterOverPout;
                        </member>

                        <member>
float eEleClusterOverPout;
                        </member>

                        <member>
float deltaEtaSuperClusterAtVtx;
                        </member>

                        <member>
float deltaEtaSeedClusterAtCalo;
                        </member>

                        <member>
float deltaEtaEleClusterAtCalo;
                        </member>

                        <member>
float deltaPhiEleClusterAtCalo;
                        </member>

                        <member>
float deltaPhiSuperClusterAtVtx;
                        </member>

                        <member>
float deltaPhiSeedClusterAtCalo;
                        </member>

                    </section>

                    <typemap name="TrackClusterMatching"
                             value="reco::GsfElectron::TrackClusterMatching"
                             type="class"/>
                    <typemap name="deltaEtaEleClusterAtCalo"
                             value="reco::GsfElectron::TrackClusterMatching::deltaEtaEleClusterAtCalo"
                             type="member"/>
                    <typemap name="deltaEtaSeedClusterAtCalo"
                             value="reco::GsfElectron::TrackClusterMatching::deltaEtaSeedClusterAtCalo"
                             type="member"/>
                    <typemap name="deltaEtaSuperClusterAtVtx"
                             value="reco::GsfElectron::TrackClusterMatching::deltaEtaSuperClusterAtVtx"
                             type="member"/>
                    <typemap name="deltaPhiEleClusterAtCalo"
                             value="reco::GsfElectron::TrackClusterMatching::deltaPhiEleClusterAtCalo"
                             type="member"/>
                    <typemap name="deltaPhiSeedClusterAtCalo"
                             value="reco::GsfElectron::TrackClusterMatching::deltaPhiSeedClusterAtCalo"
                             type="member"/>
                    <typemap name="deltaPhiSuperClusterAtVtx"
                             value="reco::GsfElectron::TrackClusterMatching::deltaPhiSuperClusterAtVtx"
                             type="member"/>
                    <typemap name="eEleClusterOverPout"
                             value="reco::GsfElectron::TrackClusterMatching::eEleClusterOverPout"
                             type="member"/>
                    <typemap name="eSeedClusterOverP"
                             value="reco::GsfElectron::TrackClusterMatching::eSeedClusterOverP"
                             type="member"/>
                    <typemap name="eSeedClusterOverPout"
                             value="reco::GsfElectron::TrackClusterMatching::eSeedClusterOverPout"
                             type="member"/>
                    <typemap name="eSuperClusterOverP"
                             value="reco::GsfElectron::TrackClusterMatching::eSuperClusterOverP"
                             type="member"/>
                    <typemap name="electronCluster"
                             value="reco::GsfElectron::TrackClusterMatching::electronCluster"
                             type="member"/>

                </class>
                <method1 name="electronCluster"
                         return="CaloClusterPtr"
                         args="['void']"
                         vars="['']"
                         qual="const">
CaloClusterPtr electronCluster() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="eSuperClusterOverP"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eSuperClusterOverP() const;
                </method1>

                <method1 name="eSeedClusterOverP"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eSeedClusterOverP() const;
                </method1>

                <method1 name="eSeedClusterOverPout"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eSeedClusterOverPout() const;
                </method1>

                <method1 name="eEleClusterOverPout"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eEleClusterOverPout() const;
                </method1>

                <method1 name="deltaEtaSuperClusterTrackAtVtx"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaEtaSuperClusterTrackAtVtx() const;
                </method1>

                <method1 name="deltaEtaSeedClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaEtaSeedClusterTrackAtCalo() const;
                </method1>

                <method1 name="deltaEtaEleClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaEtaEleClusterTrackAtCalo() const;
                </method1>

                <method1 name="deltaPhiSuperClusterTrackAtVtx"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaPhiSuperClusterTrackAtVtx() const;
                </method1>

                <method1 name="deltaPhiSeedClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaPhiSeedClusterTrackAtCalo() const;
                </method1>

                <method1 name="deltaPhiEleClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaPhiEleClusterTrackAtCalo() const;
                </method1>

                <method1 name="trackClusterMatching"
                         return="const TrackClusterMatching&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackClusterMatching&amp; trackClusterMatching() const;
                </method1>

                <method1 name="setDeltaEtaSuperClusterAtVtx"
                         return="void"
                         args="['float']"
                         vars="['de']"
                         qual="">
void setDeltaEtaSuperClusterAtVtx(float de);
                    <comment>
       for backward compatibility, usefull ?
                    </comment>
                </method1>

                <method1 name="setDeltaPhiSuperClusterAtVtx"
                         return="void"
                         args="['float']"
                         vars="['dphi']"
                         qual="">
void setDeltaPhiSuperClusterAtVtx(float dphi);
                </method1>

            </section>
            <section name="public">

                <class name="TrackExtrapolations"
                       fullname="reco::GsfElectron::TrackExtrapolations"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
math::XYZPoint positionAtVtx;
                        </member>

                        <member>
math::XYZPoint positionAtCalo;
                        </member>

                        <member>
math::XYZVector momentumAtVtx;
                        </member>

                        <member>
math::XYZVector momentumAtCalo;
                        </member>

                        <member>
math::XYZVector momentumOut;
                        </member>

                        <member>
math::XYZVector momentumAtEleClus;
                        </member>

                        <member>
math::XYZVector momentumAtVtxWithConstraint;
                        </member>

                    </section>

                    <typemap name="TrackExtrapolations"
                             value="reco::GsfElectron::TrackExtrapolations"
                             type="class"/>
                    <typemap name="momentumAtCalo"
                             value="reco::GsfElectron::TrackExtrapolations::momentumAtCalo"
                             type="member"/>
                    <typemap name="momentumAtEleClus"
                             value="reco::GsfElectron::TrackExtrapolations::momentumAtEleClus"
                             type="member"/>
                    <typemap name="momentumAtVtx"
                             value="reco::GsfElectron::TrackExtrapolations::momentumAtVtx"
                             type="member"/>
                    <typemap name="momentumAtVtxWithConstraint"
                             value="reco::GsfElectron::TrackExtrapolations::momentumAtVtxWithConstraint"
                             type="member"/>
                    <typemap name="momentumOut"
                             value="reco::GsfElectron::TrackExtrapolations::momentumOut"
                             type="member"/>
                    <typemap name="positionAtCalo"
                             value="reco::GsfElectron::TrackExtrapolations::positionAtCalo"
                             type="member"/>
                    <typemap name="positionAtVtx"
                             value="reco::GsfElectron::TrackExtrapolations::positionAtVtx"
                             type="member"/>

                </class>
                <method1 name="trackPositionAtVtx"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint trackPositionAtVtx() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="trackPositionAtCalo"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint trackPositionAtCalo() const;
                </method1>

                <method1 name="trackMomentumAtVtx"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtVtx() const;
                </method1>

                <method1 name="trackMomentumAtCalo"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtCalo() const;
                </method1>

                <method1 name="trackMomentumOut"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumOut() const;
                </method1>

                <method1 name="trackMomentumAtEleClus"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtEleClus() const;
                </method1>

                <method1 name="trackMomentumAtVtxWithConstraint"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtVtxWithConstraint() const;
                </method1>

                <method1 name="trackExtrapolations"
                         return="const TrackExtrapolations&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const TrackExtrapolations&amp; trackExtrapolations() const;
                </method1>

                <method1 name="TrackPositionAtVtx"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint TrackPositionAtVtx() const;
                    <comment>
       for backward compatibility
                    </comment>
                </method1>

                <method1 name="TrackPositionAtCalo"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint TrackPositionAtCalo() const;
                </method1>

            </section>
            <section name="public">
                <method1 name="superClusterPosition"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint superClusterPosition() const;
                    <comment>
       direct accessors
                    </comment>
                </method1>

                <method1 name="basicClustersSize"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int basicClustersSize() const;
                </method1>

                <method1 name="basicClustersBegin"
                         return="CaloCluster_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
CaloCluster_iterator basicClustersBegin() const;
                </method1>

                <method1 name="basicClustersEnd"
                         return="CaloCluster_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
CaloCluster_iterator basicClustersEnd() const;
                </method1>

                <method1 name="caloPosition"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint caloPosition() const;
                    <comment>
       for backward compatibility
                    </comment>
                </method1>

            </section>
            <section name="public">

                <class name="ClosestCtfTrack"
                       fullname="reco::GsfElectron::ClosestCtfTrack"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
TrackRef ctfTrack;
                        </member>

                        <member>
float shFracInnerHits;
                        </member>

                        <constructor name="ClosestCtfTrack"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
ClosestCtfTrack();
                        </constructor>

                    </section>

                    <typemap name="ClosestCtfTrack"
                             value="reco::GsfElectron::ClosestCtfTrack"
                             type="class"/>
                    <typemap name="ctfTrack"
                             value="reco::GsfElectron::ClosestCtfTrack::ctfTrack"
                             type="member"/>
                    <typemap name="shFracInnerHits"
                             value="reco::GsfElectron::ClosestCtfTrack::shFracInnerHits"
                             type="member"/>

                </class>
                <method1 name="closestCtfTrackRef"
                         return="TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
TrackRef closestCtfTrackRef() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="shFracInnerHits"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float shFracInnerHits() const;
                </method1>

                <method1 name="closestCtfTrack"
                         return="const ClosestCtfTrack&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const ClosestCtfTrack&amp; closestCtfTrack() const;
                </method1>

                <method1 name="ambiguousGsfTracksSize"
                         return="GsfTrackRefVector::size_type"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfTrackRefVector::size_type ambiguousGsfTracksSize() const;
                </method1>

                <method1 name="ambiguousGsfTracksBegin"
                         return="GsfTrackRefVector::const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfTrackRefVector::const_iterator ambiguousGsfTracksBegin() const;
                </method1>

                <method1 name="ambiguousGsfTracksEnd"
                         return="GsfTrackRefVector::const_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfTrackRefVector::const_iterator ambiguousGsfTracksEnd() const;
                </method1>

                <method1 name="addAmbiguousGsfTrack"
                         return="void"
                         args="['const reco::GsfTrackRef&amp;']"
                         vars="['t']"
                         qual="">
void addAmbiguousGsfTrack(const reco::GsfTrackRef&amp; t);
                    <comment>
       setters
                    </comment>
                </method1>

            </section>
            <section name="public">

                <class name="FiducialFlags"
                       fullname="reco::GsfElectron::FiducialFlags"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
bool isEB;
                        </member>

                        <member>
bool isEE;
                        </member>

                        <member>
bool isEBEEGap;
                        </member>

                        <member>
bool isEBEtaGap;
                        </member>

                        <member>
bool isEBPhiGap;
                        </member>

                        <member>
bool isEEDeeGap;
                        </member>

                        <member>
bool isEERingGap;
                        </member>

                        <constructor name="FiducialFlags"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
FiducialFlags();
                        </constructor>

                    </section>

                    <typemap name="FiducialFlags"
                             value="reco::GsfElectron::FiducialFlags"
                             type="class"/>
                    <typemap name="isEB"
                             value="reco::GsfElectron::FiducialFlags::isEB"
                             type="member"/>
                    <typemap name="isEBEEGap"
                             value="reco::GsfElectron::FiducialFlags::isEBEEGap"
                             type="member"/>
                    <typemap name="isEBEtaGap"
                             value="reco::GsfElectron::FiducialFlags::isEBEtaGap"
                             type="member"/>
                    <typemap name="isEBPhiGap"
                             value="reco::GsfElectron::FiducialFlags::isEBPhiGap"
                             type="member"/>
                    <typemap name="isEE"
                             value="reco::GsfElectron::FiducialFlags::isEE"
                             type="member"/>
                    <typemap name="isEEDeeGap"
                             value="reco::GsfElectron::FiducialFlags::isEEDeeGap"
                             type="member"/>
                    <typemap name="isEERingGap"
                             value="reco::GsfElectron::FiducialFlags::isEERingGap"
                             type="member"/>

                </class>
                <method1 name="isEB"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEB() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="isEE"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEE() const;
                </method1>

                <method1 name="isGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isGap() const;
                </method1>

                <method1 name="isEBEEGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBEEGap() const;
                </method1>

                <method1 name="isEBGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBGap() const;
                </method1>

                <method1 name="isEBEtaGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBEtaGap() const;
                </method1>

                <method1 name="isEBPhiGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEBPhiGap() const;
                </method1>

                <method1 name="isEEGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEEGap() const;
                </method1>

                <method1 name="isEEDeeGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEEDeeGap() const;
                </method1>

                <method1 name="isEERingGap"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEERingGap() const;
                </method1>

                <method1 name="fiducialFlags"
                         return="const FiducialFlags&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const FiducialFlags&amp; fiducialFlags() const;
                </method1>

            </section>
            <section name="public">

                <class name="ShowerShape"
                       fullname="reco::GsfElectron::ShowerShape"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
float sigmaEtaEta;
                        </member>

                        <member>
float sigmaIetaIeta;
                        </member>

                        <member>
float e1x5;
                        </member>

                        <member>
float e2x5Max;
                        </member>

                        <member>
float e5x5;
                        </member>

                        <member>
float hcalDepth1OverEcal;
                        </member>

                        <member>
float hcalDepth2OverEcal;
                        </member>

                        <constructor name="ShowerShape"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
ShowerShape();
                        </constructor>

                    </section>

                    <typemap name="ShowerShape"
                             value="reco::GsfElectron::ShowerShape"
                             type="class"/>
                    <typemap name="e1x5"
                             value="reco::GsfElectron::ShowerShape::e1x5"
                             type="member"/>
                    <typemap name="e2x5Max"
                             value="reco::GsfElectron::ShowerShape::e2x5Max"
                             type="member"/>
                    <typemap name="e5x5"
                             value="reco::GsfElectron::ShowerShape::e5x5"
                             type="member"/>
                    <typemap name="hcalDepth1OverEcal"
                             value="reco::GsfElectron::ShowerShape::hcalDepth1OverEcal"
                             type="member"/>
                    <typemap name="hcalDepth2OverEcal"
                             value="reco::GsfElectron::ShowerShape::hcalDepth2OverEcal"
                             type="member"/>
                    <typemap name="sigmaEtaEta"
                             value="reco::GsfElectron::ShowerShape::sigmaEtaEta"
                             type="member"/>
                    <typemap name="sigmaIetaIeta"
                             value="reco::GsfElectron::ShowerShape::sigmaIetaIeta"
                             type="member"/>

                </class>
                <method1 name="sigmaEtaEta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float sigmaEtaEta() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="sigmaIetaIeta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float sigmaIetaIeta() const;
                </method1>

                <method1 name="e1x5"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float e1x5() const;
                </method1>

                <method1 name="e2x5Max"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float e2x5Max() const;
                </method1>

                <method1 name="e5x5"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float e5x5() const;
                </method1>

                <method1 name="hcalDepth1OverEcal"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalDepth1OverEcal() const;
                </method1>

                <method1 name="hcalDepth2OverEcal"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalDepth2OverEcal() const;
                </method1>

                <method1 name="hcalOverEcal"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hcalOverEcal() const;
                </method1>

                <method1 name="showerShape"
                         return="const ShowerShape&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const ShowerShape&amp; showerShape() const;
                </method1>

                <method1 name="scSigmaEtaEta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scSigmaEtaEta() const;
                    <comment>
       for backward compatibility
                    </comment>
                </method1>

                <method1 name="scSigmaIEtaIEta"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scSigmaIEtaIEta() const;
                </method1>

                <method1 name="scE1x5"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scE1x5() const;
                </method1>

                <method1 name="scE2x5Max"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scE2x5Max() const;
                </method1>

                <method1 name="scE5x5"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float scE5x5() const;
                </method1>

                <method1 name="hadronicOverEm"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hadronicOverEm() const;
                </method1>

                <method1 name="hadronicOverEm1"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hadronicOverEm1() const;
                </method1>

                <method1 name="hadronicOverEm2"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hadronicOverEm2() const;
                </method1>

            </section>
            <section name="public">

                <class name="IsolationVariables"
                       fullname="reco::GsfElectron::IsolationVariables"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
float tkSumPt;
                        </member>

                        <member>
float ecalRecHitSumEt;
                        </member>

                        <member>
float hcalDepth1TowerSumEt;
                        </member>

                        <member>
float hcalDepth2TowerSumEt;
                        </member>

                        <constructor name="IsolationVariables"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
IsolationVariables();
                        </constructor>

                    </section>

                    <typemap name="IsolationVariables"
                             value="reco::GsfElectron::IsolationVariables"
                             type="class"/>
                    <typemap name="ecalRecHitSumEt"
                             value="reco::GsfElectron::IsolationVariables::ecalRecHitSumEt"
                             type="member"/>
                    <typemap name="hcalDepth1TowerSumEt"
                             value="reco::GsfElectron::IsolationVariables::hcalDepth1TowerSumEt"
                             type="member"/>
                    <typemap name="hcalDepth2TowerSumEt"
                             value="reco::GsfElectron::IsolationVariables::hcalDepth2TowerSumEt"
                             type="member"/>
                    <typemap name="tkSumPt"
                             value="reco::GsfElectron::IsolationVariables::tkSumPt"
                             type="member"/>

                </class>
                <method1 name="dr03TkSumPt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr03TkSumPt() const;
                    <comment>
       03 accessors
                    </comment>
                </method1>

                <method1 name="dr03EcalRecHitSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr03EcalRecHitSumEt() const;
                </method1>

                <method1 name="dr03HcalDepth1TowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr03HcalDepth1TowerSumEt() const;
                </method1>

                <method1 name="dr03HcalDepth2TowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr03HcalDepth2TowerSumEt() const;
                </method1>

                <method1 name="dr03HcalTowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr03HcalTowerSumEt() const;
                </method1>

                <method1 name="dr03IsolationVariables"
                         return="const IsolationVariables&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsolationVariables&amp; dr03IsolationVariables() const;
                </method1>

                <method1 name="dr04TkSumPt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr04TkSumPt() const;
                    <comment>
       04 accessors
                    </comment>
                </method1>

                <method1 name="dr04EcalRecHitSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr04EcalRecHitSumEt() const;
                </method1>

                <method1 name="dr04HcalDepth1TowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr04HcalDepth1TowerSumEt() const;
                </method1>

                <method1 name="dr04HcalDepth2TowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr04HcalDepth2TowerSumEt() const;
                </method1>

                <method1 name="dr04HcalTowerSumEt"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float dr04HcalTowerSumEt() const;
                </method1>

                <method1 name="dr04IsolationVariables"
                         return="const IsolationVariables&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsolationVariables&amp; dr04IsolationVariables() const;
                </method1>

                <method1 name="setDr03Isolation"
                         return="void"
                         args="['const IsolationVariables&amp;']"
                         vars="['dr03']"
                         qual="">
void setDr03Isolation(const IsolationVariables&amp; dr03);
                    <comment>
       setters ?!?
                    </comment>
                </method1>

                <method1 name="setDr04Isolation"
                         return="void"
                         args="['const IsolationVariables&amp;']"
                         vars="['dr04']"
                         qual="">
void setDr04Isolation(const IsolationVariables&amp; dr04);
                </method1>

                <method1 name="setIsolation03"
                         return="void"
                         args="['const IsolationVariables&amp;']"
                         vars="['dr03']"
                         qual="">
void setIsolation03(const IsolationVariables&amp; dr03);
                    <comment>
       for backward compatibility
                    </comment>
                </method1>

                <method1 name="setIsolation04"
                         return="void"
                         args="['const IsolationVariables&amp;']"
                         vars="['dr04']"
                         qual="">
void setIsolation04(const IsolationVariables&amp; dr04);
                </method1>

                <method1 name="isolationVariables03"
                         return="const IsolationVariables&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsolationVariables&amp; isolationVariables03() const;
                </method1>

                <method1 name="isolationVariables04"
                         return="const IsolationVariables&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const IsolationVariables&amp; isolationVariables04() const;
                </method1>

            </section>
            <section name="public">
                <method1 name="mva"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float mva() const;
                    <comment>
       accessors
                    </comment>
                </method1>

            </section>
            <section name="public">
                <enum name="Classification">
enum Classification {
 UNKNOWN=-1, GOLDEN, BIGBREM, NARROW, SHOWERING, GAP };
                    <field name="UNKNOWN" value="-1"/>
                    <field name="GOLDEN" value=""/>
                    <field name="BIGBREM" value=""/>
                    <field name="NARROW" value=""/>
                    <field name="SHOWERING" value=""/>
                    <field name="GAP" value=""/>
                </enum>

                <method1 name="fbrem"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float fbrem() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="numberOfBrems"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int numberOfBrems() const;
                </method1>

                <method1 name="classification"
                         return="Classification"
                         args="['void']"
                         vars="['']"
                         qual="const">
Classification classification() const;
                </method1>

                <method1 name="classifyElectron"
                         return="void"
                         args="['Classification']"
                         vars="['myclass']"
                         qual="">
void classifyElectron(Classification myclass);
                    <comment>
       setters
                    </comment>
                </method1>

            </section>
            <section name="public">

                <class name="Corrections"
                       fullname="reco::GsfElectron::Corrections"
                       module="DataFormats.EgammaCandidates"
                       project=""
                       type="regular struct">

                    <section>
                        <member>
bool isEcalEnergyCorrected;
                        </member>

                        <member>
float ecalEnergy;
                        </member>

                        <member>
float ecalEnergyError;
                        </member>

                        <member>
bool isMomentumCorrected;
                        </member>

                        <member>
float trackMomentumError;
                        </member>

                        <member>
float electronMomentumError;
                        </member>

                        <constructor name="Corrections"
                                     return=""
                                     args="['void']"
                                     vars="['']"
                                     qual="">
Corrections();
                        </constructor>

                    </section>

                    <typemap name="Corrections"
                             value="reco::GsfElectron::Corrections"
                             type="class"/>
                    <typemap name="ecalEnergy"
                             value="reco::GsfElectron::Corrections::ecalEnergy"
                             type="member"/>
                    <typemap name="ecalEnergyError"
                             value="reco::GsfElectron::Corrections::ecalEnergyError"
                             type="member"/>
                    <typemap name="electronMomentumError"
                             value="reco::GsfElectron::Corrections::electronMomentumError"
                             type="member"/>
                    <typemap name="isEcalEnergyCorrected"
                             value="reco::GsfElectron::Corrections::isEcalEnergyCorrected"
                             type="member"/>
                    <typemap name="isMomentumCorrected"
                             value="reco::GsfElectron::Corrections::isMomentumCorrected"
                             type="member"/>
                    <typemap name="trackMomentumError"
                             value="reco::GsfElectron::Corrections::trackMomentumError"
                             type="member"/>

                </class>
                <method1 name="correctEcalEnergy"
                         return="void"
                         args="['float','float']"
                         vars="['newEnergy','newEnergyError']"
                         qual="">
void correctEcalEnergy(float newEnergy, float newEnergyError);
                    <comment>
       correctors
                    </comment>
                </method1>

                <method1 name="correctMomentum"
                         return="void"
                         args="['const LorentzVector&amp;','float','float']"
                         vars="['momentum','trackMomentumError','electronMomentumError']"
                         qual="">
void correctMomentum      (const LorentzVector&amp; momentum, float trackMomentumError, float electronMomentumError);
                </method1>

                <method1 name="isEcalEnergyCorrected"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEcalEnergyCorrected() const;
                    <comment>
       accessors
                    </comment>
                </method1>

                <method1 name="ecalEnergy"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalEnergy() const;
                </method1>

                <method1 name="ecalEnergyError"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float ecalEnergyError() const;
                </method1>

                <method1 name="isMomentumCorrected"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isMomentumCorrected() const;
                </method1>

                <method1 name="trackMomentumError"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float trackMomentumError() const;
                </method1>

                <method1 name="electronMomentumError"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float electronMomentumError() const;
                </method1>

                <method1 name="corrections"
                         return="const Corrections&amp;"
                         args="['void']"
                         vars="['']"
                         qual="const">
const Corrections&amp; corrections() const;
                </method1>

                <method1 name="caloEnergy"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloEnergy() const;
                    <comment>
       for backward compatibility
                    </comment>
                </method1>

                <method1 name="isEnergyScaleCorrected"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEnergyScaleCorrected() const;
                    <comment>
      void correctElectronEnergyScale( const float newEnergy )
       { correctEcalEnergy(newEnergy) ; }
      void correctElectronFourMomentum
       ( const LorentzVector &amp; m,
         float &amp; enErr, float  &amp; tMerr)
       { correctMomentum(m,enErr,tMerr,0) ; }
                    </comment>
                </method1>

            </section>

            <typemap name="BIGBREM"
                     value="reco::GsfElectron::BIGBREM"
                     type="enum"/>
            <typemap name="ChargeInfo"
                     value="reco::GsfElectron::ChargeInfo"
                     type="member"/>
            <typemap name="Classification"
                     value="reco::GsfElectron::Classification"
                     type="enum"/>
            <typemap name="ClosestCtfTrack"
                     value="reco::GsfElectron::ClosestCtfTrack"
                     type="member"/>
            <typemap name="FiducialFlags"
                     value="reco::GsfElectron::FiducialFlags"
                     type="member"/>
            <typemap name="GAP"
                     value="reco::GsfElectron::GAP"
                     type="enum"/>
            <typemap name="GOLDEN"
                     value="reco::GsfElectron::GOLDEN"
                     type="enum"/>
            <typemap name="IsolationVariables"
                     value="reco::GsfElectron::IsolationVariables"
                     type="member"/>
            <typemap name="NARROW"
                     value="reco::GsfElectron::NARROW"
                     type="enum"/>
            <typemap name="SHOWERING"
                     value="reco::GsfElectron::SHOWERING"
                     type="enum"/>
            <typemap name="ShowerShape"
                     value="reco::GsfElectron::ShowerShape"
                     type="member"/>
            <typemap name="TrackClusterMatching"
                     value="reco::GsfElectron::TrackClusterMatching"
                     type="member"/>
            <typemap name="TrackExtrapolations"
                     value="reco::GsfElectron::TrackExtrapolations"
                     type="member"/>
            <typemap name="UNKNOWN "
                     value="reco::GsfElectron::UNKNOWN "
                     type="enum"/>

        </class>
    </namespace>

    <type name="CaloClusterPtr"/>
    <type name="CaloCluster_iterator"/>
    <type name="Classification"/>
    <type name="GsfElectron*"/>
    <type name="GsfElectronCoreRef"/>
    <type name="GsfTrackRef"/>
    <type name="GsfTrackRefVector::const_iterator"/>
    <type name="GsfTrackRefVector::size_type"/>
    <type name="RecoCandidate"/>
    <type name="SuperClusterRef"/>
    <type name="TrackRef"/>
    <type name="bool"/>
    <type name="const CaloClusterPtr&amp;"/>
    <type name="const Candidate&amp;"/>
    <type name="const ChargeInfo&amp;"/>
    <type name="const ClosestCtfTrack&amp;"/>
    <type name="const Corrections&amp;"/>
    <type name="const FiducialFlags&amp;"/>
    <type name="const GsfElectron&amp;"/>
    <type name="const GsfElectronCoreRef&amp;"/>
    <type name="const GsfTrackRefVector&amp;"/>
    <type name="const IsolationVariables&amp;"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const ShowerShape&amp;"/>
    <type name="const TrackClusterMatching&amp;"/>
    <type name="const TrackExtrapolations&amp;"/>
    <type name="const TrackRef&amp;"/>
    <type name="const reco::GsfTrackRef&amp;"/>
    <type name="enum Classification"/>
    <type name="float"/>
    <type name="int"/>
    <type name="math::XYZPoint"/>
    <type name="math::XYZVector"/>
    <type name="reco::GsfElectron"/>
    <type name="reco::GsfElectron::ChargeInfo"/>
    <type name="reco::GsfElectron::ClosestCtfTrack"/>
    <type name="reco::GsfElectron::Corrections"/>
    <type name="reco::GsfElectron::FiducialFlags"/>
    <type name="reco::GsfElectron::IsolationVariables"/>
    <type name="reco::GsfElectron::ShowerShape"/>
    <type name="reco::GsfElectron::TrackClusterMatching"/>
    <type name="reco::GsfElectron::TrackExtrapolations"/>
    <type name="struct"/>
    <type name="void"/>
</header>
