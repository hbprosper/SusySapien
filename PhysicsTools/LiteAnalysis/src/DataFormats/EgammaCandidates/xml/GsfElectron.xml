<?xml version="1.0"?>
<!--
==============================================================================
  XML File: GsfElectron.xml
  Created:  Thu Jan 14 22:46:52 2010 with header2xml.py 1.13
==============================================================================
-->
<header name="DataFormats/EgammaCandidates/interface/GsfElectron.h"
        file="/home/harry/Desktop/cmssw/slc4_ia32_gcc345/cms/cmssw/CMSSW_2_2_13/src/DataFormats/EgammaCandidates/interface/GsfElectron.h">

    <include name="&quot;FWCore/MessageLogger/interface/MessageLogger.h&quot;"/>
    <include name="&quot;DataFormats/RecoCandidate/interface/RecoCandidate.h&quot;"/>
    <include name="&quot;DataFormats/GsfTrackReco/interface/GsfTrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/TrackReco/interface/TrackFwd.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperCluster.h&quot;"/>
    <include name="&quot;DataFormats/EgammaReco/interface/SuperClusterFwd.h&quot;"/>
    <include name="&quot;DataFormats/Math/interface/LorentzVector.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalPoint.h&quot;"/>
    <include name="&quot;DataFormats/GeometryVector/interface/GlobalVector.h&quot;"/>
    <include name="&lt;vector&gt;"/>

    <namespace name="reco">

        <class name="GsfElectron"
               fullname="reco::GsfElectron"
               module="DataFormats.EgammaCandidates"
               project=""
               type="regular">
            <baseclass name="public RecoCandidate"/>

            <section name="public">
                <constructor name="GsfElectron"
                             return=""
                             args="['void']"
                             vars="['']"
                             qual="">
GsfElectron();
                </constructor>

                <constructor name="GsfElectron"
                             return=""
                             args="['const LorentzVector&amp;','const SuperClusterRef','const GsfTrackRef','const GlobalPoint','const GlobalVector','const GlobalPoint','const GlobalVector','const GlobalPoint','const GlobalVector','const GlobalPoint','const GlobalVector','const GlobalPoint','const GlobalVector','double']"
                             vars="['p4','scl','gsft','tssuperPos','tssuperMom','tsseedPos','tsseedMom','innPos','innMom','vtxPos','vtxMom','outPos','outMom','HoE']"
                             qual="">
GsfElectron(const LorentzVector&amp; p4, const SuperClusterRef scl, const GsfTrackRef gsft, const GlobalPoint tssuperPos, const GlobalVector tssuperMom, const GlobalPoint tsseedPos, const GlobalVector tsseedMom, const GlobalPoint innPos, const GlobalVector innMom, const GlobalPoint vtxPos, const GlobalVector vtxMom, const GlobalPoint outPos, const GlobalVector outMom, double HoE);
                </constructor>

                <destructor name="~GsfElectron"
                            return="virtual"
                            args="['void']"
                            vars="['']"
                            qual="">
virtual ~GsfElectron();
                </destructor>

                <method1 name="classification"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int classification() const;
                    <comment>
       The electron classification.
      barrel  :   0: golden,  10: bigbrem,  20: narrow, 30-34: showering,
                (30: showering nbrem=0, 31: showering nbrem=1, 32: showering nbrem=2 ,33: showering nbrem=3, 34: showering nbrem&gt;=4)
                 40: crack
      endcaps : 100: golden, 110: bigbrem, 120: narrow, 130-134: showering
               (130: showering nbrem=0, 131: showering nbrem=1, 132: showering nbrem=2 ,133: showering nbrem=3, 134: showering nbrem&gt;=4)
                    </comment>
                </method1>

                <method1 name="clone"
                         return="GsfElectron*"
                         args="['void']"
                         vars="['']"
                         qual="const">
GsfElectron* clone() const;
                </method1>

                <method1 name="setDeltaEtaSuperClusterAtVtx"
                         return="void"
                         args="['float']"
                         vars="['de']"
                         qual="">
void setDeltaEtaSuperClusterAtVtx(float de);
                    <comment>
     setters
                    </comment>
                </method1>

                <method1 name="setDeltaPhiSuperClusterAtVtx"
                         return="void"
                         args="['float']"
                         vars="['dphi']"
                         qual="">
void setDeltaPhiSuperClusterAtVtx (float dphi);
                </method1>

                <method1 name="setSuperCluster"
                         return="void"
                         args="['const reco::SuperClusterRef&amp;']"
                         vars="['scl']"
                         qual="">
void setSuperCluster(const reco::SuperClusterRef&amp; scl);
                </method1>

                <method1 name="setGsfTrack"
                         return="void"
                         args="['const reco::GsfTrackRef&amp;']"
                         vars="['t']"
                         qual="">
void setGsfTrack(const reco::GsfTrackRef&amp; t);
                </method1>

                <method1 name="caloEnergy"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloEnergy() const;
                    <comment>
     supercluster and electron track related quantities
      the super cluster energy corrected by EnergyScaleFactor
                    </comment>
                </method1>

                <method1 name="caloPosition"
                         return="math::XYZPoint"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZPoint caloPosition() const;
                    <comment>
      the super cluster position
                    </comment>
                </method1>

                <method1 name="trackMomentumAtVtx"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtVtx() const;
                    <comment>
      the track momentum at vertex
                    </comment>
                </method1>

                <method1 name="TrackPositionAtVtx"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector TrackPositionAtVtx() const;
                    <comment>
      the track impact point state position
                    </comment>
                </method1>

                <method1 name="trackMomentumAtCalo"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumAtCalo() const;
                    <comment>
      the track momentum extrapolated at the supercluster position
                    </comment>
                </method1>

                <method1 name="trackMomentumOut"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector trackMomentumOut() const;
                    <comment>
      the track momentum extrapolated from outermost position at the seed cluster position
                    </comment>
                </method1>

                <method1 name="TrackPositionAtCalo"
                         return="math::XYZVector"
                         args="['void']"
                         vars="['']"
                         qual="const">
math::XYZVector TrackPositionAtCalo() const;
                    <comment>
      the track extrapolated position at min distance to the supercluster position
                    </comment>
                </method1>

                <method1 name="eSuperClusterOverP"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eSuperClusterOverP() const;
                    <comment>
      the supercluster energy / track momentum at impact point
                    </comment>
                </method1>

                <method1 name="eSeedClusterOverPout"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float eSeedClusterOverPout() const;
                    <comment>
      the seed cluster energy / track momentum at calo from outermost state
                    </comment>
                </method1>

                <method1 name="deltaEtaSuperClusterTrackAtVtx"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaEtaSuperClusterTrackAtVtx() const;
                    <comment>
      the supercluster eta - track eta from helix extrapolation from impact point
                    </comment>
                </method1>

                <method1 name="deltaEtaSeedClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaEtaSeedClusterTrackAtCalo() const;
                    <comment>
      the seed cluster eta - track eta at calo from outermost state
                    </comment>
                </method1>

                <method1 name="deltaPhiSuperClusterTrackAtVtx"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaPhiSuperClusterTrackAtVtx() const;
                    <comment>
      the supercluster phi - track phi from helix extrapolation from impact point
                    </comment>
                </method1>

                <method1 name="deltaPhiSeedClusterTrackAtCalo"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float deltaPhiSeedClusterTrackAtCalo() const;
                    <comment>
      the seed cluster phi - track phi at calo from outermost state
                    </comment>
                </method1>

                <method1 name="hadronicOverEm"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float hadronicOverEm() const;
                    <comment>
      the hadronic over electromagnetic fraction
                    </comment>
                </method1>

                <method1 name="isEnergyScaleCorrected"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isEnergyScaleCorrected() const;
                    <comment>
     corrections
      tell if class dependant escale correction have been applied
                    </comment>
                </method1>

                <method1 name="isMomentumCorrected"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isMomentumCorrected() const;
                    <comment>
      tell if class dependant E-p combination has been determined
                    </comment>
                </method1>

                <method1 name="correctElectronFourMomentum"
                         return="void"
                         args="['const math::XYZTLorentzVectorD&amp;','float&amp;','float&amp;']"
                         vars="['momentum','enErr','tMerr']"
                         qual="">
void correctElectronFourMomentum(const math::XYZTLorentzVectorD&amp; momentum, float&amp; enErr, float&amp; tMerr);
                    <comment>
      handle electron energy correction.  Rescales 4 momentum from corrected
      energy value and sets momentumFromEpCombination_ to true
                    </comment>
                </method1>

                <method1 name="correctElectronEnergyScale"
                         return="void"
                         args="['const float']"
                         vars="['newEnergy']"
                         qual="">
void correctElectronEnergyScale(const float newEnergy);
                    <comment>
      handle electron supercluster energy scale correction.  Propagates new
      energy value to all electron attributes and sets energyScaleCorrected_ to true
                    </comment>
                </method1>

                <method1 name="classifyElectron"
                         return="void"
                         args="['const int']"
                         vars="['myclass']"
                         qual="">
void classifyElectron(const int myclass);
                    <comment>
      determine the class of the electron
                    </comment>
                </method1>

                <method1 name="caloEnergyError"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float caloEnergyError() const;
                    <comment>
      the errors on the supercluster energy and track momentum
                    </comment>
                </method1>

                <method1 name="trackMomentumError"
                         return="float"
                         args="['void']"
                         vars="['']"
                         qual="const">
float trackMomentumError() const;
                </method1>

                <method1 name="superCluster"
                         return="SuperClusterRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
SuperClusterRef superCluster() const;
                    <comment>
      get associated superCluster Pointer
                    </comment>
                </method1>

                <method1 name="gsfTrack"
                         return="reco::GsfTrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::GsfTrackRef gsfTrack() const;
                    <comment>
      get associated GsfTrack pointer
                    </comment>
                </method1>

                <method1 name="track"
                         return="reco::TrackRef"
                         args="['void']"
                         vars="['']"
                         qual="const">
reco::TrackRef track() const;
                </method1>

                <method1 name="numberOfClusters"
                         return="int"
                         args="['void']"
                         vars="['']"
                         qual="const">
int numberOfClusters() const;
                    <comment>
      number of related brem clusters
                    </comment>
                </method1>

                <method1 name="basicClustersBegin"
                         return="basicCluster_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
basicCluster_iterator basicClustersBegin() const;
                    <comment>
      array of pointers to the related brem clusters
                    </comment>
                </method1>

                <method1 name="basicClustersEnd"
                         return="basicCluster_iterator"
                         args="['void']"
                         vars="['']"
                         qual="const">
basicCluster_iterator basicClustersEnd() const;
                </method1>

                <method1 name="isElectron"
                         return="bool"
                         args="['void']"
                         vars="['']"
                         qual="const">
bool isElectron() const;
                </method1>

            </section>

        </class>
        <typedef name="PixelMatchGsfElectron"
                 value="GsfElectron">
typedef GsfElectron PixelMatchGsfElectron;
        </typedef>

    </namespace>

    <type name="GsfElectron*"/>
    <type name="RecoCandidate"/>
    <type name="SuperClusterRef"/>
    <type name="basicCluster_iterator"/>
    <type name="bool"/>
    <type name="const GlobalPoint"/>
    <type name="const GlobalVector"/>
    <type name="const GsfTrackRef"/>
    <type name="const LorentzVector&amp;"/>
    <type name="const SuperClusterRef"/>
    <type name="const float"/>
    <type name="const int"/>
    <type name="const math::XYZTLorentzVectorD&amp;"/>
    <type name="const reco::GsfTrackRef&amp;"/>
    <type name="const reco::SuperClusterRef&amp;"/>
    <type name="double"/>
    <type name="float"/>
    <type name="float&amp;"/>
    <type name="int"/>
    <type name="math::XYZPoint"/>
    <type name="math::XYZVector"/>
    <type name="reco::GsfElectron"/>
    <type name="reco::GsfTrackRef"/>
    <type name="reco::TrackRef"/>
    <type name="void"/>
</header>
