// -*- C++ -*-
//
// Original Author:  Sezen SEKMEN & Harrison B. Prosper
//         Created:  Tue Dec  8 15:40:26 CET 2009
//         Updated:  Sun Jan 17 HBP - add log file
// $Id: TestBed.cc,v 1.4 2010/03/10 15:09:32 prosper Exp $
//
//
// ---------------------------------------------------------------------------
#include <boost/regex.hpp>
#include <memory>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cassert>
#include <map>
#include <time.h>
 
#include "PhysicsTools/LiteAnalysis/interface/treestream.hpp"
#include "PhysicsTools/LiteAnalysis/interface/kit.h"
#include "PhysicsTools/LiteAnalysis/interface/Method.h"
#include "PhysicsTools/Mkntuple/interface/pluginfactory.h"
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/FWLite/interface/AutoLibraryLoader.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "TROOT.h"

using namespace std;
using namespace reco;

class TestBed : public edm::EDAnalyzer 
{
public:
  explicit TestBed(const edm::ParameterSet&);
  ~TestBed();


private:
  virtual void beginJob();
  virtual void analyze(const edm::Event&, const edm::EventSetup&);
  virtual void endJob();
};


TestBed::TestBed(const edm::ParameterSet& iConfig)
{
  cout << GREEN << "BEGIN TestBed" << BLACK << endl;
  //gROOT->ProcessLine(".> /dev/null");
}


TestBed::~TestBed()
{
}


//
// member functions
//

static int counter=-1;

// ------------ method called to for each event  ------------
void
TestBed::analyze(const edm::Event& iEvent, 
                 const edm::EventSetup& iSetup)
{

  counter++;
  cout << "Event count: " << counter << endl;

  // Get genparticles:
  edm::Handle<GenParticleCollection> genParticles;
  // For now, hard-code getByLabel
  iEvent.getByLabel("genParticles", genParticles);
  
  // Write a unique string for each genparticle
  map<string, int> amap;
  
  char particle[255];
  for(unsigned int i = 0; i < genParticles->size(); i++) 
    {
      const GenParticle* p = &((*genParticles)[i]);
      sprintf(particle,"%s %d %f %f %f %f", 
              kit::particleName(p->pdgId()).c_str(), p->status(), 
              p->px(), p->py(), p->pz(), p->energy());
      amap[string(particle)] = i;
    }

  for(unsigned int i = 0; i < genParticles->size(); i++) 
    {
      const GenParticle& o = (*genParticles)[i];
      sprintf(particle,"%s %d %f %f %f %f", 
              kit::particleName(o.pdgId()).c_str(), o.status(), 
              o.px(), o.py(), o.pz(), o.energy());
      
      cout << i << "\t" << particle << endl;


      for(unsigned int j=0; j < o.numberOfMothers(); j++) 
        {
          // Must use original object because its copy constructor does not
          // do a deep copy and the pointers are not copied
          const GenParticle* m = dynamic_cast<const GenParticle*>(o.mother(j));
          if ( m == 0 ) continue;
          sprintf(particle,"%s %d %f %f %f %f", 
                  kit::particleName(m->pdgId()).c_str(), m->status(), 
                  m->px(), m->py(), m->pz(), m->energy());
          cout << "\t\tmother: " << j << "\t" << particle;
          if (amap.find(string(particle)) != amap.end() ) 
            {
              int k = amap[string(particle)];
              cout << "\t" << k;
            }
          cout << endl;
        }

      for(unsigned int j=0; j < o.numberOfDaughters(); j++) 
        {
          // Must use original object because its copy constructor does not
          // do a deep copy and the pointers are not copied
          const GenParticle* d = 
            dynamic_cast<const GenParticle*>(o.daughter(j));
          if ( d == 0 ) continue;
          sprintf(particle,"%s %d %f %f %f %f", 
                  kit::particleName(d->pdgId()).c_str(), d->status(), 
                  d->px(), d->py(), d->pz(), d->energy());
          cout << "\t\t\tdaughter: " << j << "\t" << particle;
          if (amap.find(string(particle)) != amap.end() ) 
            {
              int k = amap[string(particle)];
              cout << "\t" << k;
            }
          cout << endl;
        }
    }
}

// --- method called once each job just before starting event loop  -----------
void 
TestBed::beginJob()
{
}

// --- method called once each job just after ending the event loop  ----------
void 
TestBed::endJob() 
{
}

//define this as a plug-in
DEFINE_FWK_MODULE(TestBed);
