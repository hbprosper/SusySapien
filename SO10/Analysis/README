Harrison B. Prosper		Wed Feb 10, 2010
$Revision: 1.4 $


A. INTRODUCTION

Mkntuple provides a flexible mechanism for mapping simple methods belonging
to RECO and PAT objects to simple ntuple variables. However, sometimes a
variable, for example, the relative isolation, requires hand coding to create 
it. Such cases can be handled in the way described below.

B. USER-DEFINED VARIABLES

I shall explain the mechanism by way of an example. Suppose we want to add 
the relative isolation,

	(ecalIso() + hcalIso() + trackIso())/pt(),

to the n-tuple.

The automatic mechanism cannot handle variables derived from methods with 
non-simple arguments, nor variables that require calculation, as in this
example. But we can handle such variables, if we are prepared to do a bit of 
hand-coding!


	1) myplugins.h

We first create a new class called patMuonExtra, based on pat::Muon, that 
contains the user-coded method:

	double relIso() const
	{ return (ecalIso() + hcalIso() + trackIso())/pt(); }

We can name the class as we please, so long as the name is unique. The 
patMuonExtra class is defined in 

	interface/myplugins.h

This should contain all the classes you wish to extend.


	2) classes.h and classes_def.xml

Next, to make patMuonExtra known to the system, we need to include its header 
in the special file
	
	src/classes.h

and declare the class of interest in the special XML file 

	src/classes_def.xml

Every extension class should be declared in classes_def.xml.


	3) myplugins.cc

Finally, we need to define a plugin that Mkntuple can load into memory at
runtime, thereby making the methods of patMuonExtra available to Mkntuple. 
Every plugin that is needed should be declared in myplugins.cc. see

	test/example.py

for an example of a complete configuration file


C. BUILDING

As usual, the code is compiled and linked using

	scramv1 b

D. RESTRICTIONS

The current version of Mkntuple does not permit extensions to RECO and 
PAT classes that require access to objects other than the one being extended. 
For example, a method that extends pat::Muon but requires access to a
reco::BeamSpot object cannot be handled at present. If necessary, I can lift 
this restriction later.



